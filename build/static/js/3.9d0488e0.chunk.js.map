{"version":3,"sources":["utils/images/logoPDF.png","components/modal/modal.tsx","features/SP/Doctor/profile/personalTab/personalInfo.tsx","utils/conutry_state_city.js","features/SP/Doctor/profile/professionalInfo/professionalInfo.tsx","features/SP/Doctor/profile/treatmentsInfo/treatmentsInfo.tsx","features/SP/Doctor/profile/businessInfo/businessInfo.tsx","features/SP/Doctor/profile/visibleProfileInfo/visibleProfileAPI.ts","features/SP/Doctor/profile/visibleProfileInfo/visibleProfileSlice.ts","features/SP/Doctor/profile/visibleProfileInfo/visibleProfileInfo.tsx","features/SP/Doctor/profile/myProfile/myProfile.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","display","margin","title","padding","spacing","textField","marginBottom","linkCheckbox","alignItems","chanpePassword","height","marginTop","typogarphy","textAlign","submitButton","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","top","left","transform","rand","Math","round","random","getModalStyle","Modla","props","React","useState","modalStyle","dispatch","useAppDispatch","classes","Modal","open","onClose","close","autoComplete","style","className","id","right","float","fontSize","color","fontWeight","cursor","onClick","a","content","message","Box","justifyContent","variant","fullWidth","values","undefined","type","setField","DeleteDataFormUser","then","response","payload","data","statusCode","Toast","success","error","root1","fab","paddingTop","title1","title2","textDecoration","input","selectEmpty","border_fix","borderColor","formControl","minWidth","formControlSelect","breakpoints","down","BottomButtons","marginRight","buttonBox","flexWrap","fixImage","paddingLeft","only","office_address_interface","address_line1","country","state","post_code","same_as_correspondence","city","getFilteredAddress","user_addresses","filteredAddresses","filter","address","length","PersonalInfo","ref","file_url","user_details","linkedInProfile","phone","email","mobile","salutation","first_name","middle_name","last_name","is_active","country_code","country_code_mobile","filteredOfficeAddresses","useSelector","useMemo","filteredCorrespondenceAddresses","weekOff","setWeekOff","setActive","history","useHistory","useEffect","window","scrollTo","loadSpinner","setintitialStateValue","week_off","linkedin_profile","office_address","correspondence_address","closeSpinner","Object","keys","item","push","intitialStateValue","user","useAppSelector","selectLogin","selectedFile","setSelectedFile","preview","setPreview","setCountry","countryState","setCountryState","checked","setChecked","checkedA","checkedB","setOpen","handleModalClose","checkIndexOfCorrespondence","officeAddresses","correspondenceAddress","forEach","index","modalContent","setModalContent","saveDoctorPersonalProfileInfo","new_off","newData","map","fetchDoctorPersonalInfoAsync","result","console","log","fetchProfileAsync","setPopupProps","primaryText","hideSecondaryButton","objectUrl","URL","createObjectURL","revokeObjectURL","onSelectFile","e","target","files","formData","FormData","append","fetchChangeProfilePictureAsync","setState_city","useImperativeHandle","onTabChange","change","dirty","onYes","setDirty","popupProps","countries","setCountries","states","setStates","cities","setCities","setState","Auth","url","BaseUrl","token","getToken","fetch","method","headers","Authorization","res","json","isoCode","sortname","getCountries","country_name","body","JSON","stringify","stateId","getStates","state_name","getCities","visible","dismiss","enableReinitialize","initialValues","onSubmit","actions","newValues","parse","validationSchema","Yup","shape","required","nullable","matches","Regex","SPECIAL_CHARACTERS","of","NAME","EMAIL","min","max","Number","touched","errors","handleBlur","handleSubmit","handleChange","setFieldValue","setFieldTouched","isSubmitting","Grid","overflow","container","xs","borderWidth","objectFit","borderStyle","borderRadius","src","opacity","Typography","noWrap","unique_code","htmlFor","component","hidden","accept","onChange","marginLeft","FormControl","Select","labelId","name","value","changeAccStatus","catch","err","changeAccStatus_acc","MenuItem","buttonStyle","setTimeout","lg","fieldName","placeholder","helperText","onBlur","InputProps","startAdornment","InputAdornment","disableUnderline","disabled","dialCodes","sort","b","inputProps","defaultValue","Date","toLocaleDateString","D1","CD","newWeek","d1","d2","splice","index_1","render","insert","remove","mb","Tooltip","IconButton","marginButtom","ListItemText","primary","toString","Checkbox","currency","sm","paddingBottom","forwardRef","uploadButton","uploadButton_1","ProfessionalInfo","user_registration","user_education","user_work_experience","speciality_info","registrationInfoData","registration_number","registration_authority","year","document","educationInfoData","qualification","college_university","workExperinceInfoData","role","clinic_name","address_line2","ward","zipcode","duration","reference","reference_email","reference_phone","current_organization","specialityList","label","isEmpty","user_id","speciality","intialValidValues","setInitialStateValue","getFullYear","Array","from","val","yearfunction","years","fieldGet","setFieldGet","fieldenable","setFieldenable","specialityError","SetspecialityError","saveDoctorProfessionalProfileInfo","register","objectToFormData","register_educationInfoData","fetchDoctorProfessionalInfoAsync","workExperince","setType","Registeration_number","Year","test","post","primaryTest","direction","flex","event","split","size","endAdornment","multiple","overflowX","overflowY","item_item","index_2","slice","href","wordBreak","maxWidth","alt","require","default","flexDirection","Ward","Country","getAllCountries","State","getStatesOfCountry","items","City","getCitiesOfState","item_1","getAllStates","sinceval","md","Autocomplete","ChipProps","fontFamily","options","getOptionLabel","option","renderInput","params","TextField","floor","v","toLowerCase","reduce","p","c","includes","newArr","pop","withRouter","save","setSave","savedTreatmentDetailsList","selectTreatmentsProfileUsers","selectedAreas","uniqBy","area","categorys","category","selectCategory","subCategorys","subcategory","treatments","treatment","selectTreatments","pivot","area_id","categoryChecked","setCategoryChecked","treatmentsChecked","handleClose","treatmentsList","treatmentsProfileSubCategoryUsers","treatmentsProfileCategoryUsers","filterCategoryChecked","some","cat","fetchSaveTreatmentsInfoAsync","treatment_id","sendTODb","fielddata","n","treatement","setDb","remove_all","fetchUpdateTreatmentsInfoAsync","unwrap","Treatementdata","treatement_id","category_id","sub_category_id","sub_category","setarea_id","setCategory","sub_categoryId","toalCounts","setTotalCounts","new_category_id","fetchSavedTreatmentsListAsync","areas","categories","subCategories","el","indexOf","count","hide","Card","paddingRight","arr","textTransform","whiteSpace","totalCounts","Ndata","handleCheckBoxChange","handleCheckBoxCategoryChange","Newdata","handleCheckBoxSubCategoryChange","index2","areadata","handleCheckBoxTreatmentsChange","BusinessInfo","user_business_info","user_payment_information","businessInfo","clinic_email","clinic_phone_number","website_address","tax_number","paymentsInfo","card_no","card_holder_name","bank_name","sort_code","swift_code","clinicInfo","address_line","address_line_1","postcode","fileUpload","is_primary_acc","setIntialState","saveDoctorbusinessProfileInfo","ob1","file","payment","account_no","parseInt","fetchDoctorBusinessInfoAsync","RegNumber","account_number","swiftcode","FormHelperText","fetchDoctorVisibleInfo","postNormalized","initialState","loading","visibleInfoUser","fetchDoctorVisibleInfoAsync","createAsyncThunk","rejectWithValue","doctorProfessionalInfoSlice","createSlice","reducers","clearStoreData","extraReducers","builder","addCase","pending","rejected","fulfilled","action","fixWrap","fix_pad","textAling","fix_margin","up","portfolio_interface","job_title","description","clinic_interface","doctor_portfolio","doctorHospitalClinic","doctor_hospital_clinic","introduction_title","professional_career_desc","portfolio","clinic","feedbacks","initialValuesInit","setInitialValues","windowWIdth","setWindowWidt","addEventListener","innerWidth","get","port_value","setPortvalue","port_file","setPortfile","Clinic_value","setClinicvalue","Clinic_File","setClinicFile","newfolio","doctor_portfolio_images","hospital_clinic_images","mainID","clinicForm","lenght","setValue","port","new_port","index_index","handleSaveClick","Intro","charAt","toUpperCase","Rating","newValue","TextareaAutosize","rowsMin","lineHeight","flexShrink","newPort","newFile","portCheck","newCLinic","newCLinicFile","Clinic_due","TabPanel","children","other","a11yProps","flexGrow","changeColor","MyProfile","profileUsers","selectProfileUsers","PersonalInfoRef","useRef","ProfessionalInfoRef","BusinessInfoRef","Button","Paper","Tabs","current","indicatorColor","textColor","centered","Tab"],"mappings":"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","file":"static/js/3.9d0488e0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logoPDF.f0b5d60e.png\";","import { Form, Formik, FormikProps } from \"formik\";\nimport React from \"react\";\nimport CustomButton from \"../../features/reusable/customButton/customButton\";\nimport CustomTextField from \"../../features/reusable/customTextField/customTextField\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Grid, makeStyles, createStyles, Theme, Box } from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport { DeleteDataFormUser } from \"../../features/SP/Doctor/profile/personalTab/personalInfoSlice\";\nimport { useAppDispatch } from \"../../hooks/hooks\";\nimport Toast from \"../../reducres/reducers/toast\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"block\",\n      margin: \"0 auto\",\n    },\n    title: {\n      padding: theme.spacing(3),\n    },\n    textField: {\n      marginBottom: theme.spacing(2),\n    },\n    linkCheckbox: {\n      alignItems: \"center\",\n    },\n    chanpePassword: {\n      height: \"41px\",\n      marginTop: \"20px\",\n    },\n    typogarphy: {\n      textAlign: \"right\",\n    },\n    submitButton: {\n      marginBottom: \"30px\",\n    },\n    paper: {\n      \"& > * \": {\n        textAlign: \"center\",\n      },\n      position: \"absolute\",\n      width: 400,\n      backgroundColor: theme.palette.background.paper,\n      border: \"2px solid #debcbd\",\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3), top: '50% !important',\n      left: '50% !important',\n      transform: 'translate(-50%, -50%)!important',\n    },\n  })\n);\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nexport default function Modla(props) {\n  const [modalStyle] = React.useState(getModalStyle);\n\n  const dispatch = useAppDispatch();\n\n  const handledelete = (values, fieldFunciton) => {\n    dispatch(DeleteDataFormUser({ id: values.id, type: values.type })).then(\n      (response) => {\n        if (response?.payload?.data?.statusCode == 200) {\n          Toast.success(response?.payload?.data?.message);\n          props.close();\n        } else {\n          Toast.error(response?.payload?.data?.message);\n        }\n      }\n    );\n  };\n\n  const classes = useStyles();\n\n  return (\n    <Modal\n    // style={{backgroundColor:}}\n      open={props?.open}\n      onClose={props?.close}\n      aria-labelledby=\"modal-delete-address\"\n      aria-describedby=\"modal-delete-address\"\n    >\n      <Form autoComplete=\"false\">\n        <div style={modalStyle} className={classes.paper}>\n          {/* {setTimer(30)} */}\n          <span\n            id=\"simple-modal-description\"\n            style={{\n              right: \"20px\",\n              top: \"10px\",\n              position: \"absolute\",\n              float: \"right\",\n              fontSize: \"20px\",\n              color: \"rgb(65 100 85)\",\n              fontWeight: 600,\n              padding: \"2px 5px\",\n              cursor: \"pointer\",\n            }}\n            onClick={async () => {\n              props?.close();\n            }}\n          >\n            X\n          </span>\n         \n          <p\n            id=\"simple-modal-description\"\n            style={{\n              fontSize: \"18px\",\n              color: \"rgb(65 100 85)\",\n              fontWeight: 600,marginTop:\"30px\"\n            }}\n          >\n            {/* Enter OTP sent to your mail <br />\n                {\"*****\" + verifyOtpp?.email.slice(4) + \" \"} to change your\n              Password. */}\n            {props?.content?.message || \"Are you sure you want to delete image?\"} <br />\n            {/* this {props?.type} */}\n            {/* <span>?This data will be deleted permanently.</span> */}\n          </p>\n        \n          {/* <CustomTextField\n                variant=\"outlined\"\n                fullWidth\n                placeholder=\"OTP\"\n                name=\"otp\"\n                defaultValue={values.otp}\n                onChange={\n                  handleChange\n                }\n                helperText={\n                  errors && errors.otp && touched && touched.otp && errors.otp\n                }\n                error={\n                  errors && errors.otp && touched && touched.otp && errors.otp\n                  ? true\n                  : false\n                }\n              /> */}\n\n          <Box\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          \n          >\n             <CustomButton\n              variant=\"outlined\"\n              fullWidth\n              style={{\n                background: \"none\",\n                border: \"1px solid #085044\",\n                color: \"#085044\",\n              }}\n              onClick={() => {\n                props?.close();\n              }}\n            >\n              No\n            </CustomButton>\n            <CustomButton\n              variant=\"outlined\"\n              fullWidth\n              onClick={() => {\n                if (props?.content?.id !== undefined) {\n                  handledelete(\n                    { ...props.content, type: props.type },\n                    props.content.setField()\n                  );\n                } else {\n                  props.content.setField();\n                  Toast.success(`Successfully deleted ${props?.type}`);\n\n                  props?.close();\n                }\n              }}\n            >\n              Yes\n            </CustomButton>\n           \n          </Box>\n          <div\n            className=\"pointer\"\n            style={{\n              fontSize: \"15px\",\n              fontWeight: 600,\n              color: \"#085044\",\n            }}\n          ></div>\n        </div>\n      </Form>\n    </Modal>\n  );\n}\n","import React, { useState, useEffect, useContext, ForwardRefRenderFunction, useImperativeHandle, useMemo, useRef } from \"react\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Modal from \"../../../../../components/modal/modal\";\nimport { Country, State, City } from \"country-state-city\";\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { useHistory } from \"react-router\";\nimport {\n  Grid,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  InputAdornment,\n  Typography,\n  ListItemText,\n  Checkbox,\n  Box,\n} from \"@material-ui/core\";\n\nimport \"date-fns\";\n\nimport { map, filter, head, get, isEmpty } from \"lodash\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport { Formik, Form, FormikProps, FieldArray, Field, FormikConfig } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { useAppDispatch, useAppSelector } from \"../../../../../hooks/hooks\";\nimport CustomButton from \"../../../../reusable/customButton/customButton\";\nimport CustomTextField from \"../../../../reusable/customTextField/customTextField\";\nimport {\n  changeAccStatus,\n  fetchChangeProfilePictureAsync,\n  fetchDoctorPersonalInfoAsync,\n} from \"./personalInfoSlice\";\nimport \"./personalInfo.scss\";\nimport { selectLogin } from \"../../../../login/loginSlice\";\nimport ChangePassword from \"../../../../changePassword/changePassword\";\nimport { Regex } from \"../../../../../utils/validations\";\nimport {\n  closeSpinner,\n  loadSpinner,\n} from \"../../../../../reducres/reducers/spinner\";\nimport { useSelector } from \"react-redux\";\nimport { dialCodes } from \"../../../../../utils/dialCodes/dialCodes\";\nimport Toast from \"../../../../../reducres/reducers/toast\";\nimport { fetchProfileAsync } from \"../../../../profile/profileSlice\";\nimport Auth from \"../../../../../protectedRoutes/Auth\";\nimport CustomPopup from \"../../../../reusable/customPopup/customPopup\";\nimport { getCities, getCountries, getStates } from \"../../../../../utils/conutry_state_city\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root1: {\n    display: \"block\",\n    margin: \"0 auto\",\n  },\n  fab: {\n    margin: theme.spacing(2),\n  },\n  title: {\n    padding: theme.spacing(2),\n    paddingTop: \"1px\",\n    color: \"#085044\",\n  },\n  title1: {\n    padding: theme.spacing(2),\n    color: \"#085044\",\n    fontSize: \"16px\",\n  },\n  title2: {\n    color: \"#A2D3F7\",\n    fontSize: \"15px\",\n    textDecoration: \"underline\",\n  },\n  textField: {\n    marginBottom: theme.spacing(2),\n  },\n  linkCheckbox: {\n    alignItems: \"center\",\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n  typogarphy: {\n    textAlign: \"right\",\n  },\n  submitButton: {\n    marginTop: \"20px\",\n  },\n  input: {\n    display: \"none\",\n  },\n  selectEmpty: {\n    \"& > div > div > span\": {\n      // overflowX: \"scroll\",\n    },\n  },\n  border_fix: {\n    \"& > *\": {\n      borderColor: \"red !important\",\n    },\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    width: \"30px\",\n    minWidth: \"fit-content\",\n    \"& > *\": {\n      fontWeight: 700,\n      color: \"#085044\",\n    },\n  },\n  formControlSelect: {\n    margin: theme.spacing(1),\n    minWidth: 200,\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\",\n      \"& > *\": {\n        width: \"100%\",\n      },\n    },\n  },\n\n  BottomButtons: {\n    marginRight: \"30px\",\n\n    [theme.breakpoints.down(\"sm\")]: {\n      marginRight: \"0px\",\n\n      width: \"100%\",\n    },\n  },\n  buttonBox: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    flexWrap: \"nowrap\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\",\n      flexWrap: \"wrap\",\n      \"& > div\": {\n        width: \"100%\",\n      },\n      \"& >div> button\": {\n        width: \"100%\",\n      },\n    },\n  },\n  fixImage: {\n    flexWrap: \"wrap\",\n    \"& > span\": {\n      paddingLeft: \"20px\",\n    },\n    [theme.breakpoints.only(\"xs\")]: {\n      \"& > p\": {\n        width: \"100%\",\n        padding: \"20px 0px !important\",\n      },\n    },\n\n    \"& > p\": {\n      padding: \"0 40px\",\n    },\n  },\n}));\n\nexport interface IDoctorProfilePersonalInfo {\n  salutation: string;\n  first_name: string;\n  middle_name: string;\n  last_name: string;\n  email: string;\n  phone: string;\n  mobile: string;\n  weekOff: any;\n  linkedin_profile: string;\n  officeAddress: string;\n  address_line1: string;\n  country: string;\n  state: string;\n  postalCode: string;\n}\nlet office_address_interface: {\n  address_line1: string;\n  country: string;\n  state: string;\n  post_code: string;\n  city: string;\n  same_as_correspondence: number;\n  type: string\n}[] = [\n    {\n      address_line1: \"\",\n      country: \"\",\n      state: \"\",\n      post_code: \"\",\n      same_as_correspondence: 0,\n      city: \"\",\n      type: '0'\n    },\n  ];\n\nlet correspondence_address_interface: {\n  address_line1: string;\n  country: string;\n  state: string;\n  post_code: string;\n  city: string;\n}[] = [\n    {\n      address_line1: \"\",\n      country: \"\",\n      state: \"\",\n      post_code: \"\",\n      city: \"\",\n    },\n  ];\n\nlet valuecheck = null;\n\ntype HtmlProps = React.HTMLProps<HTMLElement>\n\nconst getFilteredAddress = (user_addresses, type) => {\n  let filteredAddresses = user_addresses?.filter(address => address.type == type)\n  return filteredAddresses?.length > 0 ? filteredAddresses : [{ address_line1: \"\", country: \"\", state: \"\", post_code: \"\", city: \"\", type }]\n}\n\nconst PersonalInfo: ForwardRefRenderFunction<FormikConfig<any>, any> = ({\n  user_addresses,\n  file_url,\n  user_details,\n  linkedInProfile,\n  phone,\n  email,\n  mobile,\n  salutation,\n  first_name,\n  middle_name,\n  last_name,\n  is_active,\n  country_code,\n  country_code_mobile,\n}, ref: any) => {\n  const ProfileUserState = useSelector((state) => state);\n\n  const filteredOfficeAddresses = useMemo(() => getFilteredAddress(user_addresses, \"0\"), [user_addresses])\n  const filteredCorrespondenceAddresses = useMemo(() => getFilteredAddress(user_addresses, \"1\"), [user_addresses])\n\n  const [weekOff, setWeekOff] = useState([]);\n\n  const [active, setActive] = useState<number>(1);\n  const history = useHistory();\n  useEffect(() => {\n    window.scrollTo(0, 0)\n    setActive(is_active);\n\n    dispatch(loadSpinner());\n    setintitialStateValue({\n      is_active: is_active,\n      country_code_mobile: country_code_mobile || \"+1\",\n      country_code: country_code || \"+1\",\n      salutation: salutation || \"0\",\n      week_off: user_details?.week_off || [],\n      first_name: first_name,\n      middle_name: middle_name,\n      last_name: last_name,\n      email: email,\n      phone: phone,\n      mobile: mobile,\n\n      linkedin_profile: user_details?.linkedin_profile,\n      office_address: filteredOfficeAddresses,\n      correspondence_address: filteredCorrespondenceAddresses,\n    });\n\n    dispatch(closeSpinner());\n  }, [is_active, country_code]);\n  useEffect(() => {\n    if (user_details && user_details?.week_off !== null) {\n      let week_off = [];\n      if (user_details?.week_off !== null) {\n        Object.keys(user_details.week_off).filter((item) => {\n          week_off.push(user_details.week_off[item]);\n        });\n        setWeekOff(week_off);\n      }\n    }\n  }, [user_details?.week_off]);\n\n  const deleteAddress = (data: any) => { };\n\n  const [intitialStateValue, setintitialStateValue] = useState({\n    is_active: is_active,\n    salutation: salutation || \"0\",\n    week_off: weekOff || [],\n    first_name: first_name,\n    middle_name: middle_name,\n    last_name: last_name,\n    email: email,\n    country_code: country_code,\n    country_code_mobile: country_code_mobile,\n    phone: phone,\n    mobile: mobile,\n    linkedin_profile: user_details?.linkedin_profile,\n    office_address: filteredOfficeAddresses,\n    correspondence_address: filteredCorrespondenceAddresses,\n  });\n\n  const dispatch = useAppDispatch();\n\n  const classes = useStyles();\n  const { user } = useAppSelector(selectLogin);\n  const [dropDownValue, setDropDownValue] = React.useState(\"\");\n  const [age, setAge] = React.useState(\"\");\n  const [selectedFile, setSelectedFile] = useState();\n  const [preview, setPreview] = useState();\n  // const [countries, setCountries] = useState(Country.getAllCountries());\n  const [country, setCountry] = useState(\"\");\n  const [countryState, setCountryState] = useState(\"\");\n  const [checked, setChecked] = React.useState<any>(null);\n  const [state, setState] = React.useState({\n    checkedA: true,\n    checkedB: true,\n  });\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleModalClose = () => {\n    setOpen(!open);\n  };\n\n  const checkIndexOfCorrespondence = (officeAddresses, correspondenceAddress) => {\n    officeAddresses.forEach((address, index) => {\n      if (\n        address.address_line1 == correspondenceAddress?.address_line1 &&\n        address.city == correspondenceAddress?.city &&\n        address.country == correspondenceAddress?.country &&\n        address.post_code == correspondenceAddress?.post_code &&\n        address.state == correspondenceAddress?.state\n      ) setChecked(index)\n    });\n  }\n\n  const [modalContent, setModalContent] = useState<any>({});\n\n  useEffect(() => {\n    // console.log(\"TOKEN\", Auth.getToken().token)\n    dispatch(loadSpinner());\n\n    checkIndexOfCorrespondence(filteredOfficeAddresses, filteredCorrespondenceAddresses[0])\n\n    setintitialStateValue({\n      is_active: is_active || 3,\n      country_code: country_code || \"+1\",\n      country_code_mobile: country_code_mobile || \"+1\",\n      salutation: salutation || \"0\",\n      week_off: user_details?.week_off || [],\n      first_name: first_name,\n      middle_name: middle_name,\n      last_name: last_name,\n      email: email,\n      phone: phone,\n      mobile: mobile,\n      linkedin_profile: user_details?.linkedin_profile,\n      office_address: filteredOfficeAddresses,\n      correspondence_address: filteredCorrespondenceAddresses,\n    });\n    dispatch(closeSpinner());\n  }, [\n    user_addresses,\n    file_url,\n    user_details,\n    linkedInProfile,\n    phone,\n    email,\n    country_code,\n    salutation,\n    first_name,\n    middle_name,\n    last_name,\n  ]);\n\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  const handleDropDownChange = (\n    event: React.ChangeEvent<{ value: unknown }>\n  ) => {\n    setAge(event.target.value as string);\n  };\n\n  const handleChange1 = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setDropDownValue(event.target.value as string);\n  };\n  const saveDoctorPersonalProfileInfo = async (data: any) => {\n    dispatch(loadSpinner());\n\n    let new_off = data.week_off;\n\n    const newData = {};\n    new_off.map((item, index) => {\n      newData[`${index}`] = item;\n      return item;\n    });\n\n    dispatch(\n      fetchDoctorPersonalInfoAsync({\n        is_active: data.is_active,\n        salutation: data.salutation,\n        week_off: newData,\n        country_code: data.country_code,\n        country_code_mobile: data.country_code_mobile,\n        first_name: data.first_name,\n        middle_name: data.middle_name,\n        last_name: data.last_name,\n        email: data.email,\n        phone: data.phone,\n        mobile: data.mobile,\n        linkedin_profile: data.linkedin_profile,\n        office_address: data.office_address,\n        correspondence_address: data.correspondence_address,\n      })\n    ).then(async (result) => {\n      if (result?.payload.length !== undefined) {\n        Toast.success(\"Successfully Saved Personal Info\");\n        console.log('after add datar', result)\n        await dispatch(fetchProfileAsync());\n\n      }\n      if (result?.payload?.response?.data?.statusCode == 400) {\n        setPopupProps({ title: 'Error', message: result?.payload?.response?.data?.message, primaryText: 'Ok', hideSecondaryButton: true })\n        // Toast.error(result?.payload?.response?.data?.message);\n      }\n      dispatch(closeSpinner());\n    });\n  };\n  useEffect(() => {\n    if (!selectedFile) {\n      setPreview(undefined);\n      return;\n    }\n\n    const objectUrl: any = URL.createObjectURL(selectedFile);\n    setPreview(objectUrl);\n\n    return () => URL.revokeObjectURL(objectUrl);\n  }, [selectedFile]);\n\n  const onSelectFile = (e) => {\n    if (!e.target.files || e.target.files.length === 0) {\n      setSelectedFile(undefined);\n      return;\n    }\n\n    setSelectedFile(e.target.files[0]);\n    const formData = new FormData();\n    formData.append(\"image\", e.target.files[0]);\n    dispatch(loadSpinner());\n    dispatch(fetchChangeProfilePictureAsync(formData)).then((result) => {\n      if (result?.payload?.file_url !== undefined) {\n        dispatch(fetchProfileAsync());\n        Toast.success(\"Successfully changed Profile Picture\");\n      }\n      if (result?.payload?.response?.data?.statusCode == 400) {\n        setPopupProps({ title: 'Error', message: result?.payload?.response?.data?.message, primaryText: 'Ok', hideSecondaryButton: true })\n        // Toast.error(result?.payload?.response?.data?.message);\n      }\n      dispatch(closeSpinner());\n    });\n  };\n  const stateStore = useSelector((state) => state[\"profile\"]);\n\n  const [State_DP, setState_city] = useState(\"\");\n\n  const changeAccStatus_acc = (payload, handleChange) => {\n\n    const onYes = () => {\n      dispatch(changeAccStatus(payload))\n        .then((result) => {\n          if (payload.type !== 'activate') handleChange()\n          if (result?.payload?.data?.statusCode == 200) {\n            if (result?.payload?.data?.message == 'Account removed successfully') {\n              Toast.success(result?.payload?.data?.message);\n              history.push(\"/\");\n            }\n            Toast.success(result?.payload?.data?.message);\n          } else {\n            setPopupProps({ title: 'Error', message: result?.payload?.response?.data.message, primaryText: 'Ok', hideSecondaryButton: true })\n            // Toast.error(result?.payload.data.message);\n          }\n        })\n        .catch((err) => {\n          setPopupProps({ title: 'Error', message: err?.message, primaryText: 'Ok', hideSecondaryButton: true })\n          // Toast.error(err?.message);\n        });\n    }\n\n    if (payload.type == 'inactivate') return setPopupProps({ title: 'Caution', message: 'Are you sure you want to deactivate your account?', onYes })\n    if (payload.type == 'permanentDelete') return setPopupProps({ title: 'Caution', message: 'Are you sure you want to permanently delete your account?', onYes })\n    onYes()\n  };\n\n  useImperativeHandle(ref, () => ({\n    // setPopupProps({ message: 'We have just sent you the email. If you do not hear from us in few minutes, please check your spam folder', title: \"Success\", primaryText: 'Ok', hideSecondaryButton: true })\n \n    onTabChange: (change: () => void) => !dirty ? change() : setPopupProps({message: 'You have unsaved changes. Are you sure you want to change the tab?',title: 'Caution',  onYes: change })\n  }))\n\n  const [dirty, setDirty] = useState(false)\n\n  const [popupProps, setPopupProps] = useState<any>()\n\n  const [countries, setCountries] = useState([])\n  const [states, setStates] = useState([])\n  const [cities, setCities] = useState([])\n\n  useEffect(()=>getCountries(setCountries),[])\n  useEffect(()=>getStates(country, setStates),[country])\n  useEffect(()=>getCities(countryState, setCities),[countryState])\n\n  console.log(states)\n\n  return (\n    <div ref={ref} className={`${classes.root1} doctor-profile-personal-info-tab `}>\n      {popupProps && <CustomPopup visible={popupProps ? true : false} dismiss={() => setPopupProps(null)} {...popupProps} />}\n      <Formik\n\n        enableReinitialize\n        initialValues={intitialStateValue}\n        onSubmit={(values: any, actions) => {\n          window.scrollTo(0, 0)\n          const newValues = JSON.parse(JSON.stringify(values))\n          newValues.correspondence_address[0].type = \"1\"\n          //console.log('enter data', newValues)\n          saveDoctorPersonalProfileInfo(newValues);\n        }}\n\n\n        validationSchema={Yup.object().shape({\n          salutation: Yup.string()\n            .required(\"Please select salutation\")\n            .nullable(),\n          first_name: Yup.string()\n            .matches(Regex.SPECIAL_CHARACTERS, \"Please enter valid first name\")\n            .required(\"Please enter first name\")\n\n            .nullable(),\n          week_off: Yup.array()\n            .of(Yup.string().required(\"Please Enter Week off\"))\n            .required(\"Please Enter Week off\"),\n          last_name: Yup.string()\n            .required(\"Please enter last name\")\n            .matches(Regex.NAME, \"Please enter valid first name\")\n            .nullable(),\n          email: Yup.string()\n            .required(\"Please enter a email address\")\n            .nullable()\n            .matches(Regex.EMAIL, \"Please enter valid the email address.\")\n            .email(\"Please include @\"),\n          phone: Yup.string()\n            .required(\"Please enter phone number\")\n            .min(7, \"Phone number should be atleast 7 digits.\")\n            .max(12, \"Phone number should be max 12 digits.\")\n            .matches(Regex.Number, \"Please enter valid the phone number.\")\n            .nullable(),\n          mobile: Yup.string()\n            .required(\"Please enter mobile number\")\n            .min(7, \"Mobile number should be atleast 7 digits.\")\n            .max(12, \"Mobile number should not be greater than 12 digits.\")\n            .matches(Regex.Number, \"Please enter valid the Mobile number.\")\n            .nullable(),\n          country_code: Yup.string()\n            .required(\"Please select country code\")\n            .nullable(),\n          country_code_mobile: Yup.string()\n            .required(\"Please select country code\")\n            .nullable(),\n          linkedin_profile: Yup.string()\n            .url(\"Please enter valid LinkedIn Profile link\")\n            .nullable(),\n          office_address: Yup.array().of(\n            Yup.object().shape({\n              address_line1: Yup.string()\n                .required(\"Please enter address line 1\")\n                .nullable(),\n              country: Yup.string()\n                .required(\"Please select Country\")\n                .nullable(),\n              city: Yup.string().required(\"Please select city\").nullable(),\n              state: Yup.string().required(\"Please select state\").nullable(),\n              post_code: Yup.string()\n                .min(4, \"Post Code must be atlease 4 digits.\")\n                // .matches(Regex.post, \"Please enter a valid post code\")\n                .required(\"Please enter post code\")\n                .nullable(),\n            })\n          ),\n\n          correspondence_address:\n            checked == null &&\n            Yup.array().of(\n              Yup.object().shape({\n                address_line1: Yup.string()\n                  .required(\"Please enter address line 1\")\n                  .nullable(),\n                country: Yup.string()\n                  .required(\"Please select Country\")\n                  .nullable(),\n                state: Yup.string().required(\"Please select state\").nullable(),\n                city: Yup.string().required(\"Please select city\").nullable(),\n                post_code: Yup.string()\n                  .required(\"Please enter post code\")\n                  .nullable(),\n              })\n            ),\n        })}\n      >\n        {(props: FormikProps<any>) => {\n          const {\n            values,\n            touched,\n            errors,\n            handleBlur,\n            handleSubmit,\n            handleChange,\n            setFieldValue,\n            setFieldTouched,\n            isSubmitting,\n            dirty\n          } = props;\n         console.log(values)\n          setDirty(dirty)\n          \n          return (\n            <>\n              <Form autoComplete=\"false\">\n                {checkIndexOfCorrespondence(values.office_address, values.correspondence_address[0])}\n                <Grid style={{ overflow: 'hidden' }} container spacing={4}>\n                  <Modal\n                    style={{ background: 'red' }}\n                    open={open}\n                    type={\"address\"}\n                    close={handleModalClose}\n                    content={modalContent}\n                  />\n\n                  {/* <Grid item xs={12}> */}\n                  {/* Bread Crumbs */}\n                  {/* <Breadcrumbs aria-label=\"breadcrumb\">\n                      <Link color=\"inherit\" href=\"/\">\n                        Dashboard\n                      </Link>\n                      |\n                      <Link color=\"inherit\" href=\"/\">\n                        My Profile\n                      </Link>\n                    </Breadcrumbs>\n                  </Grid> */}\n                  <Grid item xs={12}>\n                    {/* Image and User info BOx */}\n                    <Box\n                      display=\"flex\"\n                      justifyContent=\"space-between\"\n                      flexWrap=\"wrap\"\n                    >\n                      <span\n                        style={{ display: \"flex\", borderWidth: 5, borderColor: '#eee' }}\n                        className={classes.fixImage}\n                      >\n                        {selectedFile ?\n                          <img style={{ objectFit: 'contain', borderWidth: 1, borderColor: '#ddd', borderStyle: 'solid', borderRadius: 5 }} src={preview} height=\"170px\" width=\"200px\" />\n                          :\n                          file_url ? <img style={{ objectFit: 'contain', borderWidth: 1, borderColor: '#ddd', borderStyle: 'solid', borderRadius: 5 }} src={file_url} height=\"170px\" width=\"200px\" /> : (\n                            <div style={{ width: 200, height: 170, border: '1px solid #ddd', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                              <p style={{ textAlign: 'center', opacity: 0.5 }} >Max 2mb</p>\n                            </div>\n                          )\n                        }\n                        <span>\n                          <Typography noWrap>\n                            <div className=\"typo-1\">\n                              SP ID:\n                              <span className=\"bold-green-content\">\n                                {\" \"}\n                                {user?.unique_code}\n                              </span>\n                            </div>\n                            <div className=\"typo-1\">\n                              Response Rate:\n                              <span className=\"bold-green-content\">\n                                {\" \"}\n                                2 days\n                              </span>\n                            </div>\n                            <div className=\"typo-1\">\n                              Rating:\n                              <span className=\"bold-green-content\">\n                                {\" \"}\n                                4.8 | 5\n                              </span>\n                            </div>\n                          </Typography>\n                          <label htmlFor=\"contained-button-file\">\n                            <CustomButton\n                              component=\"span\"\n                              className=\"doctor-profile-change-button\"\n                              style={{ marginTop: \"25px\", marginBottom: 0 }}\n                            >\n                              Upload Picture\n                              <input\n                                hidden\n                                id=\"contained-button-file\"\n                                type=\"file\"\n                                accept=\"image/*\"\n                                onChange={onSelectFile}\n                              />\n                            </CustomButton>\n                            <span style={{ justifyContent: 'center', alignItems: 'center', marginTop: 0, marginLeft: 34 }}>(max 2mb)\n                            </span>\n                          </label>\n                        </span>\n                      </span>\n                      <FormControl\n                        variant=\"outlined\"\n                        className={classes.formControlSelect}\n                      >\n                        {/* <InputLabel\n                          variant={\"outlined\"}\n                          id=\"demo-simple-select-outlined-label\"\n                        >\n                          Status\n                        </InputLabel> */}\n                        <Select\n                          labelId=\"demo-simple-select-outlined-label\"\n                          id=\"demo-simple-select-outlined\"\n                          name=\"is_active\"\n                          value={values.is_active || 3}\n                          onChange={(e) => {\n                            if (e.target.value == 1) handleChange(e)\n                            changeAccStatus_acc({\n                              type:\n                                e.target.value == 1\n                                  ? \"activate\"\n                                  : e.target.value == 2\n                                    ? \"inactivate\"\n                                    : e.target.value == 4\n                                      ? \"permanentDelete\"\n                                      : \"\",\n                            }, () => handleChange(e));\n                          }}\n\n                          style={{\n                            color: \"#085044 !important\",\n                            fontWeight: 600,\n                            width: 200, marginLeft: 15,\n                            textAlign: \"center\"\n                          }}\n                          className=\"status-drop-down active-select MuiInputBase-root-visual newbtn\"\n                        >\n                          {/* {is_active && is_active === 1 && ( */}\n                          <MenuItem value={1}>Active</MenuItem>\n                          {/* )} */}\n\n                          {/* {is_active && is_active === 3 && ( */}\n                          <MenuItem style={{ display: 'none' }} value={3}>Unverified</MenuItem>\n                          {/* )} */}\n                          <MenuItem value={2}>Deactivate</MenuItem>\n                          <MenuItem value={4}>Delete</MenuItem>\n                          {/* <MenuItem value={30}>Thirty</MenuItem> */}\n                        </Select>\n\n\n\n                        <span className=\"newbtn\">\n                          <Box className={classes.buttonBox}>\n                            <CustomButton\n                              buttonStyle={{ width: 247, marginRight: -47 }}\n                              type=\"submit\"\n                              onClick={() => {\n                                setTimeout(() => {\n                                  if (Object.keys(errors).length > 0) setPopupProps({ message: 'There are required fields you need to fill out.', title: \"Required Fields\", hideSecondaryButton: true, primaryText: 'Ok' })\n                                }, 500)\n                                handleSubmit()\n                              }}\n                              // onClick={() => {\n                              //   window.scrollTo(0, 0)\n                              //   const newValues = JSON.parse(JSON.stringify(values))\n                              //   newValues.correspondence_address[0].type = \"1\"\n                              //   // console.log('enter data', newValues)\n                              //   saveDoctorPersonalProfileInfo(newValues);\n                              // }}\n                              variant=\"contained\"\n                              className={`register-button ${classes.BottomButtons}`}\n                            >\n                              Save\n                            </CustomButton>\n                          </Box>\n                        </span>\n\n                      </FormControl>\n\n\n                    </Box>\n                  </Grid>\n\n                  <Grid item xs={12} lg={12}>\n                    {/* First Name*/}\n\n                    <Grid container spacing={3}>\n                      <Grid item xs={12} lg={3}>\n                        <CustomTextField\n                          fullWidth\n\n                          className=\"login-text-field first-name-salutaion-field\"\n                          autoComplete=\"off\"\n                          variant=\"outlined\"\n                          color=\"#085044\"\n                          fieldName=\"First Name\"\n                          name=\"first_name\"\n                          required\n                          id=\"input-with-dropdown\"\n                          placeholder=\"First Name\"\n                          value={values.first_name}\n                          type=\"text\"\n                          helperText={\n                            (errors.first_name || errors.salutation) &&\n                              (touched.first_name || touched.salutation)\n                              ? errors.first_name || errors.salutation\n                              : \"\"\n                          }\n                          error={\n                            (errors.first_name || errors.salutation) &&\n                              (touched.first_name || touched.first_name)\n                              ? true\n                              : false\n                          }\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          InputProps={{\n                            startAdornment: (\n                              <InputAdornment position=\"start\">\n                                <FormControl className={classes.formControl}>\n                                  <Select\n                                    id=\"salutation\"\n                                    name=\"salutation\"\n                                    value={values.salutation + ''}\n                                    disableUnderline\n                                    onChange={handleChange}\n                                    error={\n                                      errors.salutation && touched.salutation\n                                        ? true\n                                        : false\n                                    }\n                                  >\n                                    <MenuItem value={\"0\"}>Mr</MenuItem>\n                                    <MenuItem value={\"1\"}>Mrs</MenuItem>\n                                    <MenuItem value={\"3\"}>Miss</MenuItem>\n                                    <MenuItem value={\"4\"}>Dr</MenuItem>\n                                    <MenuItem value={\"2\"}>Other</MenuItem>\n                                  </Select>\n                                </FormControl>\n                                <Typography>|</Typography>\n                              </InputAdornment>\n                            ),\n                          }}\n                        />\n                      </Grid>\n                      <Grid item xs={12} lg={3}>\n                        {/* Middle Name */}\n                        <CustomTextField\n                          fullWidth\n                          color=\"#085044\"\n                          fieldName=\"Middle Name\"\n                          placeholder=\"Middle Name\"\n                          className=\"login-text-field\"\n                          variant=\"outlined\"\n                          name=\"middle_name\"\n                          id=\"middleName\"\n                          value={values.middle_name || \"\"}\n                          type=\"text\"\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                        />\n                      </Grid>\n                      <Grid item xs={12} lg={3}>\n                        {/* Last Name */}\n                        <CustomTextField\n                          fullWidth\n                          fieldName=\"Last Name\"\n                          required\n                          color=\"#085044\"\n                          className=\"login-text-field\"\n                          variant=\"outlined\"\n                          name=\"last_name\"\n                          id=\"lastName\"\n                          placeholder=\"Last Name\"\n                          value={values.last_name}\n                          type=\"text\"\n                          helperText={\n                            errors.last_name && touched.last_name\n                              ? errors.last_name\n                              : \"\"\n                          }\n                          error={\n                            errors.last_name && touched.last_name ? true : false\n                          }\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                        />\n                      </Grid>\n                      <Grid item xs={12} lg={3}>\n                        {/* Email id */}\n                        <CustomTextField\n                          fullWidth\n                          fieldName=\"Email Id\"\n                          className=\"login-text-field\"\n                          variant=\"outlined\"\n                          required\n                          disabled\n                          color=\"#085044\"\n                          name=\"email\"\n                          id=\"email\"\n                          placeholder=\"Email Address\"\n                          value={values.email}\n                          type=\"text\"\n                          helperText={\n                            errors.email && touched.email ? errors.email : \"\"\n                          }\n                          error={errors.email && touched.email ? true : false}\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                        />\n                      </Grid>\n                       \n                      <Grid item xs={12} lg={3}>\n{/* Phone Number */}\n<CustomTextField\n\n  fullWidth\n  fieldName=\"Phone Number\"\n  className=\"login-text-field\"\n  variant=\"outlined\"\n  name=\"phone\"\n  color=\"#085044\"\n  id=\"input-with-dropdown\"\n  required\n  placeholder=\"Phone\"\n  value={values.phone}\n  type=\"text\"\n  helperText={\n    (errors.country_code || errors.phone) &&\n      (touched.country_code || touched.phone)\n      ? errors.phone || errors.country_code\n      : \"\"\n  }\n  error={\n    (errors.country_code || errors.phone) &&\n      (touched.country_code || touched.phone)\n      ? true\n      : false\n  }\n  onChange={handleChange}\n  onBlur={handleBlur}\n  InputProps={{\n    startAdornment: (\n      <InputAdornment position=\"start\">\n        <FormControl className={classes.formControl}>\n          <Select\n            style={{ color: \"#085044\" }}\n            id=\"country_code\"\n            name=\"country_code\"\n            value={values.country_code || \"+1\"}\n            disableUnderline\n            onChange={handleChange}\n            error={\n              errors.country_code &&\n                touched.country_code\n                ? true\n                : false\n            }\n          >\n            {dialCodes\n              .sort((a: any, b: any) => {\n                return a - b;\n              })\n              .map((item) => {\n                return (\n                  <MenuItem style={{ color: \"#085044\" }} value={`+${item}`}>\n                    {`+${item}`}\n                  </MenuItem>\n                );\n              })}\n          </Select>\n        </FormControl>\n        <Typography>|</Typography>\n      </InputAdornment>\n    ),\n  }}\n/>\n</Grid>\n\n\n<Grid item xs={12} lg={3}>\n<CustomTextField\n  fullWidth\n  fieldName={\"Mobile Number\"}\n  className=\"login-text-field\"\n  variant=\"outlined\"\n  name=\"mobile\"\n  id=\"input-with-dropdown\"\n  required\n  color=\"#085044\"\n  placeholder=\"Mobile number\"\n  value={values.mobile}\n  type=\"text\"\n  helperText={\n    errors.mobile && touched.mobile ? errors.mobile : \"\"\n  }\n  error={errors.mobile && touched.mobile ? true : false}\n  onChange={handleChange}\n  onBlur={handleBlur}\n  InputProps={{\n    startAdornment: (\n      <InputAdornment position=\"start\">\n        <FormControl className={classes.formControl}>\n          <Select\n            style={{ color: \"#085044\" }}\n            id=\"country_code_mobile\"\n            name=\"country_code_mobile\"\n            value={values.country_code_mobile || \"+1\"}\n            disableUnderline\n            onChange={handleChange}\n            error={\n              errors.country_code_mobile &&\n                touched.country_code_mobile\n                ? true\n                : false\n            }\n          >\n            {dialCodes\n              .sort((a: any, b: any) => {\n                return a - b;\n              })\n              .map((item) => {\n                return (\n                  <MenuItem value={`+${item}`}>\n                    {`+${item}`}\n                  </MenuItem>\n                );\n              })}\n          </Select>\n        </FormControl>\n        <Typography>|</Typography>\n      </InputAdornment>\n    ),\n  }}\n/>\n</Grid>\n\n\n\n\n\n\n\n\n{/* \n                      <Grid item xs={12} lg={3}>\n                        \n                        <CustomTextField\n\n                          fullWidth\n                          fieldName=\"Phone Number\"\n                          className=\"login-text-field\"\n                          variant=\"outlined\"\n                          name=\"phone\"\n                          color=\"#085044\"\n                          id=\"input-with-dropdown\"\n                          required\n                          placeholder=\"Phone\"\n                          value={values.phone}\n                          type=\"text\"\n                          helperText={\n                            (errors.country_code_mobile || errors.phone) &&\n                              (touched.country_code_mobile || touched.phone)\n                              ? errors.phone || errors.country_code_mobile\n                              : \"\"\n                          }\n                          error={\n                            (errors.country_code_mobile || errors.phone) &&\n                              (touched.country_code_mobile || touched.phone)\n                              ? true\n                              : false\n                          }\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          InputProps={{\n                            startAdornment: (\n                              <InputAdornment position=\"start\">\n                                <FormControl className={classes.formControl}>\n                                  <Select\n                                    style={{ color: \"#085044\" }}\n                                    id=\"country_code_mobile\"\n                                    name=\"country_code_mobile\"\n                                    value={values.country_code_mobile || \"+1\"}\n                                    disableUnderline\n                                    onChange={handleChange}\n                                    error={\n                                      errors.country_code_mobile &&\n                                        touched.country_code_mobile\n                                        ? true\n                                        : false\n                                    }\n                                  >\n                                    {dialCodes\n                                      .sort((a: any, b: any) => {\n                                        return a - b;\n                                      })\n                                      .map((item) => {\n                                        return (\n                                          <MenuItem style={{ color: \"#085044\" }} value={`+${item}`}>\n                                            {`+${item}`}\n                                          </MenuItem>\n                                        );\n                                      })}\n                                  </Select>\n                                </FormControl>\n                                <Typography>|</Typography>\n                              </InputAdornment>\n                            ),\n                          }}\n                        />\n                      </Grid>\n\n\n                      <Grid item xs={12} lg={3}>\n                        <CustomTextField\n                          fullWidth\n                          fieldName={\"Mobile Number\"}\n                          className=\"login-text-field\"\n                          variant=\"outlined\"\n                          name=\"mobile\"\n                          id=\"input-with-dropdown\"\n                          required\n                          color=\"#085044\"\n                          placeholder=\"Mobile number\"\n                          value={values.mobile}\n                          type=\"text\"\n                          helperText={\n                            errors.mobile && touched.mobile ? errors.mobile : \"\"\n                          }\n                          error={errors.mobile && touched.mobile ? true : false}\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          InputProps={{\n                            startAdornment: (\n                              <InputAdornment position=\"start\">\n                                <FormControl className={classes.formControl}>\n                                  <Select\n                                    style={{ color: \"#085044\" }}\n                                    id=\"country_code\"\n                                    name=\"country_code\"\n                                    value={values.country_code || \"+1\"}\n                                    disableUnderline\n                                    onChange={handleChange}\n                                    error={\n                                      errors.country_code &&\n                                        touched.country_code\n                                        ? true\n                                        : false\n                                    }\n                                  >\n                                    {dialCodes\n                                      .sort((a: any, b: any) => {\n                                        return a - b;\n                                      })\n                                      .map((item) => {\n                                        return (\n                                          <MenuItem value={`+${item}`}>\n                                            {`+${item}`}\n                                          </MenuItem>\n                                        );\n                                      })}\n                                  </Select>\n                                </FormControl>\n                                <Typography>|</Typography>\n                              </InputAdornment>\n                            ),\n                          }}\n                        />\n                      </Grid> */}\n\n\n                      \n                      <Grid item xs={12} lg={3}>\n                        {/* Week Off */}\n                        <CustomTextField\n                          fullWidth\n                          fieldName=\"Week Leaves /Offs\"\n                          className=\"login-text-field\"\n                          variant=\"outlined\"\n                          value={\"\"}\n                          name=\"week_off\"\n                          inputProps={{ min: \"2021/01/11\" }}\n                          id=\"weekOff\"\n                          placeholder=\"weekOff\"\n                          defaultValue={new Date().toLocaleDateString()}\n                          type=\"date\"\n                          helperText={\n                            errors.week_off && touched.week_off\n                              ? errors.week_off\n                              : \"\"\n                          }\n                          error={\n                            errors.week_off && touched.week_off ? true : false\n                          }\n                          onChange={(e) => {\n                            let D1: any = new Date(values?.week_off[0]);\n                            let CD: any = new Date(e.target.value);\n                            if (\n                              values?.week_off.length > 1 &&\n                              values?.week_off.length > 0\n                            ) {\n                              if (D1 < CD) {\n                                let newWeek = JSON.parse(\n                                  JSON.stringify(values?.week_off)\n                                );\n                                if (newWeek[1] === undefined) {\n                                  if (D1 > CD) {\n                                    let d1 = e.target.value;\n                                    let d2 = newWeek[0];\n                                    setFieldValue(\"week_off\", [d1, d2]);\n                                    return;\n                                  }\n                                  newWeek.push(e.target.value);\n                                } else {\n                                  newWeek[1] = e.target.value;\n                                }\n                                setFieldValue(\"week_off\", newWeek);\n                              } else {\n                                let newWeek = JSON.parse(\n                                  JSON.stringify(values?.week_off)\n                                );\n                                newWeek[0] = e.target.value;\n                                newWeek.splice(1, 1);\n                                setFieldValue(\"week_off\", newWeek);\n                              }\n                            } else {\n                              setFieldValue(`week_off`, [\n                                ...values?.week_off,\n                                e.target.value,\n                              ]);\n                            }\n                          }}\n                          onBlur={handleBlur}\n                        />\n\n                        <div\n                          style={{\n                            display: \"flex\",\n                            flexWrap: \"nowrap\",\n                            width: \"118%\",\n                          }}\n                        >\n                          {values.week_off.length > 0 && values.week_off?.map &&\n                            values?.week_off?.map(\n                              (item, index) =>\n                                index < 2 && (\n                                  <span\n                                    onClick={() => {\n                                      setFieldValue(\n                                        \"week_off\",\n                                        values?.week_off.filter(\n                                          (item, index_1) => {\n                                            return index !== index_1;\n                                          }\n                                        )\n                                      );\n                                    }}\n                                    style={{\n                                      display: \"flex\",\n                                      alignItems: \"center\",\n                                      padding: \"2px 10px\",\n                                      minWidth: \"116px\",\n                                    }}\n                                  >\n                                    <Typography>\n                                      {index == 0 && <span>Start-Date: </span>}\n                                      {index == 1 && <span>End-Date: </span>}\n                                      {item}\n                                    </Typography>\n                                    <RemoveCircleIcon\n                                      style={{\n                                        fontSize: \"22px\",\n                                        marginLeft: \"10px\",\n                                      }}\n                                    />\n                                  </span>\n                                )\n                            )}\n                        </div>\n                      </Grid>\n\n                      {/* Office Address Starts */}\n                      <Grid item xs={12} lg={12}>\n                        {/* Office Address */}\n                        <FieldArray\n                          name=\"office_address\"\n                          render={({ insert, remove, push }) => (\n                            <>\n                              <Box\n                                style={{ marginTop: 20 }}\n                                display=\"flex\"\n                                alignItems=\"center\"\n                                justifyContent=\"space-between\"\n                                mb={3}\n                              >\n                                <Box display=\"flex\" alignItems=\"center\">\n                                  <Typography\n                                    variant=\"h4\"\n                                    className=\"office-address-title\"\n                                  >\n                                    Office Address\n                                  </Typography>\n                                  <InfoIcon\n                                    fontSize=\"large\"\n                                    className=\"add-info-icon\"\n                                  />\n                                </Box>\n                                <Tooltip title=\"Add More\">\n                                  <IconButton aria-label=\"add-more\">\n                                    <AddCircleIcon\n                                      onClick={() => {\n\n                                        insert(0, {\n                                          address_line1: \"\",\n                                          country: \"\",\n                                          state: \"\",\n                                          post_code: \"\",\n                                          same_as_correspondence: 0,\n                                          type: '0'\n                                        })\n                                      }\n\n                                      }\n                                      fontSize=\"large\"\n                                      className={\n                                        classes.fab + \" add-icon pointer\"\n                                      }\n                                    />\n                                  </IconButton>\n                                </Tooltip>\n                              </Box>\n\n                              {values?.office_address?.filter(address => address.type == '0')?.length > 0 &&\n                                values?.office_address?.filter(address => address.type == '0').map(\n                                  (item: any, index: any) => (\n                                    <div className=\"work-inner-box\" style={{ display: 'flex', alignItems: 'center' }} >\n\n                                      <Grid style={{ marginTop: index ? 20 : 0 }} container spacing={3}>\n                                        <Grid item xs={12}>\n                                          <CustomTextField\n                                            fullWidth\n                                            fieldName={\"Address Line\"}\n                                            variant=\"outlined\"\n                                            required\n                                            className=\"login-text-field address-line-1\"\n                                            name={`office_address.${index}.address_line1`}\n                                            placeholder=\"Address Line 1\"\n                                            value={item.address_line1}\n                                            style={{ marginButtom: \"15px\", color: '#085044' }}\n                                            onChange={(e) => {\n                                              handleChange(e);\n                                              if (checked == index) {\n                                                setFieldValue(\n                                                  `correspondence_address.${0}.address_line1`,\n                                                  e.target.value\n                                                );\n                                              }\n                                            }}\n                                            onBlur={handleBlur}\n                                          />\n                                          {errors &&\n                                            errors.office_address &&\n                                            errors.office_address[index] &&\n                                            errors.office_address[index]\n                                              .address_line1 &&\n                                            touched &&\n                                            touched.office_address &&\n                                            touched.office_address[index] &&\n                                            touched.office_address[index]\n                                              .address_line1 && (\n                                              <div className=\"field-error\">\n                                                {\n                                                  errors.office_address[index]\n                                                    .address_line1\n                                                }\n                                              </div>\n                                            )}\n                                        </Grid>\n                                        <Grid item xs={12} lg={3}>\n                                          <label\n                                            htmlFor={`office_address.${index}.country`}\n                                          >\n                                            Country\n                                            <span style={{ color: \"red\" }}>\n                                              *\n                                            </span>\n                                          </label>\n                                          <Select\n                                            placeholder=\"Country\"\n                                            labelId=\"demo-mutiple-checkbox-label\"\n                                            id=\"country\"\n                                            name={`office_address[${index}].country`}\n                                            variant=\"outlined\"\n                                            className={` ${classes.selectEmpty\n                                              } ${errors.office_address &&\n                                              errors.office_address[index] &&\n                                              errors.office_address[index]\n                                                .country &&\n                                              touched.office_address &&\n                                              touched.office_address[index] &&\n                                              touched.office_address[index]\n                                                .country &&\n                                              classes.border_fix\n                                              } no-scrooll input-label login-text-field `}\n                                            onChange={(e: any) => {\n                                              if (checked == index) {\n                                                setFieldValue(\n                                                  `correspondence_address[${0}].country`,\n                                                  e.target.value\n                                                );\n                                              }\n                                              return (\n                                                console.log(e.target.value),\n                                                handleChange(e),\n                                                setCountry(e.target.value),\n                                                setFieldValue(\n                                                  `office_address[${index}].state`,\n                                                  \"\"\n                                                ),\n                                                setFieldValue(\n                                                  `office_address[${index}].city`,\n                                                  \"\"\n                                                )\n                                              );\n                                            }}\n                                            value={item.country}\n                                          >\n                                            {countries.map(\n                                              (item) => (\n                                                <MenuItem\n                                                  key={item[\"countryCode\"]}\n                                                  value={item.name}\n                                                >\n                                                  <ListItemText\n                                                    primary={item.name}\n                                                  />\n                                                </MenuItem>\n                                              )\n                                            )}\n                                          </Select>\n\n                                          {errors &&\n                                            errors.office_address &&\n                                            errors.office_address[index] &&\n                                            errors.office_address[index]\n                                              .country &&\n                                            touched &&\n                                            touched.office_address &&\n                                            touched.office_address[index] &&\n                                            touched.office_address[index]\n                                              .country && (\n                                              <div className=\"field-error\">\n                                                {\n                                                  errors.office_address[index]\n                                                    .country\n                                                }\n                                              </div>\n                                            )}\n                                        </Grid>\n\n                                        <Grid item xs={12} lg={3}>\n                                          <label\n                                            htmlFor={`office_address.${index}.state`}\n                                          >\n                                            State\n                                            <span style={{ color: \"red\" }}>\n                                              *\n                                            </span>\n                                          </label>\n                                          <Select\n                                            labelId=\"demo-mutiple-checkbox-label\"\n                                            id=\"state\"\n                                            name={`office_address.${index}.state`}\n                                            variant=\"outlined\"\n                                            className={` ${classes.selectEmpty\n                                              } ${errors.office_address &&\n                                              errors.office_address[index] &&\n                                              errors.office_address[index]\n                                                .state &&\n                                              touched.office_address &&\n                                              touched.office_address[index] &&\n                                              touched.office_address[index]\n                                                .state &&\n                                              classes.border_fix\n                                              } no-scrooll input-label login-text-field `}\n                                            onChange={(e:any) => {\n                                              handleChange(e);\n                                              setCountryState(e.target.value);\n                                              setFieldValue(\n                                                `office_address.${index}.city`,\n                                                \"\"\n                                              );\n\n                                              if (checked == index) {\n                                                setFieldValue(\n                                                  `correspondence_address.${0}.state`,\n                                                  e.target.value\n                                                );\n                                              }\n                                              setState_city(\n                                                e.target.value.toString()\n                                              );\n                                            }}\n                                            value={item.state}\n                                          >\n                                            {states?.map((item) => {\n                                              return (\n                                                <MenuItem\n                                                  key={item.name}\n                                                  value={item.name}\n                                                > \n                                                  <ListItemText\n                                                    primary={item.name}\n                                                  />\n                                                </MenuItem>\n                                              );\n                                            })}\n                                          </Select>\n                                          {errors &&\n                                            errors.office_address &&\n                                            errors.office_address[index] &&\n                                            errors.office_address[index]\n                                              .state &&\n                                            touched &&\n                                            touched.office_address &&\n                                            touched.office_address[index] &&\n                                            touched.office_address[index]\n                                              .state && (\n                                              <div className=\"field-error\">\n                                                {\n                                                  errors.office_address[index]\n                                                    .state\n                                                }\n                                              </div>\n                                            )}\n                                        </Grid>\n                                        <Grid lg={3} xs={12} item>\n                                          <label\n                                            htmlFor={`workExperinceInfoData[${index}].city`}\n                                          >\n                                            City\n                                            {checked == null && (\n                                              <span style={{ color: \"red\" }}>\n                                                *\n                                              </span>\n                                            )}\n                                          </label>\n\n                                          <Select\n                                            labelId=\"demo-mutiple-checkbox-label\"\n                                            id=\"city\"\n                                            name={`office_address.${index}.city`}\n                                            variant=\"outlined\"\n                                            className={` ${classes.selectEmpty\n                                              } ${errors.office_address &&\n                                              errors.office_address[index] &&\n                                              errors.office_address[index]\n                                                .city &&\n                                              errors.office_address &&\n                                              errors.office_address[index] &&\n                                              errors.office_address[index]\n                                                .city &&\n                                              classes.border_fix\n                                              } no-scrooll input-label `}\n                                            onChange={(e) => {\n                                              handleChange(e);\n                                              if (checked == index) {\n                                                setFieldValue(\n                                                  `correspondence_address.${0}.city`,\n                                                  e.target.value\n                                                );\n                                              }\n                                            }}\n                                            value={item.city}\n                                          >\n                                            {/* mapping city */}\n                                            {cities.map((item) => {\n                                              return (\n                                                <MenuItem\n                                                  key={item.name}\n                                                  value={item.name}\n                                                >\n                                                  <ListItemText\n                                                    primary={item.name}\n                                                  />\n                                                </MenuItem>\n                                              );\n                                            })}\n                                          </Select>\n                                          {errors &&\n                                            errors.office_address &&\n                                            errors.office_address[index] &&\n                                            errors.office_address[index].city &&\n                                            touched &&\n                                            touched.office_address &&\n                                            touched.office_address[index] &&\n                                            touched.office_address[index]\n                                              .city && (\n                                              <div className=\"field-error\">\n                                                {\n                                                  errors.office_address[index]\n                                                    .city\n                                                }\n                                              </div>\n                                            )}\n                                        </Grid>\n\n                                        <Grid item xs={12} lg={3}>\n                                          <CustomTextField\n                                            fullWidth\n                                            fieldName=\"Zip code /Post code\"\n                                            className=\"login-text-field\"\n                                            name={`office_address.${index}.post_code`}\n                                            placeholder=\"Zip code /Post code\"\n                                            variant=\"outlined\"\n                                            required\n                                            type=\"text\"\n                                            onBlur={handleBlur}\n                                            onChange={(e) => {\n                                              handleChange(e);\n                                              if (checked == index) {\n                                                setFieldValue(\n                                                  `correspondence_address.${index}.post_code`,\n                                                  e.target.value\n                                                );\n                                              }\n                                            }}\n                                            value={item.post_code}\n                                            helperText={\n                                              errors &&\n                                              errors.office_address &&\n                                              errors.office_address[index] &&\n                                              errors.office_address[index]\n                                                .post_code &&\n                                              touched &&\n                                              touched.office_address &&\n                                              touched.office_address[index] &&\n                                              touched.office_address[index]\n                                                .post_code &&\n                                              errors.office_address[index]\n                                                .post_code\n                                            }\n                                            error={\n                                              errors &&\n                                                errors.office_address &&\n                                                errors.office_address[index] &&\n                                                errors.office_address[index]\n                                                  .post_code &&\n                                                touched &&\n                                                touched.office_address &&\n                                                touched.office_address[index] &&\n                                                touched.office_address[index]\n                                                  .post_code\n                                                ? true\n                                                : false\n                                            }\n                                          />\n                                        </Grid>\n\n                                        <Box display=\"flex\" alignItems=\"center\" style={{ marginBottom: \"20px\" }}>\n                                          <Checkbox\n                                            checked={checked == index}\n                                            onChange={() => {\n                                              if (checked == index) {\n                                                setChecked(null);\n                                                setFieldValue(\"correspondence_address\", [{ address_line1: \"\", country: \"\", state: \"\", post_code: \"\", city: \"\" }])\n                                              } else {\n                                                setChecked(index);\n                                                setFieldValue(`correspondence_address`, [item]);\n                                              }\n                                              setFieldTouched(`correspondence_address[0].country`, false);\n                                              setFieldTouched(`correspondence_address[0].state`, false);\n                                              setFieldTouched(`correspondence_address[0].city`, false);\n                                            }}\n                                            inputProps={{ \"aria-label\": \"\" }}\n                                            onBlur={handleBlur}\n                                          />\n                                          <Typography>\n                                            Correspondence Address same as\n                                            office address\n                                          </Typography>\n                                        </Box>\n                                      </Grid>\n\n                                      <Box\n                                        display=\"flex\"\n                                        alignItems=\"center\"\n                                        justifyContent=\"flex-end\"\n                                      >\n                                        <Tooltip title=\"Remove\">\n                                          <IconButton aria-label=\"remove\">\n                                            <RemoveCircleIcon\n                                              onClick={() => {\n                                                handleModalClose();\n                                                setModalContent({\n                                                  ...item,\n                                                  message: \"Are you sure you want to delete this office address section?\",\n                                                  setField: () => values?.office_address.length == 1 ? setFieldValue('office_address', office_address_interface) : remove(index)\n                                                });\n                                              }}\n                                              fontSize=\"large\"\n                                              className={\n                                                classes.fab +\n                                                \" add-icon pointer\"\n                                              }\n                                            />\n                                          </IconButton>\n                                        </Tooltip>\n                                      </Box>\n                                    </div>\n\n                                  )\n                                )}\n                            </>\n                          )}\n                        />\n                      </Grid>\n\n                      {/* Corrospondence Address */}\n                      <Grid item xs={12} lg={12}>\n                        <FieldArray\n                          name=\"correspondence_address\"\n                          render={({ insert, remove, push }) => (\n                            <>\n                              <Box\n                                display=\"flex\"\n                                alignItems=\"center\"\n                                justifyContent=\"space-between\"\n                                mb={3}\n                              >\n                                <Box display=\"flex\" alignItems=\"center\">\n                                  <Typography\n                                    variant=\"h4\"\n                                    className=\"office-address-title\"\n                                  >\n                                    Correspondence Address\n                                  </Typography>\n                                  <InfoIcon\n                                    fontSize=\"large\"\n                                    className=\"add-info-icon\"\n                                  />\n                                </Box>\n                              </Box>\n\n                              {values?.correspondence_address?.length > 0 &&\n                                values.correspondence_address.map(\n                                  (item: any, index: any) => (\n                                    <>\n                                      <Grid container spacing={3}>\n                                        <Grid item xs={12}>\n                                          <CustomTextField\n                                            fullWidth\n                                            required={\n                                              !checked\n                                            }\n                                            variant=\"outlined\"\n                                            className=\"login-text-field address-line-1\"\n                                            name={`correspondence_address.${index}.address_line1`}\n                                            placeholder=\"Address Line 1\"\n                                            fieldName=\"Address Line\"\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={item.address_line1}\n                                            disabled={\n                                              checked != null ? true : false\n                                            }\n                                            helperText={\n                                              errors &&\n                                              errors.correspondence_address &&\n                                              errors.correspondence_address[\n                                              index\n                                              ] &&\n                                              errors.correspondence_address[\n                                                index\n                                              ].address_line1 &&\n                                              touched &&\n                                              touched.correspondence_address &&\n                                              touched.correspondence_address[\n                                              index\n                                              ] &&\n                                              touched.correspondence_address[\n                                                index\n                                              ].address_line1 &&\n                                              errors.correspondence_address[\n                                                index\n                                              ].address_line1\n                                            }\n                                            error={\n                                              errors &&\n                                                errors.correspondence_address &&\n                                                errors.correspondence_address[\n                                                index\n                                                ] &&\n                                                errors.correspondence_address[\n                                                  index\n                                                ].address_line1 &&\n                                                touched &&\n                                                touched.correspondence_address &&\n                                                touched.correspondence_address[\n                                                index\n                                                ] &&\n                                                touched.correspondence_address[\n                                                  index\n                                                ].address_line1\n                                                ? true\n                                                : false\n                                            }\n                                          />\n                                        </Grid>\n                                        <Grid item xs={12} lg={3}>\n                                          <label\n                                            htmlFor={`correspondence_address.${index}.country`}\n                                          >\n                                            Country\n                                            {checked == null && (\n                                              <span style={{ color: \"red\" }}>\n                                                *\n                                              </span>\n                                            )}\n                                          </label>\n                                          <Select\n                                            disabled={\n                                              checked != null ? true : false\n                                            }\n                                            placeholder=\"Country\"\n                                            value={item.country}\n                                            labelId=\"demo-mutiple-checkbox-label\"\n                                            id=\"country\"\n                                            name={`correspondence_address.${index}.country`}\n                                            variant=\"outlined\"\n                                            className={` ${classes.selectEmpty\n                                              } ${errors.correspondence_address &&\n                                              errors.correspondence_address[\n                                              index\n                                              ] &&\n                                              errors.correspondence_address[\n                                                index\n                                              ].country &&\n                                              classes.border_fix\n                                              } no-scrooll input-label login-text-field `}\n                                            onChange={(e: any) => {\n                                              return (\n                                                handleChange(e),\n                                                setCountry(e.target.value),\n                                                setFieldValue(\n                                                  `correspondence_address.${index}.state`,\n                                                  \"\"\n                                                ),\n                                                setFieldValue(\n                                                  `correspondence_address[${index}].city`,\n                                                  \"\"\n                                                )\n                                              );\n                                            }}\n                                          >\n                                            {countries.map((item) => (\n                                              <MenuItem\n                                                key={item?.currency}\n                                                value={item?.name}\n                                              >\n                                                <ListItemText\n                                                  primary={item?.name}\n                                                />\n                                              </MenuItem>\n                                            ))}\n                                          </Select>\n\n                                          {errors &&\n                                            errors.correspondence_address &&\n                                            errors.correspondence_address[\n                                            index\n                                            ] &&\n                                            errors.correspondence_address[index]\n                                              .country &&\n                                            touched &&\n                                            touched.correspondence_address &&\n                                            touched.correspondence_address[\n                                            index\n                                            ] &&\n                                            touched.correspondence_address[\n                                              index\n                                            ].country && (\n                                              <div className=\"field-error\">\n                                                {\n                                                  errors.correspondence_address[\n                                                    index\n                                                  ].country\n                                                }\n                                              </div>\n                                            )}\n                                        </Grid>\n\n                                        <Grid item xs={12} lg={3}>\n                                          <label\n                                            htmlFor={`correspondence_address.${index}.state`}\n                                          >\n                                            State/Province\n                                            {checked == null && (\n                                              <span style={{ color: \"red\" }}>\n                                                *\n                                              </span>\n                                            )}\n                                          </label>\n                                          <Select\n                                            labelId=\"demo-mutiple-checkbox-label\"\n                                            id=\"state\"\n                                            fullWidth\n                                            disabled={\n                                              checked != null ? true : false\n                                            }\n                                            variant=\"outlined\"\n                                            className={`login-text-field address-line-1 ${errors.correspondence_address &&\n                                              errors.correspondence_address[\n                                              index\n                                              ] &&\n                                              errors.correspondence_address[\n                                                index\n                                              ].state &&\n                                              classes.border_fix\n                                              }`}\n                                            name={`correspondence_address.${index}.state`}\n                                            placeholder=\"State\"\n                                            value={item.state}\n                                            onChange={(e : any) => (\n                                              handleChange(e),\n                                              setCountryState(e.target.value),\n                                              setFieldValue(\n                                                `correspondence_address[${index}].city`,\n                                                \"\"\n                                              )\n                                            )}\n                                          >\n                                            {states?.map((item) => {\n                                              return (\n                                                <MenuItem\n                                                  key={item.name}\n                                                  value={item.name}\n                                                >\n                                                  <ListItemText\n                                                    primary={item.name}\n                                                  />\n                                                </MenuItem>\n                                              );\n                                            })}\n                                          </Select>\n                                          {errors &&\n                                            errors.correspondence_address &&\n                                            errors.correspondence_address[\n                                            index\n                                            ] &&\n                                            errors.correspondence_address[index]\n                                              .state &&\n                                            touched &&\n                                            touched.correspondence_address &&\n                                            touched.correspondence_address[\n                                            index\n                                            ] &&\n                                            touched.correspondence_address[\n                                              index\n                                            ].state && (\n                                              <div className=\"field-error\">\n                                                {\n                                                  errors.correspondence_address[\n                                                    index\n                                                  ].state\n                                                }\n                                              </div>\n                                            )}\n                                        </Grid>\n\n                                        <Grid lg={3} xs={12} item>\n                                          <label\n                                            htmlFor={`correspondence_address.${index}.city`}\n                                          >\n                                            City\n                                            {checked == null && (\n                                              <span style={{ color: \"red\" }}>\n                                                *\n                                              </span>\n                                            )}\n                                          </label>\n\n                                          <Select\n                                            labelId=\"demo-mutiple-checkbox-label\"\n                                            id=\"city\"\n                                            name={`correspondence_address.${index}.city`}\n                                            variant=\"outlined\"\n                                            disabled={\n                                              checked !== null ? true : false\n                                            }\n                                            className={` ${classes.selectEmpty\n                                              } ${errors.correspondence_address &&\n                                              errors.correspondence_address[\n                                              index\n                                              ] &&\n                                              errors.correspondence_address[\n                                                index\n                                              ].city &&\n                                              classes.border_fix\n                                              } no-scrooll input-label `}\n                                            onChange={(e) => {\n                                              handleChange(e);\n                                            }}\n                                            value={item.city}\n                                          >\n                                            {/* {City.getCitiesOfState(\n                                              State.getAllStates().filter(\n                                                (items) => {\n                                                  return (\n                                                    items.name == item.state\n                                                  );\n                                                }\n                                              )[0]?.countryCode,\n                                              State.getAllStates().filter(\n                                                (items) => {\n                                                  return (\n                                                    items.name == item.state\n                                                  );\n                                                }\n                                              )[0]?.isoCode\n                                            ).map((item) => {\n                                              return (\n                                                <MenuItem\n                                                  key={item.name}\n                                                  value={item.name}\n                                                >\n                                                  <ListItemText\n                                                    primary={item.name}\n                                                  />\n                                                </MenuItem>\n                                              );\n                                            })} */}\n\n                                            {cities.map((item) => {\n                                              return (\n                                                <MenuItem\n                                                  key={item.name}\n                                                  value={item.name}\n                                                >\n                                                  <ListItemText\n                                                    primary={item.name}\n                                                  />\n                                                </MenuItem>\n                                              );\n                                            })}\n                                          </Select>\n                                          {errors &&\n                                            errors.correspondence_address &&\n                                            errors.correspondence_address[\n                                            index\n                                            ] &&\n                                            errors.correspondence_address[index]\n                                              .city &&\n                                            touched &&\n                                            touched.correspondence_address &&\n                                            touched.correspondence_address[\n                                            index\n                                            ] &&\n                                            touched.correspondence_address[\n                                              index\n                                            ].city && (\n                                              <div className=\"field-error\">\n                                                {\n                                                  errors.correspondence_address[\n                                                    index\n                                                  ].city\n                                                }\n                                              </div>\n                                            )}\n                                        </Grid>\n\n                                        <Grid item xs={12} lg={3}>\n                                          <CustomTextField\n                                            fullWidth\n                                            fieldName=\"Zip code /Post code\"\n                                            className=\"login-text-field\"\n                                            name={`correspondence_address.${index}.post_code`}\n                                            placeholder=\"Zip code /Post code\"\n                                            variant=\"outlined\"\n                                            type=\"text\"\n                                            value={item.post_code}\n                                            disabled={\n                                              checked != null ? true : false\n                                            }\n                                            onChange={handleChange}\n                                            required={\n                                              checked == null ? \"required\" : \"\"\n                                            }\n                                            onBlur={handleBlur}\n                                            helperText={\n                                              errors &&\n                                              errors.correspondence_address &&\n                                              errors.correspondence_address[\n                                              index\n                                              ] &&\n                                              errors.correspondence_address[\n                                                index\n                                              ].post_code &&\n                                              touched &&\n                                              touched.correspondence_address &&\n                                              touched.correspondence_address[\n                                              index\n                                              ] &&\n                                              touched.correspondence_address[\n                                                index\n                                              ].post_code &&\n                                              errors.correspondence_address[\n                                                index\n                                              ].post_code\n                                            }\n                                            error={\n                                              errors &&\n                                                errors.correspondence_address &&\n                                                errors.correspondence_address[\n                                                index\n                                                ] &&\n                                                errors.correspondence_address[\n                                                  index\n                                                ].post_code &&\n                                                touched &&\n                                                touched.correspondence_address &&\n                                                touched.correspondence_address[\n                                                index\n                                                ] &&\n                                                touched.correspondence_address[\n                                                  index\n                                                ].post_code\n                                                ? true\n                                                : false\n                                            }\n                                          />\n                                        </Grid>\n                                      </Grid>\n                                    </>\n                                  )\n                                )}\n                            </>\n                          )}\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n\n                  <Grid item xs={12} lg={6}>\n                    {/* LInked IN Profile */}\n                    <CustomTextField\n                      fullWidth\n                      fieldName={\"LinkedIn Profile (Paste profile Link)\"}\n                      className=\"login-text-field pl-15  mb-30\"\n                      variant=\"outlined\"\n                      name=\"linkedin_profile\"\n                      id=\"linkedInProfile\"\n                      placeholder=\"LinkedIn Profile\"\n                      value={values.linkedin_profile}\n                      type=\"text\"\n                      helperText={\n                        errors.linkedin_profile && touched.linkedin_profile\n                          ? errors.linkedin_profile\n                          : \"\"\n                      }\n                      error={\n                        errors.linkedin_profile && touched.linkedin_profile\n                          ? true\n                          : false\n                      }\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n              <Grid container spacing={2}>\n                <Grid item sm={12}>\n                  {/* Change Password Fileds */}\n                  <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                      <Typography\n                        variant={\"h4\"}\n                        className=\"office-address-title\"\n                      >\n                        Change Password\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={12} lg={12}>\n                      <ChangePassword />\n                    </Grid>\n                  </Grid>\n                </Grid>\n\n                {/* {Object.keys(errors).length} */}\n\n                <Grid item xs={12}>\n                  {/* BUttons Bottom */}\n                  <Box style={{ display: 'flex', alignItems: 'center' }} className={classes.buttonBox}>\n                    <div style={{ width: 'auto', marginLeft: 'auto', marginRight: 30, paddingTop: 0, paddingBottom: 0, marginBottom: 0 }} className={'work-inner-box'} >\n                      <p >Fields with \"<p style={{ color: 'red', display: 'inline' }} > * </p>\" are compulsory for profile verification</p>\n                    </div>\n                    <CustomButton\n                      type=\"submit\"\n                      // onClick={() => {\n                      //   window.scrollTo(0, 0)\n                      //   const newValues = JSON.parse(JSON.stringify(values))\n                      //   newValues.correspondence_address[0].type = \"1\"\n                      //   console.log('enter data', newValues)\n                      //   saveDoctorPersonalProfileInfo(newValues);\n                      // }}\n\n                      onClick={() => {\n                        setTimeout(() => {\n                          if (Object.keys(errors).length > 0) setPopupProps({ message: 'There are required fields you need to fill out.', title: \"Required Fields\", hideSecondaryButton: true, primaryText: 'Ok' })\n                        }, 500)\n                        handleSubmit()\n                      }}\n\n\n                      variant=\"contained\"\n                      className={`register-button ${classes.BottomButtons}`}\n                    >\n                      save\n                    </CustomButton>\n                    <div style={{ width: 0 }} />\n                    <CustomButton\n                      type=\"submit\"\n                      onClick={() => {\n                        setTimeout(() => {\n                          if (Object.keys(errors).length > 0) setPopupProps({ message: 'There are required fields you need to fill out.', title: \"Required Fields\", hideSecondaryButton: true, primaryText: 'Ok' })\n                        }, 500)\n                        handleSubmit()\n                      }}\n                      variant=\"contained\"\n                      className={`register-button ${classes.BottomButtons}`}\n                    >\n                      Get Verified\n                    </CustomButton>\n                    <div style={{ margin: -15 }} />\n                  </Box>\n                </Grid>\n              </Grid>\n            </>\n          );\n        }}\n\n      </Formik>\n    </div>\n  );\n};\n\nexport default React.forwardRef(PersonalInfo);","import Auth from \"../protectedRoutes/Auth\";\nimport { BaseUrl } from \"./apiHelpers\"\n\nexport const getCountries = (setState) => {\n    if (!Auth) return\n    const url = BaseUrl() + 'countries-list'\n    const token = Auth?.getToken()?.token;\n    fetch(url, { method: 'GET', headers: { Authorization: 'Bearer ' + token } })\n        .then(res => res.json())\n        .then(json => {\n            console.log(json)\n            setState(json.data.map(country => ({ ...country, isoCode: country.sortname, })))\n        })\n}\n\nexport const getStates = (country_name, setState) => {\n    if (!Auth) return\n    const url = BaseUrl() + 'state-list'\n    const token = Auth?.getToken()?.token;\n    fetch(url, { method: 'POST', body: JSON.stringify({ country_name }), headers: { Authorization: 'Bearer ' + token, 'Content-Type' : 'application/json' } })\n        .then(res => res.json())\n        .then(json => {\n            console.log(JSON.stringify({ country_name }), json)\n            setState(json.data.map(state => ({ ...state, isoCode: state.stateId, })))\n        })\n}\n\nexport const getCities = (state_name, setState) => {\n    if (!Auth) return\n    const url = BaseUrl() + 'city-list'\n    const token = Auth?.getToken()?.token;\n    fetch(url, { method: 'POST', body: JSON.stringify({ state_name }), headers: { Authorization: 'Bearer ' + token, 'Content-Type' : 'application/json' } })\n        .then(res => res.json())\n        .then(json => {\n            console.log(JSON.stringify({ state_name }), json)\n            setState(json.data.map(state => ({ ...state, isoCode: state.stateId, })))\n        })\n}","import React, { ForwardRefRenderFunction, useEffect, useImperativeHandle, useState } from \"react\";\nimport {\n  Grid,\n  MenuItem,\n  Select,\n  TextField,\n  Typography,\n  ListItemText,\n  Checkbox,\n  Box,\n  InputAdornment,\n  FormControl,\n} from \"@material-ui/core\";\nimport Modal from \"../../../../../components/modal/modal\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport axios from \"axios\";\nimport { map, filter, head, get, isEmpty, isArray } from \"lodash\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport { Formik, Form, FormikProps, FieldArray, FormikConfig } from \"formik\";\nimport * as Yup from \"yup\";\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { useAppDispatch } from \"../../../../../hooks/hooks\";\nimport CustomButton from \"../../../../reusable/customButton/customButton\";\nimport CustomTextField from \"../../../../reusable/customTextField/customTextField\";\nimport { fetchDoctorProfessionalInfoAsync } from \"./professionalInfoSlice\";\nimport \"./professionalInfo.scss\";\nimport { objectToFormData } from \"../../../../../utils/apiHelpers\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport {\n  closeSpinner,\n  loadSpinner,\n} from \"../../../../../reducres/reducers/spinner\";\nimport Toast from \"../../../../../reducres/reducers/toast\";\nimport { Regex } from \"../../../../../utils/validations\";\nimport { fetchProfileAsync } from \"../../../../profile/profileSlice\";\nimport { dialCodes } from \"../../../../../utils/dialCodes/dialCodes\";\nimport { City, Country, State } from \"country-state-city\";\nimport CustomPopup from \"../../../../reusable/customPopup/customPopup\";\nconst useStyles = makeStyles((theme: Theme) => ({\n  root1: {\n    display: \"block\",\n    margin: \"0 auto\",\n  },\n  fab: {\n    margin: theme.spacing(1),\n  },\n  title: {\n    padding: theme.spacing(2),\n    paddingTop: \"1px\",\n    color: \"#085044\",\n  },\n  title1: {\n    padding: theme.spacing(2),\n    color: \"#085044\",\n    fontSize: \"16px\",\n  },\n  title2: {\n    color: \"#A2D3F7\",\n    fontSize: \"15px\",\n    textDecoration: \"underline\",\n  },\n  textField: {\n    marginBottom: theme.spacing(2),\n  },\n  linkCheckbox: {\n    alignItems: \"center\",\n  },\n  input: {\n    display: \"none\",\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n  typogarphy: {\n    textAlign: \"right\",\n  },\n  submitButton: {\n    marginTop: \"20px\",\n  },\n  selectEmpty: {\n    \"& > div > div > span\": {\n      // overflowX: \"scroll\",\n    },\n  },\n  border_fix: {\n    \"& > *\": {\n      borderColor: \"red !important\",\n    },\n  },\n\n  formControl: {\n    // margin: theme.spacing(1),\n\n    // width: \"65px\",\n    minWidth: \"fit-content\",\n    \"& > *\": {\n      fontWeight: 700,\n      color: \"#085044\",\n    },\n  },\n  formControlSelect: {\n    margin: theme.spacing(1),\n    minWidth: 200,\n  },\n  BottomButtons: {\n    marginRight: \"30px\",\n\n    [theme.breakpoints.down(\"sm\")]: {\n      marginRight: \"0px\",\n\n      width: \"100%\",\n    },\n  },\n  buttonBox: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    flexWrap: \"nowrap\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\",\n      flexWrap: \"wrap\",\n      \"& > div\": {\n        width: \"100%\",\n      },\n      \"& >div> button\": {\n        width: \"100%\",\n      },\n    },\n  },\n\n  uploadButton: {\n    \"& > div\": {\n      padding: \"5px !important\",\n    },\n  },\n  uploadButton_1: {\n    \"& > div\": {\n      borderRadius: \"50px !important\",\n    },\n  },\n}));\n\nconst ProfessionalInfo: ForwardRefRenderFunction<FormikConfig<any>, any> = ({\n  user_registration,\n  user_education,\n  user_work_experience,\n  is_active,\n  speciality_info,\n}, ref: any) => {\n  let registrationInfoData: {\n    registration_number: string;\n    registration_authority: string;\n    year: string;\n    document: string;\n  }[] = [\n      {\n        registration_number: \"\",\n        registration_authority: \"\",\n        year: \"\",\n        document: \"\",\n      },\n    ];\n  let educationInfoData: {\n    qualification: string;\n    college_university: string;\n    year: string;\n    document: string;\n  }[] = [\n      {\n        qualification: \"\",\n        college_university: \"\",\n        year: \"\",\n        document: \"\",\n      },\n    ];\n  let specialityInfoData: {}[] = [{}];\n\n  let workExperinceInfoData: {\n    role: string;\n    clinic_name: string;\n    address_line1: string;\n    address_line2: string;\n    ward: string;\n    city: string;\n    state: string;\n    country: string;\n    zipcode: string;\n    duration: string;\n    reference: string;\n    linkedin_profile: string;\n    reference_email: string;\n    reference_phone: string;\n    current_organization: number;\n  }[] = [\n      {\n        role: \"\",\n        clinic_name: \"\",\n        address_line1: \"\",\n        address_line2: \"\",\n        ward: \"\",\n        city: \"\",\n        state: \"\",\n        country: \"\",\n        zipcode: \"\",\n        duration: \"\",\n        reference: \"\",\n        linkedin_profile: \"\",\n        reference_email: \"\",\n        reference_phone: \"\",\n        current_organization: 0,\n      },\n    ];\n  let specialityList = [\n    { label: \"Add New...\", value: 7 },\n    { label: \"  Cardiology - Non Interventional\", value: 0 },\n    { label: \"  Corneal Transplant..\", value: 1 },\n    { label: \"  General Surgery.\", value: 2 },\n    { label: \"  Infectious Diseases.\", value: 3 },\n    { label: \"  In-Vitro Fertilisation (IVF)\", value: 4 },\n    { label: \"  Laboratory Medicine.\", value: 5 },\n    { label: \" Medical Gastroenterology \", value: 6 },\n\n  ];\n  let speciality: any = [];\n\n  const [intialValidValues, setInitialStateValue] = useState({\n    registrationInfoData:\n      user_registration && !isEmpty(user_registration)\n        ? user_registration.map((item) => {\n          return {\n            registration_authority: item.registration_authority,\n            registration_number: item.registration_number,\n            year: item.year,\n            id: item.id,\n            document: [item.document],\n          };\n        })\n        : registrationInfoData,\n    educationInfoData:\n      user_education && !isEmpty(user_education)\n        ? user_education.map((item) => {\n          return {\n            ...item,\n            document: [item.document],\n          };\n        })\n        : educationInfoData,\n    workExperinceInfoData:\n      user_work_experience && !isEmpty(user_work_experience)\n        ? user_work_experience.map((item) => {\n          return {\n            id: item?.id,\n            user_id: item?.user_id,\n            role: item?.role,\n            clinic_name: item?.clinic_name,\n            ward: item?.ward,\n            address_line1: item?.address_line1,\n            address_line2: item?.address_line2,\n            city: item?.city,\n            state: item?.state,\n            country: item?.country,\n            zipcode: item?.zipcode,\n            duration: item?.duration,\n            country_code: item?.country_code,\n            reference: item?.reference,\n            linkedin_profile: item?.linkedin_profile,\n            reference_email: item?.reference_email,\n            reference_phone: item?.reference_phone,\n            current_organization: item?.current_organization,\n          };\n        })\n        : workExperinceInfoData,\n    speciality:\n      speciality_info &&\n        speciality_info?.speciality &&\n        speciality_info?.speciality != \"\" &&\n        speciality_info?.speciality != \"null\"\n        ? JSON.parse(speciality_info?.speciality)\n        : [],\n  });\n\n  useEffect(() => {\n    setInitialStateValue({\n      registrationInfoData:\n        user_registration && !isEmpty(user_registration)\n          ? user_registration.map((item) => {\n            return {\n              registration_authority: item.registration_authority,\n              registration_number: item.registration_number,\n              year: item.year,\n              id: item.id,\n              document: [item.document],\n            };\n          })\n          : registrationInfoData,\n      educationInfoData:\n        user_education && !isEmpty(user_education)\n          ? user_education.map((item) => {\n            return {\n              ...item,\n              document: [item.document],\n            };\n          })\n          : educationInfoData,\n      workExperinceInfoData:\n        user_work_experience && !isEmpty(user_work_experience)\n          ? user_work_experience.map((item) => {\n            return {\n              id: item?.id,\n              user_id: item?.user_id,\n              role: item?.role,\n              clinic_name: item?.clinic_name,\n              address_line1: item?.address_line1,\n              address_line2: item?.address_line2,\n              ward: item?.ward,\n              city: item?.city,\n              state: item?.state,\n              country: item?.country,\n              zipcode: item?.zipcode,\n              duration: item?.duration,\n              country_code: item?.country_code,\n              reference: item?.reference,\n              linkedin_profile: item?.linkedin_profile,\n              reference_email: item?.reference_email,\n              reference_phone: item?.reference_phone,\n              current_organization: item?.current_organization,\n            };\n          })\n          : workExperinceInfoData,\n      speciality:\n        speciality_info &&\n          speciality_info?.speciality &&\n          speciality_info?.speciality != \"\" &&\n          speciality_info?.speciality != \"null\"\n          ? JSON.parse(speciality_info?.speciality)\n          : [],\n    });\n  }, [\n    speciality_info,\n    user_work_experience,\n    user_education,\n    user_registration,\n  ]);\n\n  const classes = useStyles();\n  const dispatch = useAppDispatch();\n  const [selectedFile, setSelectedFile] = useState(\"\");\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"\");\n  const [checked, setChecked] = React.useState(null);\n\n  // For select drop down for year\n\n  function yearfunction() {\n    const year = (new Date()).getFullYear();\n    const yearsList = Array.from(new Array(30), (val, index) => year - index);\n    return yearsList;\n  }\n\n  // For select drop down for year sinceyear\n  function sincefunction() {\n    const sinceyear = 1;\n    const sinceyearList = Array.from(new Array(50), (val, index) => sinceyear + index);\n    return sinceyearList;\n  }\n\n  const [years, setYears] = useState(yearfunction());\n  const [since, setSince] = useState(sincefunction());\n\n  const handleCheckBoxChange = (index) => {\n    if (checked == index) {\n      setChecked(null);\n    } else {\n      setChecked(index);\n    }\n  };\n\n  const [fieldGet, setFieldGet] = useState<any>();\n  const [fieldenable, setFieldenable] = useState<any>(false);\n  const [specialityError, SetspecialityError] = useState(false);\n\n  // useEffect(() => {\n  //   let auth_token = sessionStorage.getItem(\"token\");\n  //   axios({\n  //     method: \"GET\",\n\n  //     headers: {\n  //       Accept: \"application/json\",\n  //       Authorization: `Bearer ${auth_token}`,\n  //     },\n  //   }).then((response) => setCountries(response.data));\n  // }, []);\n\n  // useEffect(() => {\n  //   if (country) {\n  //     let auth_token = sessionStorage.getItem(\"token\");\n\n  //     axios({\n  //       method: \"GET\",\n\n  //       headers: {\n  //         Accept: \"application/json\",\n  //         Authorization: `Bearer ${auth_token}`,\n  //       },\n  //     }).then((response) => {\n  //       setCountries(\n  //         countries.map((item, index) => {\n  //           return item.country_name === country\n  //             ? { ...item, states: response.data }\n  //             : item;\n  //         })\n  //       );\n  //     });\n  //   }\n  // }, [country]);\n\n  const [state, setState] = useState(\"\");\n\n  // useEffect(() => {\n  //   if (state) {\n  //     let auth_token = sessionStorage.getItem(\"token\");\n\n  //     axios({\n  //       method: \"GET\",\n\n  //       headers: {\n  //         Accept: \"application/json\",\n  //         Authorization: `Bearer ${auth_token}`,\n  //       },\n  //     }).then((response) => {\n  //       setCountries(\n  //         countries.map((item, index) => {\n  //           if (item.country_name === country) {\n  //             return {\n  //               ...item,\n  //               states: item.states.map((item_item) => {\n  //                 return item_item.state_name == state\n  //                   ? {\n  //                     ...item_item,\n  //                     city:\n  //                       response.data.length > 0\n  //                         ? response.data\n  //                         : [{ city_name: state }],\n  //                   }\n  //                   : item_item;\n  //               }),\n  //             };\n  //           } else {\n  //             return item;\n  //           }\n  //         })\n  //       );\n  //     });\n  //   }\n  // }, [state]);\n\n  const saveDoctorProfessionalProfileInfo = async (data: any) => {\n    let formData = new FormData();\n\n    let register = data.registrationInfoData.map((item) => {\n      return { ...item, document: item.document[0] };\n    });\n\n    formData = objectToFormData(register, \"registration\", formData);\n\n    let register_educationInfoData = data.educationInfoData.map((item) => {\n      return { ...item, document: item.document[0] };\n    });\n\n    formData = objectToFormData(\n      register_educationInfoData,\n      \"education\",\n      formData\n    );\n\n    formData = objectToFormData(\n      [...data.workExperinceInfoData],\n      \"workExperince\",\n      formData\n    );\n    formData = objectToFormData([...data.speciality], \"speciality\", formData);\n\n    console.log(JSON.stringify(formData, null, 2))\n\n    dispatch(loadSpinner());\n\n    dispatch(fetchDoctorProfessionalInfoAsync(formData)).then((result) => {\n      if (result?.payload?.workExperince !== undefined) {\n        Toast.success(\"Details Saved Successfully\");\n        dispatch(fetchProfileAsync());\n        dispatch(closeSpinner());\n      }\n      if (result?.payload?.response?.data?.statusCode == 400) {\n        let message = result?.payload?.response?.data?.message;\n        setPopupProps({ title: 'Error', message, primaryText: 'Ok', hideSecondaryButton: true })\n        // Toast.error(message);\n        dispatch(closeSpinner());\n      }\n    });\n  };\n\n  const [modalContent, setModalContent] = useState<any>({});\n  const [open, setOpen] = useState(false);\n  const handleModalClose = () => {\n    setOpen(!open);\n  };\n\n  useImperativeHandle(ref, () => ({\n    onTabChange: (change: () => void) => !dirty ? change() : setPopupProps({ title: 'Caution', message: 'You have unsaved changes. Are you sure you want to change the tab?', onYes: change })\n  }))\n\n  const [dirty, setDirty] = useState(false)\n\n\n  const [type, setType] = useState(\"\");\n  const [popupProps, setPopupProps] = useState<any>()\n  return (\n    <div ref={ref} className={`${classes.root1} doctor-profile-professional-info-tab `}>\n      {popupProps && <CustomPopup visible={popupProps ? true : false} dismiss={() => setPopupProps(null)} {...popupProps} />}\n      {/* <AutoErrorMessage /> */}\n      <Formik\n        enableReinitialize\n        initialValues={intialValidValues}\n        onSubmit={(values: any, actions) => {\n          if (values.speciality.length == 0) {\n            window.scrollTo(0, 0)\n            SetspecialityError(!specialityError);\n            setPopupProps({ title: 'Error', message: 'Please Fill all required Fileds.', primaryText: 'Ok', hideSecondaryButton: true })\n            // Toast.error(\"Please Fill all required Fileds.\");\n            return;\n          } else {\n            window.scrollTo(0, 0)\n            saveDoctorProfessionalProfileInfo(values);\n          }\n        }}\n        validationSchema={Yup.object().shape({\n          registrationInfoData: Yup.array().of(\n            Yup.object().shape({\n              registration_number: Yup.string()\n                .matches(\n                  Regex.Registeration_number,\n                  \"Please enter a valid registration number\"\n                )\n                .min(7, \"Registration Number must be between 7 to 15 character\")\n                .max(\n                  15,\n                  \"Registration Number must be between 7 to 15 character\"\n                )\n                .required(\"Please enter registration number\"),\n              registration_authority: Yup.string()\n                .matches(Regex.NAME, \"Must be a String.\")\n                .required(\"Please enter registration authority name\"),\n              year: Yup.string()\n                .matches(Regex.Year, \"Please enter valid year\")\n                .required(\"Please enter year\"),\n            })\n          ),\n          educationInfoData: Yup.array().of(\n            Yup.object().shape({\n              qualification: Yup.string().required(\n                \"Please enter highest qualification\"\n              ),\n              college_university: Yup.string().required(\n                \"Please enter a college/university\"\n              ),\n              year: Yup.string().required(\"Please enter year\"),\n            })\n          ),\n          speciality: Yup.array()\n            .of(\n              Yup.object({\n                label: Yup.string().required(\"Please select Speciality.\"),\n              })\n            )\n            .required(\"Please add Speciality\")\n            .test(\n              \"speciality-check\",\n              \"Please select Speciality.\",\n              function (value) {\n                return value.length > 0;\n              }\n            ),\n          workExperinceInfoData: Yup.array().of(\n            Yup.object().shape({\n              role: Yup.string().required(\"Please enter your role\").nullable(),\n              clinic_name: Yup.string()\n                .required(\"Please enter Hospital or Clinic name\")\n                .nullable(),\n              address_line1: Yup.string()\n                .required(\"Please enter address Line 1\")\n                .nullable(),\n              // country_code: Yup.string().required(),\n              city: Yup.string()\n                .matches(\n                  Regex.SPECIAL_CHARACTERS,\n                  \"Please enter valid city name\"\n                )\n                .required(\"Please enter city name\")\n                .nullable(),\n              state: Yup.string().required(\"Please select state\").nullable(),\n              country: Yup.string()\n                .required(\"Please select Country.\")\n                .nullable(),\n              zipcode: Yup.string()\n                .min(4, \"Post code must be between 4 to 6 number\")\n                .matches(Regex.post, \"Please enter a valid zip code\")\n                .required(\"Please enter Post Code.\")\n                .nullable(),\n              duration: Yup.string()\n                .required(\"Please enter duration\")\n                .nullable(),\n              reference: Yup.string()\n                .required(\"Please enter reference doctor name.\")\n                .nullable(),\n            })\n          ),\n        })}\n      >\n        {(props: FormikProps<any>) => {\n          const {\n            values,\n            touched,\n            errors,\n            handleBlur,\n            handleChange,\n            handleSubmit,\n            isSubmitting,\n            setFieldValue,\n            dirty\n          } = props;\n          setDirty(dirty)\n          return (\n            <Form>\n              <Modal\n                open={open}\n                type={type}\n                close={handleModalClose}\n                content={modalContent}\n              />\n              <Grid style={{ overflow: 'hidden' }} container spacing={4}>\n\n                <Grid style={{ overflow: 'hidden' }} item xs={12}>\n                  <FieldArray\n                    name=\"registrationInfoData\"\n                    render={({ insert, remove, push }) => (\n                      <div className={\"mb-1\"}>\n                        {values.registrationInfoData !== null &&\n                          values.registrationInfoData.length > 0 &&\n                          values.registrationInfoData.map(\n                            (item: any, index: any) => (\n                              <div\n                                className=\"row mb-3 d-flex align-items-center\"\n                                key={index}\n                              >\n                                {\n                                  index==0 &&\n                                  <Grid container>\n                                  <Grid item lg={6} xs={6} className=\"office-address-grid\">\n                                    <Typography className=\"office-address-title\" style={{ marginLeft: 18 }}>\n                                      Registration Information\n                                    </Typography>\n                                    <Tooltip title=\"Add More\">\n                                      <IconButton aria-label=\"add-more\">\n                                        <AddCircleIcon\n                                          onClick={() =>\n                                            insert(0, {\n                                              registration_number: \"\",\n                                              registration_authority:\n                                                \"\",\n                                              year: \"\",\n                                              document: \"\",\n                                            })\n                                          }\n                                          fontSize=\"large\"\n                                          className={\n                                            classes.fab +\n                                            \" add-icon pointer\"\n                                          }\n                                        />\n                                      </IconButton>\n                                    </Tooltip>\n                                  </Grid>\n                                  <Grid item lg={6} xs={6} className=\"footer-buttons\">\n                                    <CustomButton style={{ marginRight: 22 }}\n                                      onClick={() => {\n                                        setTimeout(() => {\n                                          if (Object.keys(errors).length > 0) setPopupProps({ message: 'There are required fields you need to fill out.', title: \"Required Fields\", hideSecondaryButton: true, primaryTest: 'Ok' })\n                                        }, 500)\n                                        handleSubmit()\n                                      }}\n                                      type=\"submit\"\n                                      variant=\"contained\"\n                                      className={`register-button ${classes.BottomButtons}`}\n                                    >\n                                      save\n                                    </CustomButton>\n                                  </Grid>\n                                </Grid>\n                                }\n                                <div className=\"col-10 \">\n                                  <div className=\"work-inner-box\">\n                                    <Grid\n                                      container\n                                      direction=\"row\"\n                                      className=\"\"\n                                      spacing={2}\n                                    >\n                                      <Grid item lg={5} xs={12}>\n                                        <div className=\"professional-grid-item\">\n                                          <CustomTextField\n\n                                            fullWidth\n                                            fieldName=\"Registration Number\"\n                                            variant=\"outlined\"\n                                            className=\"login-text-field\"\n                                            required color=\"#085044\"\n                                            name={`registrationInfoData.${index}.registration_number`}\n                                            placeholder=\"Registration Number\"\n                                            type=\"text\"\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={\n                                              item.registration_number\n                                            }\n                                            helperText={\n                                              errors &&\n                                              errors.registrationInfoData &&\n                                              errors.registrationInfoData[\n                                              index\n                                              ] &&\n                                              errors.registrationInfoData[index]\n                                                .registration_number &&\n                                              touched &&\n                                              touched.registrationInfoData &&\n                                              touched.registrationInfoData[\n                                              index\n                                              ] &&\n                                              touched.registrationInfoData[\n                                                index\n                                              ].registration_number &&\n                                              errors.registrationInfoData[index]\n                                                .registration_number\n                                            }\n                                            error={\n                                              errors &&\n                                                errors.registrationInfoData &&\n                                                errors.registrationInfoData[\n                                                index\n                                                ] &&\n                                                errors.registrationInfoData[index]\n                                                  .registration_number &&\n                                                touched &&\n                                                touched.registrationInfoData &&\n                                                touched.registrationInfoData[\n                                                index\n                                                ] &&\n                                                touched.registrationInfoData[\n                                                  index\n                                                ].registration_number\n                                                ? true\n                                                : false\n                                            }\n                                          />\n                                        </div>\n                                      </Grid>\n                                      <Grid item lg={5} xs={12}>\n                                        <CustomTextField\n                                          fullWidth\n                                          required color=\"#085044\"\n                                          fieldName=\"Registration Authority\"\n                                          className=\"login-text-field input-with-dropdown\"\n                                          name={`registrationInfoData.${index}.registration_authority`}\n                                          placeholder=\"Registration Authority\"\n                                          type=\"text\"\n                                          variant=\"outlined\"\n                                          onChange={handleChange}\n                                          onBlur={handleBlur}\n                                          value={\n                                            item.registration_authority\n                                          }\n                                          helperText={\n                                            errors &&\n                                            errors.registrationInfoData &&\n                                            errors.registrationInfoData[\n                                            index\n                                            ] &&\n                                            errors.registrationInfoData[index]\n                                              .registration_authority &&\n                                            touched &&\n                                            touched.registrationInfoData &&\n                                            touched.registrationInfoData[\n                                            index\n                                            ] &&\n                                            touched.registrationInfoData[index]\n                                              .registration_authority &&\n                                            errors.registrationInfoData[index]\n                                              .registration_authority\n                                          }\n                                          error={\n                                            errors &&\n                                              errors.registrationInfoData &&\n                                              errors.registrationInfoData[\n                                              index\n                                              ] &&\n                                              errors.registrationInfoData[index]\n                                                .registration_authority &&\n                                              touched &&\n                                              touched.registrationInfoData &&\n                                              touched.registrationInfoData[\n                                              index\n                                              ] &&\n                                              touched.registrationInfoData[index]\n                                                .registration_authority\n                                              ? true\n                                              : false\n                                          }\n                                        />\n                                      </Grid>\n                                      {/* years */}\n\n\n                                      <Grid item lg={2} xs={12}>\n                                        <Box\n                                          display=\"flex\"\n                                          alignItems=\"flex-start\"\n                                        >\n                                          <span style={{ flex: \"0.9\" }}>\n\n                                            <label\n                                              htmlFor={`registrationInfoData.${index}.year`}\n                                            >\n                                              Year{\" \"}\n                                              <span style={{ color: \"red\" }}>\n                                                *\n                                              </span>\n                                            </label>\n\n                                            <Select\n                                              labelId=\"demo-mutiple-checkbox-label\"\n                                              id=\"Year\"\n                                              name={`registrationInfoData.${index}.year`}\n                                              variant=\"outlined\"\n                                              placeholder=\"Year\"\n                                              className={` ${classes.selectEmpty\n                                                } ${errors &&\n                                                errors.registrationInfoData &&\n                                                errors.registrationInfoData[\n                                                index\n                                                ] &&\n                                                errors.registrationInfoData[\n                                                  index\n                                                ].year &&\n                                                classes.border_fix\n                                                } no-scrooll input-label no-scrooll`}\n                                              onChange={(e: any) => {\n                                                return (\n                                                  handleChange(e)\n                                                  // setCountry(e.target.value)\n                                                );\n                                              }}\n                                              error={true}\n                                              value={item.year}\n                                            >\n                                              {years.map(\n                                                (year, index) => {\n                                                  return (<MenuItem\n                                                    key={`year${index}`}\n                                                    value={year}\n                                                  >\n                                                    <ListItemText primary={year} />\n                                                  </MenuItem>)\n                                                }\n                                              )}\n                                            </Select>\n\n                                            {errors &&\n                                              errors.registrationInfoData &&\n                                              errors.registrationInfoData[\n                                              index\n                                              ] &&\n                                              errors.registrationInfoData[index]\n                                                .year &&\n                                              touched &&\n                                              touched.registrationInfoData &&\n                                              touched.registrationInfoData[\n                                              index\n                                              ] &&\n                                              touched.registrationInfoData[index]\n                                                .country && (\n                                                <div className=\"field-error\">\n                                                  {\n                                                    errors.registrationInfoData[\n                                                      index\n                                                    ].year\n                                                  }\n                                                </div>\n                                              )}\n                                          </span>\n                                          <span\n                                            style={{\n                                              flex: \"0.1\",\n                                              display: \"flex\",\n                                              justifyContent: \"flex-end\",\n                                              alignItems: \"center\",\n                                              marginTop: \"5px\"\n                                            }}\n                                          >\n\n                                            <Tooltip title=\"Remove\">\n                                              <IconButton aria-label=\"remove\">\n                                                <RemoveCircleIcon\n                                                  onClick={() => {\n                                                    handleModalClose();\n                                                    setType(\"registration\");\n                                                    setModalContent({\n                                                      ...item,\n                                                      message: \"Are you sure you want to delete this registration information section?\",\n                                                      setField: () =>\n                                                        setFieldValue(\n                                                          `registrationInfoData`,\n                                                          values.registrationInfoData.filter(\n                                                            (\n                                                              item,\n                                                              index_1\n                                                            ) => {\n                                                              return (\n                                                                index !==\n                                                                index_1\n                                                              );\n                                                            }\n                                                          )\n                                                        ),\n                                                    });\n                                                  }}\n                                                  fontSize=\"large\"\n                                                  className={\n                                                    classes.fab +\n                                                    \" add-icon pointer\"\n                                                  }\n                                                />\n                                              </IconButton>\n                                            </Tooltip>\n\n                                          </span>\n\n\n                                        </Box>\n\n\n\n                                      </Grid>\n\n                                      <Grid item lg={4} xs={12}>\n                                        <CustomTextField\n                                          variant=\"outlined\" color=\"#085044\"\n                                          fullWidth\n                                          className={classes.uploadButton}\n                                          name={`registrationInfoData.${index}.document`}\n                                          onChange={async (event) => {\n                                            if (\n                                              event.target.files &&\n                                              event.target.files[0] &&\n                                              (event.target.files[0]?.type.split(\n                                                \"/\"\n                                              )[0] == \"image\" ||\n                                                event.target.files[0]?.type ==\n                                                \"application/pdf\")\n                                            ) {\n                                              let size: number =\n                                                event.target.files[0].size;\n                                              if (size / 1024 <= 10240) {\n                                                setFieldValue(\n                                                  `registrationInfoData.${index}.document`,\n                                                  [event.target.files[0]]\n                                                );\n                                              } else {\n                                                setPopupProps({ title: 'File size', hideSecondaryButton: true, primaryText: 'Ok', message: 'File must be smaller than 10MB.' })\n                                              }\n                                            } else {\n                                              setPopupProps({ title: 'Valid file', hideSecondaryButton: true, primaryText: 'Ok', message: 'Please upload a valid file/image.' })\n                                              // Toast.error(\n                                              //   \"Please upload a valid  file/image\"\n                                              // );\n                                            }\n                                          }}\n                                          placeholder=\"Upload File Images/pdf\"\n                                          value={\n                                            item?.document?.name ||\n                                            item.document\n                                          }\n                                          InputProps={{\n                                            endAdornment: (\n                                              <>\n                                                <input\n                                                  id={`registrationInfoData.${index}.document`}\n                                                  hidden\n                                                  name={`registrationInfoData.${index}.document`}\n                                                  type=\"file\"\n                                                  accept=\"image/*,.pdf\"\n                                                  multiple\n                                                  onChange={async (event) => {\n                                                    if (\n                                                      event.target.files &&\n                                                      event.target.files[0] &&\n                                                      (event.target.files[0]?.type.split(\n                                                        \"/\"\n                                                      )[0] == \"image\" ||\n                                                        event.target.files[0]\n                                                          ?.type ==\n                                                        \"application/pdf\")\n                                                    ) {\n                                                      let size: number =\n                                                        event.target.files[0]\n                                                          .size;\n                                                      if (\n                                                        size / 1024 <=\n                                                        10240\n                                                      ) {\n                                                        setFieldValue(\n                                                          `registrationInfoData.${index}.document`,\n                                                          [\n                                                            event.target\n                                                              .files[0],\n                                                          ]\n                                                        );\n                                                      } else {\n                                                        setPopupProps({ title: 'Error', message: \"File must be smaller than 10mb.\", primaryText: 'Ok', hideSecondaryButton: true })\n                                                        // Toast.error(\n                                                        //   \"File must be smaller than 10mb.\"\n                                                        // );\n                                                      }\n                                                    } else {\n                                                      setPopupProps({ title: 'Error', message: \"Please upload a valid  file/image\", primaryText: 'Ok', hideSecondaryButton: true })\n                                                      // Toast.error(\n                                                      //   \"Please upload a valid  file/image\"\n                                                      // );\n                                                    }\n                                                  }}\n                                                />\n\n                                                <label\n                                                  htmlFor={`registrationInfoData.${index}.document`}\n                                                >\n                                                  <CustomButton\n                                                    component=\"span\"\n                                                    className=\"upload-button\"\n                                                  >\n                                                    upload\n                                                  </CustomButton>\n                                                </label>\n                                              </>\n                                            ),\n                                          }}\n                                        />\n                                      </Grid>\n                                      <Grid\n                                        item\n                                        xs={12}\n                                        className=\"no_progress_bar\"\n                                        style={{\n                                          overflowX: \"hidden\",\n                                          overflowY: \"hidden\",\n                                          width: \"100%\",\n                                          display: \"felx\",\n                                        }}\n                                      >\n                                        {item?.document &&\n                                          item?.document !== \"\" &&\n                                          item.document.map(\n                                            (item_item, index_2) => {\n                                              return (\n                                                item_item !== null && (\n                                                  <span\n                                                    style={{\n                                                      position: \"relative\",\n                                                      display: \"inline-block\",\n                                                    }}\n                                                  >\n                                                    {item_item !== null &&\n                                                      (item_item?.type !==\n                                                        \"application/pdf\" ||\n                                                        item_item?.type ==\n                                                        undefined ? (\n                                                        <>\n                                                          {item_item.slice(\n                                                            -3\n                                                          ) !== \"pdf\" ? (\n                                                            <a\n                                                              target=\"_blank\"\n                                                              href={\n                                                                typeof item_item ==\n                                                                  \"string\"\n                                                                  ? item_item\n                                                                  : item_item !==\n                                                                    null\n                                                                    ? URL.createObjectURL(\n                                                                      item_item\n                                                                    )\n                                                                    : \"\"\n                                                              }\n                                                            >\n                                                              <img\n                                                                style={{\n                                                                  wordBreak:\n                                                                    \"break-all\",\n                                                                  padding:\n                                                                    \"10px\",\n                                                                  maxWidth:\n                                                                    \"270px\",\n                                                                  width:\n                                                                    \"270px\",\n                                                                  height:\n                                                                    \"170px\",\n                                                                  objectFit: 'contain', borderWidth: 1, borderColor: '#ddd', borderStyle: 'solid', borderRadius: 5\n                                                                }}\n                                                                src={\n                                                                  typeof item_item ==\n                                                                    \"string\"\n                                                                    ? item_item\n                                                                    : item_item !==\n                                                                      null\n                                                                      ? URL.createObjectURL(\n                                                                        item_item\n                                                                      )\n                                                                      : \"\"\n                                                                }\n                                                                height=\"150px\"\n                                                                alt={\n                                                                  typeof item_item ==\n                                                                    \"string\"\n                                                                    ? item_item\n                                                                    : item_item !==\n                                                                      null\n                                                                      ? URL.createObjectURL(\n                                                                        item_item\n                                                                      )\n                                                                      : \"\"\n                                                                }\n                                                              />\n                                                            </a>\n                                                          ) : (\n                                                            <a\n                                                              target=\"_blank\"\n                                                              href={item_item}\n                                                            >\n                                                              <img\n                                                                style={{\n                                                                  wordBreak:\n                                                                    \"break-all\",\n                                                                  padding:\n                                                                    \"10px\",\n                                                                  maxWidth:\n                                                                    \"270px\",\n                                                                  width:\n                                                                    \"270px\",\n                                                                  height:\n                                                                    \"170px\",\n                                                                  objectFit: 'contain', borderWidth: 1, borderColor: '#ddd', borderStyle: 'solid', borderRadius: 5\n                                                                }}\n                                                                src={\n                                                                  require(\"../../../../../utils/images/logoPDF.png\")\n                                                                    .default\n                                                                }\n                                                                height=\"150px\"\n                                                                alt={item_item}\n                                                              />\n                                                            </a>\n                                                          )}\n                                                        </>\n                                                      ) : (\n                                                        <a\n                                                          target=\"_blank\"\n                                                          href={URL.createObjectURL(\n                                                            item_item\n                                                          )}\n                                                        >\n                                                          <img\n                                                            style={{\n                                                              wordBreak:\n                                                                \"break-all\",\n                                                              padding: \"10px\",\n                                                              maxWidth: \"270px\",\n                                                              width: \"270px\",\n                                                              height: \"170px\",\n                                                              objectFit: 'contain', borderWidth: 1, borderColor: '#ddd', borderStyle: 'solid', borderRadius: 5\n                                                            }}\n                                                            src={\n                                                              require(\"../../../../../utils/images/logoPDF.png\")\n                                                                .default\n                                                            }\n                                                            height=\"150px\"\n                                                            alt={URL.createObjectURL(\n                                                              item_item\n                                                            )}\n                                                          />\n                                                        </a>\n                                                      ))}\n                                                    <Tooltip\n                                                      title=\"Remove Image\"\n                                                      className=\"remove_icon pointer\"\n                                                    >\n                                                      <RemoveCircleIcon\n                                                        onClick={() => {\n                                                          handleModalClose();\n                                                          setType(\n                                                            \"registration\"\n                                                          );\n                                                          setModalContent({\n                                                            ...item_item,\n                                                            setField: () =>\n                                                              setFieldValue(\n                                                                `registrationInfoData[${index}].document`,\n                                                                item.document.filter(\n                                                                  (\n                                                                    item,\n                                                                    index_1\n                                                                  ) => {\n                                                                    return (\n                                                                      index_2 !==\n                                                                      index_1\n                                                                    );\n                                                                  }\n                                                                )\n                                                              ),\n                                                          });\n                                                        }}\n                                                      />\n                                                      {/* </IconButton> */}\n                                                    </Tooltip>\n                                                  </span>\n                                                )\n                                              );\n                                            }\n                                          )}\n                                        {/* ) : (\n                                      <img src={item.document} alt=\"\" />\n                                    )} */}\n                                      </Grid>\n                                    </Grid>\n                                  </div>\n                                </div>\n                              </div>\n                            )\n                          )}\n                      </div>\n                    )}\n                  />\n                </Grid>\n\n\n                <Grid item xs={12}>\n                  <FieldArray\n                    name=\"educationInfoData\"\n                    render={({ insert, remove, push }) => (\n                      <div className={\"mb-1\"}>\n                        {values.educationInfoData !== null &&\n                          values.educationInfoData.length > 0 &&\n                          values.educationInfoData.map(\n                            (item: any, index: any) => (\n                              <div\n                                className=\"row mb-3 d-flex align-items-center\"\n                                key={index}\n                              >\n                                <div className=\"col-10\">\n                                  {index == 0 && <Grid style={{ flexDirection: 'row', alignItems: 'center', display: \"flex\", justifyContent: 'space-between' }} item xs={12}>\n                                    <Typography className=\"office-address-title\">\n                                      Education\n                                    </Typography>\n                                    <Tooltip title=\"Add More\">\n                                      <IconButton aria-label=\"add-more\">\n                                        <AddCircleIcon\n                                          onClick={() =>\n                                            insert(0, {\n                                              qualification: \"\",\n                                              college_university: \"\",\n                                              year: \"\",\n                                              document: \"\",\n                                            })\n                                          }\n                                          fontSize=\"large\"\n                                          className={\n                                            classes.fab +\n                                            \" add-icon pointer\"\n                                          }\n                                        />\n                                      </IconButton>\n                                    </Tooltip>\n                                  </Grid>}\n                                  <div style={{ display: 'flex', alignItems: 'flex-start' }} >\n\n                                    <div style={{ flex: 1 }} className=\"work-inner-box\">\n                                      <Grid container spacing={2}>\n\n                                        <Grid item lg={5} xs={12}>\n                                          <CustomTextField\n                                            fieldName=\"Qualification\"\n                                            required\n                                            fullWidth color=\"#085044\"\n                                            variant=\"outlined\"\n                                            className={`login-text-field ${classes.uploadButton_1}`}\n                                            name={`educationInfoData.${index}.qualification`}\n                                            placeholder=\"Qualification\"\n                                            type=\"text\"\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={item.qualification}\n                                            helperText={\n                                              errors &&\n                                              errors.educationInfoData &&\n                                              errors.educationInfoData[index] &&\n                                              errors.educationInfoData[index]\n                                                .qualification &&\n                                              touched &&\n                                              touched.educationInfoData &&\n                                              touched.educationInfoData[index] &&\n                                              touched.educationInfoData[index]\n                                                .qualification &&\n                                              errors.educationInfoData[index]\n                                                .qualification\n                                            }\n                                            error={\n                                              errors &&\n                                                errors.educationInfoData &&\n                                                errors.educationInfoData[index] &&\n                                                errors.educationInfoData[index]\n                                                  .qualification &&\n                                                touched &&\n                                                touched.educationInfoData &&\n                                                touched.educationInfoData[index] &&\n                                                touched.educationInfoData[index]\n                                                  .qualification\n                                                ? true\n                                                : false\n                                            }\n                                          />\n                                        </Grid>\n                                        <Grid item lg={5} xs={12}>\n                                          <CustomTextField\n                                            fieldName=\"College/University\"\n                                            required color=\"#085044\"\n                                            fullWidth\n                                            variant=\"outlined\"\n                                            className={`login-text-field ${classes.uploadButton_1}`}\n                                            name={`educationInfoData.${index}.college_university`}\n                                            placeholder=\"College/University\"\n                                            type=\"text\"\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={item.college_university}\n                                            helperText={\n                                              errors &&\n                                              errors.educationInfoData &&\n                                              errors.educationInfoData[index] &&\n                                              errors.educationInfoData[index]\n                                                .college_university &&\n                                              touched &&\n                                              touched.educationInfoData &&\n                                              touched.educationInfoData[index] &&\n                                              touched.educationInfoData[index]\n                                                .college_university &&\n                                              errors.educationInfoData[index]\n                                                .college_university\n                                            }\n                                            error={\n                                              errors &&\n                                                errors.educationInfoData &&\n                                                errors.educationInfoData[index] &&\n                                                errors.educationInfoData[index]\n                                                  .college_university &&\n                                                touched &&\n                                                touched.educationInfoData &&\n                                                touched.educationInfoData[index] &&\n                                                touched.educationInfoData[index]\n                                                  .college_university\n                                                ? true\n                                                : false\n                                            }\n                                          />\n                                        </Grid>\n                                        <Grid item lg={2} xs={12}>\n                                          <Box\n                                            display=\"flex\"\n                                            alignItems=\"flex-start\"\n                                          >\n                                            <span style={{ flex: \"0.9\" }}>\n\n                                              <label\n                                                htmlFor={`educationInfoData.${index}.year`}\n                                              >\n                                                Year{\" \"}\n                                                <span style={{ color: \"red\" }}>\n                                                  *\n                                                </span>\n                                              </label>\n\n                                              <Select\n                                                labelId=\"demo-mutiple-checkbox-label\"\n                                                id=\"Year\"\n                                                name={`educationInfoData.${index}.year`}\n                                                variant=\"outlined\"\n                                                placeholder=\"Year\"\n                                                className={` ${classes.selectEmpty\n                                                  } ${errors &&\n                                                  errors.educationInfoData &&\n                                                  errors.educationInfoData[\n                                                  index\n                                                  ] &&\n                                                  errors.educationInfoData[\n                                                    index\n                                                  ].year &&\n                                                  classes.border_fix\n                                                  } no-scrooll input-label no-scrooll`}\n                                                onChange={(e: any) => {\n                                                  return (\n                                                    handleChange(e)\n                                                  );\n                                                }}\n                                                error={true}\n                                                value={item.year}\n                                              >\n                                                {years.map(\n                                                  (year, index) => {\n                                                    return (<MenuItem\n                                                      key={`year${index}`}\n                                                      value={year}\n                                                    >\n                                                      <ListItemText primary={year} />\n                                                    </MenuItem>)\n                                                  }\n                                                )}\n                                              </Select>\n\n                                              {errors &&\n                                                errors.educationInfoData &&\n                                                errors.educationInfoData[\n                                                index\n                                                ] &&\n                                                errors.educationInfoData[index]\n                                                  .year &&\n                                                touched &&\n                                                touched.educationInfoData &&\n                                                touched.educationInfoData[\n                                                index\n                                                ] &&\n                                                touched.educationInfoData[index]\n                                                  .country && (\n                                                  <div className=\"field-error\">\n                                                    {\n                                                      errors.educationInfoData[\n                                                        index\n                                                      ].year\n                                                    }\n                                                  </div>\n                                                )}\n                                            </span>\n                                            <span\n                                            style={{flex: \"0.1\",display: \"flex\",justifyContent: \"flex-end\",alignItems: \"center\",\n                                              marginTop: \"5px\"\n                                            }}\n                                          >\n\n\n                                        <Tooltip title=\"Remove\">\n                                          <IconButton aria-label=\"remove\">\n                                            <RemoveCircleIcon\n                                              onClick={() => {\n                                                handleModalClose();\n                                                setType(\"education\");\n                                                setModalContent({\n                                                  ...item,\n                                                  message: \"Are you sure you want to delete this education section ?\",\n                                                  setField: () =>\n                                                    setFieldValue(\n                                                      `educationInfoData`,\n                                                      values.educationInfoData.filter(\n                                                        (\n                                                          item,\n                                                          index_1\n                                                        ) => {\n                                                          return (\n                                                            index !==\n                                                            index_1\n                                                          );\n                                                        }\n                                                      )\n                                                    ),\n                                                });\n                                              }}\n                                              fontSize=\"large\"\n                                              className={\n                                                classes.fab +\n                                                \" add-icon pointer\"\n                                              }\n                                            />\n                                          </IconButton>\n                                        </Tooltip>\n\n\n                                            </span>\n                                          </Box>\n\n\n\n                                        </Grid>\n\n\n\n                                        <Grid item lg={4} xs={12}>\n                                          <CustomTextField\n                                            color=\"#085044\"\n                                            fullWidth\n                                            className={classes.uploadButton}\n                                            variant=\"outlined\"\n                                            name={`educationInfoData.${index}.document`}\n                                            placeholder=\"Upload File Image/pdf\"\n                                            value={\n                                              item.document?.name || item.document\n                                            }\n                                            InputProps={{\n                                              endAdornment: (\n                                                <>\n                                                  <input\n                                                    placeholder=\"Upload File\"\n                                                    id={`educationInfoData.${index}.document`}\n                                                    hidden\n                                                    name={`educationInfoData.${index}.document`}\n                                                    type=\"file\"\n                                                    accept=\"image/*,.pdf\"\n                                                    ref={`educationInfoData.${index}.document`}\n                                                    multiple\n                                                    onChange={(event) => {\n                                                      if (\n                                                        (event.target.files &&\n                                                          event.target.files[0] &&\n                                                          event.target.files[0]?.type.split(\n                                                            \"/\"\n                                                          )[0] == \"image\") ||\n                                                        event.target.files[0]\n                                                          ?.type ==\n                                                        \"application/pdf\"\n                                                      ) {\n                                                        let size: number =\n                                                          event.target.files[0]\n                                                            .size;\n                                                        if (\n                                                          size / 1024 <=\n                                                          10240\n                                                        ) {\n                                                          setFieldValue(\n                                                            `educationInfoData.${index}.document`,\n                                                            [\n                                                              event.target\n                                                                .files[0],\n                                                            ]\n                                                          );\n                                                        } else {\n                                                          setPopupProps({ title: 'Error', message: \"File must be smaller than 10mb.\", primaryText: 'Ok', hideSecondaryButton: true })\n                                                          // Toast.error(\n                                                          //   \"File must be smaller than 10mb.\"\n                                                          // );\n                                                        }\n                                                      } else {\n                                                        setPopupProps({ title: 'Error', message: \"Please upload a valid  file/image\", primaryText: 'Ok', hideSecondaryButton: true })\n                                                        // Toast.error(\n                                                        //   \"Please upload a valid  file/image\"\n                                                        // );\n                                                      }\n                                                    }}\n                                                  />\n\n                                                  <label\n                                                    htmlFor={`educationInfoData.${index}.document`}\n                                                  >\n                                                    <CustomButton\n                                                      component=\"span\"\n                                                      className=\"upload-button\"\n                                                    >\n                                                      upload\n                                                    </CustomButton>\n                                                  </label>\n                                                </>\n                                              ),\n                                            }}\n                                          />\n                                        </Grid>\n                                        <Grid\n                                          item\n                                          xs={12}\n                                          className=\"no_progress_bar\"\n                                          style={{\n                                            overflowX: \"hidden\",\n                                            overflowY: \"hidden\",\n                                            width: \"100%\",\n                                            display: \"felx\",\n                                          }}\n                                        >\n                                          {item?.document &&\n                                            item?.document !== \"\" &&\n                                            item.document.map(\n                                              (item_item, index_2) => {\n                                                return (\n                                                  item_item !== null && (\n                                                    <span\n                                                      style={{\n                                                        position: \"relative\",\n                                                        display: \"inline-block\",\n                                                      }}\n                                                    >\n                                                      {item_item !== null &&\n                                                        (item_item?.type !==\n                                                          \"application/pdf\" ||\n                                                          item_item?.type ==\n                                                          undefined ? (\n                                                          <>\n                                                            {item_item?.slice(\n                                                              -3\n                                                            ) !== \"pdf\" ? (\n                                                              <a\n                                                                target=\"_blank\"\n                                                                href={\n                                                                  typeof item_item ==\n                                                                    \"string\"\n                                                                    ? item_item\n                                                                    : item_item !==\n                                                                      null\n                                                                      ? URL.createObjectURL(\n                                                                        item_item\n                                                                      )\n                                                                      : \"\"\n                                                                }\n                                                              >\n                                                                <img\n                                                                  style={{\n                                                                    wordBreak:\n                                                                      \"break-all\",\n                                                                    padding:\n                                                                      \"10px\",\n                                                                    maxWidth:\n                                                                      \"270px\",\n                                                                    width:\n                                                                      \"270px\",\n                                                                    height:\n                                                                      \"170px\",\n                                                                    objectFit: 'contain', borderWidth: 1, borderColor: '#ddd', borderStyle: 'solid', borderRadius: 5\n                                                                  }}\n                                                                  src={\n                                                                    typeof item_item ==\n                                                                      \"string\"\n                                                                      ? item_item\n                                                                      : item_item !==\n                                                                        null\n                                                                        ? URL.createObjectURL(\n                                                                          item_item\n                                                                        )\n                                                                        : \"\"\n                                                                  }\n                                                                  height=\"150px\"\n                                                                  alt={\n                                                                    typeof item_item ==\n                                                                      \"string\"\n                                                                      ? item_item\n                                                                      : item_item !==\n                                                                        null\n                                                                        ? URL.createObjectURL(\n                                                                          item_item\n                                                                        )\n                                                                        : \"\"\n                                                                  }\n                                                                />\n                                                              </a>\n                                                            ) : (\n                                                              <a\n                                                                target=\"_blank\"\n                                                                href={item_item}\n                                                              >\n                                                                <img\n                                                                  style={{\n                                                                    wordBreak:\n                                                                      \"break-all\",\n                                                                    padding:\n                                                                      \"10px\",\n                                                                    maxWidth:\n                                                                      \"270px\",\n                                                                    width:\n                                                                      \"270px\",\n                                                                    height:\n                                                                      \"170px\",\n                                                                    objectFit: 'contain', borderWidth: 1, borderColor: '#ddd', borderStyle: 'solid', borderRadius: 5\n                                                                  }}\n                                                                  src={\n                                                                    require(\"../../../../../utils/images/logoPDF.png\")\n                                                                      .default\n                                                                  }\n                                                                  height=\"150px\"\n                                                                  alt={item_item}\n                                                                />\n                                                              </a>\n                                                            )}\n                                                          </>\n                                                        ) : (\n                                                          <a\n                                                            target=\"_blank\"\n                                                            href={URL.createObjectURL(\n                                                              item_item\n                                                            )}\n                                                          >\n                                                            <img\n                                                              style={{\n                                                                wordBreak:\n                                                                  \"break-all\",\n                                                                padding: \"10px\",\n                                                                maxWidth: \"270px\",\n                                                                width: \"270px\",\n                                                                height: \"170px\",\n                                                                objectFit: 'contain', borderWidth: 1, borderColor: '#ddd', borderStyle: 'solid', borderRadius: 5\n                                                              }}\n                                                              src={\n                                                                require(\"../../../../../utils/images/logoPDF.png\")\n                                                                  .default\n                                                              }\n                                                              height=\"150px\"\n                                                              alt={URL.createObjectURL(\n                                                                item_item\n                                                              )}\n                                                            />\n                                                          </a>\n                                                        ))}\n                                                      <Tooltip title=\"Remove Image\" className=\"remove_icon pointer\">\n                                                        <RemoveCircleIcon onClick={() => {\n                                                          handleModalClose();\n                                                          setType(\n                                                            \"education document\"\n                                                          );\n                                                          setModalContent({\n                                                            ...item_item,\n                                                            setField: () =>\n                                                              setFieldValue(\n                                                                `educationInfoData[${index}].document`,\n                                                                item.document.filter(\n                                                                  (\n                                                                    item,\n                                                                    index_1\n                                                                  ) => {\n                                                                    return (\n                                                                      index_2 !==\n                                                                      index_1\n                                                                    );\n                                                                  }\n                                                                )\n                                                              ),\n                                                          });\n                                                        }}\n                                                        />\n                                                      </Tooltip>\n                                                    </span>\n                                                  )\n                                                );\n                                              }\n                                            )}\n                                         \n                                        </Grid>\n                                      </Grid>\n                                    </div>\n                                   \n                                  </div>\n                                </div>\n                              </div>\n                            )\n                          )}\n                      </div>\n                    )}\n                  />\n                </Grid>\n\n\n                <Grid style={{ overflow: 'hidden' }} item xs={12}>\n                  <Box\n                    display=\"flex\"\n                    alignItems=\"center\"\n                    justifyContent=\"space-around\"\n                  >\n                    <FieldArray\n                      name=\"workExperinceInfoData\"\n                      render={({ insert, remove, push }) => (\n                        <div className={\"mb-1\"}>\n                          {values.workExperinceInfoData !== null &&\n                            values.workExperinceInfoData.length > 0 &&\n                            values.workExperinceInfoData.map(\n                              (item: any, index: any) => (\n\n                                <div>\n                                  {index == 0 && (\n                                    <Grid style={{ overflow: 'hidden', display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }} item xs={12}>\n                                      <Typography className=\"office-address-title\">\n                                        Work Experience\n                                      </Typography>\n\n                                      <Tooltip title=\"Add More\">\n                                        <IconButton aria-label=\"add-more\">\n                                          <AddCircleIcon\n                                            onClick={() =>\n                                              insert(0, {\n                                                role: \"\",\n                                                clinic_name: \"\",\n                                                address_line1: \"\",\n                                                address_line2: \"\",\n                                                city: \"\",\n                                                state: \"\",\n                                                country: \"\",\n                                                zipcode: \"\",\n                                                duration: \"\",\n                                                reference: \"\",\n                                                linkedin_profile: \"\",\n                                                reference_email: \"\",\n                                                reference_phone: \"\",\n                                                current_organization: 0,\n                                              })\n                                            }\n                                            fontSize=\"large\"\n                                            className={\n                                              classes.fab + \" add-icon pointer\"\n                                            }\n                                          />\n                                        </IconButton>\n                                      </Tooltip>\n\n                                    </Grid>\n                                  )}\n\n                                  <div\n                                    style={{\n                                      display: \"flex\",\n                                      alignItems: \"center\",\n                                      justifyContent: \"center\",\n                                    }}\n                                    className={`row mb-3 d-flex work-experince-box align-items-center ${index != 0 && \"mt-3\"\n                                      }`}\n                                    key={index}\n                                  >\n\n                                    <div className=\"work-inner-box\">\n                                      <div className=\"\">\n                                        <Grid\n                                          container\n                                          direction=\"row\"\n                                          className=\"professional-info-container\"\n                                          spacing={2}\n                                        >\n                                          <Grid item lg={3} xs={12}>\n                                            <CustomTextField\n                                              fieldName=\"Your Role\"\n                                              variant=\"outlined\"\n                                              color=\"#085044\"\n                                              fullWidth\n                                              required\n                                              className={`login-text-field ${classes.uploadButton_1}`}\n                                              name={`workExperinceInfoData.${index}.role`}\n                                              placeholder=\"Your Role\"\n                                              type=\"text\"\n                                              onChange={handleChange}\n                                              onBlur={handleBlur}\n                                              value={item.role}\n                                              helperText={\n                                                errors &&\n                                                errors.workExperinceInfoData &&\n                                                errors.workExperinceInfoData[\n                                                index\n                                                ] &&\n                                                errors.workExperinceInfoData[\n                                                  index\n                                                ].role &&\n                                                touched &&\n                                                touched.workExperinceInfoData &&\n                                                touched.workExperinceInfoData[\n                                                index\n                                                ] &&\n                                                touched.workExperinceInfoData[\n                                                  index\n                                                ].role &&\n                                                errors.workExperinceInfoData[\n                                                  index\n                                                ].role\n                                              }\n                                              error={\n                                                errors &&\n                                                  errors.workExperinceInfoData &&\n                                                  errors.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  errors.workExperinceInfoData[\n                                                    index\n                                                  ].role &&\n                                                  touched &&\n                                                  touched.workExperinceInfoData &&\n                                                  touched.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  touched.workExperinceInfoData[\n                                                    index\n                                                  ].role\n                                                  ? true\n                                                  : false\n                                              }\n                                            />\n                                          </Grid>\n                                          <Grid item lg={3} xs={12}>\n                                            <CustomTextField\n                                              color=\"#085044\"\n                                              fieldName=\"Ward\"\n                                              variant=\"outlined\"\n                                              fullWidth\n                                              className={`login-text-field ${classes.uploadButton_1}`}\n                                              name={`workExperinceInfoData.${index}.ward`}\n                                              placeholder=\"Ward\"\n                                              type=\"text\"\n                                              onChange={handleChange}\n                                              onBlur={handleBlur}\n                                              value={item.ward}\n                                              helperText={\n                                                errors &&\n                                                errors.workExperinceInfoData &&\n                                                errors.workExperinceInfoData[\n                                                index\n                                                ] &&\n                                                errors.workExperinceInfoData[\n                                                  index\n                                                ].Ward &&\n                                                touched &&\n                                                touched.workExperinceInfoData &&\n                                                touched.workExperinceInfoData[\n                                                index\n                                                ] &&\n                                                touched.workExperinceInfoData[\n                                                  index\n                                                ].Ward &&\n                                                errors.workExperinceInfoData[\n                                                  index\n                                                ].Ward\n                                              }\n                                              error={\n                                                errors &&\n                                                  errors.workExperinceInfoData &&\n                                                  errors.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  errors.workExperinceInfoData[\n                                                    index\n                                                  ].Ward &&\n                                                  touched &&\n                                                  touched.workExperinceInfoData &&\n                                                  touched.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  touched.workExperinceInfoData[\n                                                    index\n                                                  ].Ward\n                                                  ? true\n                                                  : false\n                                              }\n                                            />\n                                          </Grid>\n\n                                          <Grid item lg={3} xs={12}>\n                                            <CustomTextField\n                                              color=\"#085044\"\n                                              fieldName=\"Hospital/Clinic Name\"\n                                              variant=\"outlined\"\n                                              fullWidth\n                                              required\n                                              className={`login-text-field ${classes.uploadButton_1}`}\n                                              name={`workExperinceInfoData.${index}.clinic_name`}\n                                              placeholder=\"Clinic Name\"\n                                              type=\"text\"\n                                              onChange={handleChange}\n                                              onBlur={handleBlur}\n                                              value={item?.clinic_name}\n                                              helperText={\n                                                errors &&\n                                                errors.workExperinceInfoData &&\n                                                errors.workExperinceInfoData[\n                                                index\n                                                ] &&\n                                                errors.workExperinceInfoData[\n                                                  index\n                                                ].clinic_name &&\n                                                touched &&\n                                                touched.workExperinceInfoData &&\n                                                touched.workExperinceInfoData[\n                                                index\n                                                ] &&\n                                                touched.workExperinceInfoData[\n                                                  index\n                                                ].clinic_name &&\n                                                errors.workExperinceInfoData[\n                                                  index\n                                                ].clinic_name\n                                              }\n                                              error={\n                                                errors &&\n                                                  errors.workExperinceInfoData &&\n                                                  errors.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  errors.workExperinceInfoData[\n                                                    index\n                                                  ].clinic_name &&\n                                                  touched &&\n                                                  touched.workExperinceInfoData &&\n                                                  touched.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  touched.workExperinceInfoData[\n                                                    index\n                                                  ].clinic_name\n                                                  ? true\n                                                  : false\n                                              }\n                                            />\n                                            {/* </div> */}\n                                          </Grid>\n\n                                          <Grid item lg={12} xs={12}>\n                                            <div className=\"professional-grid-item\">\n                                              {/* <label\n                                                  htmlFor={`workExperinceInfoData.${index}.address_line1`}\n                                                >\n                                                  Address Line 1\n                                                </label> */}\n                                              <CustomTextField\n                                                color=\"#085044\"\n                                                fieldName=\"Address Line 1\"\n                                                fullWidth\n                                                required\n                                                variant=\"outlined\"\n                                                className={`login-text-field ${classes.uploadButton_1}`}\n                                                name={`workExperinceInfoData.${index}.address_line1`}\n                                                placeholder=\"Address Line 1\"\n                                                type=\"text\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={item.address_line1}\n                                                helperText={\n                                                  errors &&\n                                                  errors.workExperinceInfoData &&\n                                                  errors.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  errors.workExperinceInfoData[\n                                                    index\n                                                  ].address_line1 &&\n                                                  touched &&\n                                                  touched.workExperinceInfoData &&\n                                                  touched.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  touched.workExperinceInfoData[\n                                                    index\n                                                  ].address_line1 /* \n                                                  <div className=\"field-error\">\n                                                    { */ &&\n                                                  errors.workExperinceInfoData[\n                                                    index\n                                                  ].address_line1\n                                                  /*  }\n                                                    </div> */\n                                                }\n                                                error={\n                                                  errors &&\n                                                    errors.workExperinceInfoData &&\n                                                    errors.workExperinceInfoData[\n                                                    index\n                                                    ] &&\n                                                    errors.workExperinceInfoData[\n                                                      index\n                                                    ].address_line1 &&\n                                                    touched &&\n                                                    touched.workExperinceInfoData &&\n                                                    touched.workExperinceInfoData[\n                                                    index\n                                                    ] &&\n                                                    touched.workExperinceInfoData[\n                                                      index\n                                                    ].address_line1\n                                                    ? true\n                                                    : false\n                                                }\n                                              />\n                                            </div>\n                                          </Grid>\n\n                                          <Grid item lg={3} xs={12}>\n                                            <label\n                                              htmlFor={`workExperinceInfoData.${index}.country`}\n                                            >\n                                              Country{\" \"}\n                                              <span style={{ color: \"red\" }}>\n                                                *\n                                              </span>\n                                            </label>\n                                            <Select\n                                              style={{ color: \"#085044\" }}\n                                              labelId=\"demo-mutiple-checkbox-label\"\n                                              id=\"country\"\n                                              name={`workExperinceInfoData.${index}.country`}\n                                              variant=\"outlined\"\n                                              className={` ${classes.selectEmpty\n                                                } ${errors &&\n                                                errors.workExperinceInfoData &&\n                                                errors.workExperinceInfoData[\n                                                index\n                                                ] &&\n                                                errors.workExperinceInfoData[\n                                                  index\n                                                ].country &&\n                                                classes.border_fix\n                                                } no-scrooll input-label no-scrooll`}\n                                              onChange={(e: any) => {\n                                                return (\n                                                  handleChange(e),\n                                                  setCountry(e.target.value),\n                                                  setFieldValue(\n                                                    `workExperinceInfoData.${index}.state`,\n                                                    \"\"\n                                                  ),\n                                                  setFieldValue(\n                                                    `workExperinceInfoData.${index}.city`,\n                                                    \"\"\n                                                  )\n                                                );\n                                              }}\n                                              error={true}\n                                              value={item.country}\n                                            >\n                                              {Country.getAllCountries().map(\n                                                (item) => (\n                                                  <MenuItem\n                                                    key={item[\"countryCode\"]}\n                                                    value={item.name}\n                                                  >\n                                                    <ListItemText\n                                                      primary={item.name}\n                                                    />\n                                                  </MenuItem>\n                                                )\n                                              )}\n                                            </Select>\n\n                                            {errors &&\n                                              errors.workExperinceInfoData &&\n                                              errors.workExperinceInfoData[\n                                              index\n                                              ] &&\n                                              errors.workExperinceInfoData[index]\n                                                .country &&\n                                              touched &&\n                                              touched.workExperinceInfoData &&\n                                              touched.workExperinceInfoData[\n                                              index\n                                              ] &&\n                                              touched.workExperinceInfoData[index]\n                                                .country && (\n                                                <div className=\"field-error\">\n                                                  {\n                                                    errors.workExperinceInfoData[\n                                                      index\n                                                    ].country\n                                                  }\n                                                </div>\n                                              )}\n                                          </Grid>\n\n                                          <Grid item lg={3} xs={12}>\n                                            <label\n                                              htmlFor={`workExperinceInfoData.${index}.state`}\n                                            >\n                                              State{\" \"}\n                                              <span style={{ color: \"red\" }}>\n                                                *\n                                              </span>\n                                            </label>\n\n                                            <Select\n                                              style={{ color: \"#085044\" }}\n                                              labelId=\"demo-mutiple-checkbox-label\"\n                                              id=\"state\"\n                                              name={`workExperinceInfoData.${index}.state`}\n                                              variant=\"outlined\"\n                                              className={` ${classes.selectEmpty\n                                                }  ${errors &&\n                                                errors.workExperinceInfoData &&\n                                                errors.workExperinceInfoData[\n                                                index\n                                                ] &&\n                                                errors.workExperinceInfoData[\n                                                  index\n                                                ].state &&\n                                                classes.border_fix\n                                                } no-scrooll input-label `}\n                                              onChange={(e) => {\n                                                handleChange(e);\n\n                                                setState(\n                                                  e.target.value.toString()\n                                                );\n\n                                                setFieldValue(\n                                                  `workExperinceInfoData.${index}.city`,\n                                                  \"\"\n                                                );\n                                              }}\n                                              value={item.state}\n                                            >\n                                              {State.getStatesOfCountry(\n                                                Country.getAllCountries().filter(\n                                                  (items) => {\n                                                    return (\n                                                      items.name == item?.country\n                                                    );\n                                                  }\n                                                )[0]?.isoCode\n                                              )?.map((item) => {\n                                                return (\n                                                  <MenuItem\n                                                    key={item.name}\n                                                    value={item.name}\n                                                  >\n                                                    <ListItemText\n                                                      primary={item.name}\n                                                    />\n                                                  </MenuItem>\n                                                );\n                                              })}\n                                            </Select>\n\n                                            {errors &&\n                                              errors.workExperinceInfoData &&\n                                              errors.workExperinceInfoData[\n                                              index\n                                              ] &&\n                                              errors.workExperinceInfoData[index]\n                                                .state &&\n                                              touched &&\n                                              touched.workExperinceInfoData &&\n                                              touched.workExperinceInfoData[\n                                              index\n                                              ] &&\n                                              touched.workExperinceInfoData[index]\n                                                .state && (\n                                                <div className=\"field-error\">\n                                                  {\n                                                    errors.workExperinceInfoData[\n                                                      index\n                                                    ].state\n                                                  }\n                                                </div>\n                                              )}\n                                          </Grid>\n\n                                          <Grid item lg={3} xs={12}>\n                                            <label\n                                              htmlFor={`workExperinceInfoData.${index}.city`}\n                                            >\n                                              City\n                                              <span style={{ color: \"red\" }}>\n                                                *\n                                              </span>\n                                            </label>\n\n                                            <Select\n                                              style={{ color: \"#085044\" }}\n                                              labelId=\"demo-mutiple-checkbox-label\"\n                                              id=\"city\"\n                                              name={`workExperinceInfoData.${index}.city`}\n                                              variant=\"outlined\"\n                                              className={` ${classes.selectEmpty\n                                                }  ${errors &&\n                                                errors.workExperinceInfoData &&\n                                                errors.workExperinceInfoData[\n                                                index\n                                                ] &&\n                                                errors.workExperinceInfoData[\n                                                  index\n                                                ].city &&\n                                                classes.border_fix\n                                                } no-scrooll input-label `}\n                                              onChange={(e) => {\n                                                handleChange(e);\n                                              }}\n                                              value={item.city}\n                                            >\n                                              {City.getCitiesOfState(\n                                                Country.getAllCountries().filter(\n                                                  (item_1) => {\n                                                    return (\n                                                      item_1.name === item.country\n                                                    );\n                                                  }\n                                                )[0]?.isoCode,\n                                                State.getAllStates().filter(\n                                                  (items) => {\n                                                    return (\n                                                      items.name == item.state\n                                                    );\n                                                  }\n                                                )[0]?.isoCode\n                                              ).map((item) => {\n                                                return (\n                                                  <MenuItem\n                                                    key={item.name}\n                                                    value={item.name}\n                                                  >\n                                                    <ListItemText\n                                                      primary={item.name}\n                                                    />\n                                                  </MenuItem>\n                                                );\n                                              })}\n                                            </Select>\n\n                                            {errors &&\n                                              errors.workExperinceInfoData &&\n                                              errors.workExperinceInfoData[\n                                              index\n                                              ] &&\n                                              errors.workExperinceInfoData[index]\n                                                .city &&\n                                              touched &&\n                                              touched.workExperinceInfoData &&\n                                              touched.workExperinceInfoData[\n                                              index\n                                              ] &&\n                                              touched.workExperinceInfoData[index]\n                                                .city && (\n                                                <div className=\"field-error\">\n                                                  {\n                                                    errors.workExperinceInfoData[\n                                                      index\n                                                    ].city\n                                                  }\n                                                </div>\n                                              )}\n                                          </Grid>\n\n                                          <Grid item lg={3} xs={12}>\n                                          <Box\n                                          display=\"flex\"\n                                          alignItems=\"flex-start\"\n                                        >\n                                          <span style={{ flex: \"0.9\" }}>\n                                            <div className=\"professional-grid-item\">\n                                              <CustomTextField\n                                                fieldName=\"Zip code /Post code\"\n                                                color=\"#085044\"\n                                                required\n                                                fullWidth\n                                                variant=\"outlined\"\n                                                className={`login-text-field ${classes.uploadButton_1}`}\n                                                name={`workExperinceInfoData.${index}.zipcode`}\n                                                placeholder=\"Zip code /Post code\"\n                                                type=\"text\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={item.zipcode}\n                                                helperText={\n                                                  errors &&\n                                                  errors.workExperinceInfoData &&\n                                                  errors.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  errors.workExperinceInfoData[\n                                                    index\n                                                  ].zipcode &&\n                                                  touched &&\n                                                  touched.workExperinceInfoData &&\n                                                  touched.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  touched.workExperinceInfoData[\n                                                    index\n                                                  ].zipcode &&\n                                                  errors.workExperinceInfoData[\n                                                    index\n                                                  ].zipcode\n                                                }\n                                                error={\n                                                  errors &&\n                                                    errors.workExperinceInfoData &&\n                                                    errors.workExperinceInfoData[\n                                                    index\n                                                    ] &&\n                                                    errors.workExperinceInfoData[\n                                                      index\n                                                    ].zipcode &&\n                                                    touched &&\n                                                    touched.workExperinceInfoData &&\n                                                    touched.workExperinceInfoData[\n                                                    index\n                                                    ] &&\n                                                    touched.workExperinceInfoData[\n                                                      index\n                                                    ].zipcode\n                                                    ? true\n                                                    : false\n                                                }\n                                              />\n                                            </div>\n                                            </span>\n                                            <span style={{\n                                              flex: \"0.1\", display: \"flex\", justifyContent: \"flex-end\",\n                                              alignItems: \"center\", marginTop: \"5px\"\n                                            }}\n                                          >\n                                            \n                                        <Tooltip title=\"Remove\">\n                                        <IconButton aria-label=\"remove\">\n                                          <RemoveCircleIcon\n                                            fontSize=\"large\"\n                                            className={\n                                              classes.fab + \" add-icon pointer\"\n                                            }\n                                            // onClick={() => {\n                                            //   remove(index);\n                                            //   if (index == checked) {\n                                            //     setChecked(null);\n                                            //   }\n                                            // }}\n\n                                            onClick={() => {\n                                              handleModalClose();\n                                              setType(\"experience\");\n                                              setModalContent({\n                                                ...item,\n                                                message: \"Are you sure you want to delete this work experience section ?\",\n                                                setField: () =>\n                                                  setFieldValue(\n                                                    `workExperinceInfoData`,\n                                                    values.workExperinceInfoData.filter(\n                                                      (\n                                                        item,\n                                                        index_1\n                                                      ) => {\n                                                        return (\n                                                          index !==\n                                                          index_1\n                                                        );\n                                                      }\n                                                    )\n                                                  ),\n                                              });\n                                            }}\n\n                                          />\n                                        </IconButton>\n                                      </Tooltip>\n                                     \n                                          \n\n                                          </span>\n                                          </Box>\n                                          </Grid>\n                                          <Grid item lg={2} xs={12}>\n                                            <div className=\"professional-grid-item\">\n                                              <label\n                                                htmlFor={`workExperinceInfoData.${index}.duration`}\n                                              >\n                                                Since\n                                                <span style={{ color: \"red\" }}>*</span>\n\n                                              </label>\n\n                                              <Select\n                                                style={{ color: \"#085044\" }}\n                                                labelId=\"demo-mutiple-checkbox-label\"\n                                                id=\"Year\"\n                                                name={`workExperinceInfoData.${index}.duration`}\n                                                variant=\"outlined\"\n                                                className={` ${classes.selectEmpty\n                                                  } ${errors &&\n                                                  errors.workExperinceInfoData &&\n                                                  errors.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  errors.workExperinceInfoData[\n                                                    index\n                                                  ].duration &&\n                                                  classes.border_fix\n                                                  } no-scrooll input-label no-scrooll`}\n                                                onChange={(e: any) => {\n                                                  return (\n                                                    handleChange(e)\n                                                    // setCountry(e.target.value)\n                                                  );\n                                                }}\n                                                error={true}\n                                                value={item.duration}\n                                              >\n                                                {years.map(\n                                                  (sinceval, index) => {\n                                                    return (<MenuItem\n                                                      key={`year${index}`}\n                                                      value={sinceval}\n                                                    >\n                                                      <ListItemText primary={sinceval} />\n                                                    </MenuItem>)\n                                                  }\n                                                )}\n                                              </Select>\n\n                                              {errors &&\n                                                errors.workExperinceInfoData &&\n                                                errors.workExperinceInfoData[\n                                                index\n                                                ] &&\n                                                errors.workExperinceInfoData[index]\n                                                  .duration &&\n                                                touched &&\n                                                touched.workExperinceInfoData &&\n                                                touched.workExperinceInfoData[\n                                                index\n                                                ] &&\n                                                touched.workExperinceInfoData[index]\n                                                  .country && (\n                                                  <div className=\"field-error\">\n                                                    {\n                                                      errors.workExperinceInfoData[\n                                                        index\n                                                      ].duration\n                                                    }\n                                                  </div>\n                                                )}\n\n                                            </div>\n                                          </Grid>\n                                          <Grid md={8} />\n                                          <Grid item lg={3} xs={12}>\n                                            <div className=\"professional-grid-item\">\n                                              <CustomTextField\n                                                color=\"#085044\"\n                                                required\n                                                fieldName=\"Reference (Doctor Name)\"\n                                                variant=\"outlined\"\n                                                fullWidth\n                                                className={`login-text-field ${classes.uploadButton_1}`}\n                                                name={`workExperinceInfoData.${index}.reference`}\n                                                placeholder=\"Reference\"\n                                                type=\"text\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={item.reference}\n                                                helperText={\n                                                  errors &&\n                                                  errors.workExperinceInfoData &&\n                                                  errors.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  errors.workExperinceInfoData[\n                                                    index\n                                                  ].reference &&\n                                                  touched &&\n                                                  touched.workExperinceInfoData &&\n                                                  touched.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  touched.workExperinceInfoData[\n                                                    index\n                                                  ].reference &&\n                                                  errors.workExperinceInfoData[\n                                                    index\n                                                  ].reference\n                                                }\n                                                error={\n                                                  errors &&\n                                                    errors.workExperinceInfoData &&\n                                                    errors.workExperinceInfoData[\n                                                    index\n                                                    ] &&\n                                                    errors.workExperinceInfoData[\n                                                      index\n                                                    ].reference &&\n                                                    touched &&\n                                                    touched.workExperinceInfoData &&\n                                                    touched.workExperinceInfoData[\n                                                    index\n                                                    ] &&\n                                                    touched.workExperinceInfoData[\n                                                      index\n                                                    ].reference\n                                                    ? true\n                                                    : false\n                                                }\n                                              />\n                                            </div>\n                                          </Grid>\n                                          <Grid item lg={3} xs={12}>\n                                            <div className=\"professional-grid-item\">\n                                              <CustomTextField\n                                                color=\"#085044\"\n                                                fullWidth\n                                                fieldName=\"Doctor LinkedIn Profile Link\"\n                                                variant=\"outlined\"\n                                                className={`login-text-field ${classes.uploadButton_1}`}\n                                                name={`workExperinceInfoData.${index}.linkedin_profile`}\n                                                placeholder=\"LinkedIn Profile\"\n                                                type=\"text\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={\n                                                  item.linkedin_profile\n                                                }\n                                                helperText={\n                                                  errors &&\n                                                  errors.workExperinceInfoData &&\n                                                  errors.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  errors.workExperinceInfoData[\n                                                    index\n                                                  ].linkedin_profile &&\n                                                  touched &&\n                                                  touched.workExperinceInfoData &&\n                                                  touched.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  touched.workExperinceInfoData[\n                                                    index\n                                                  ].linkedin_profile && (\n                                                    <div className=\"field-error\">\n                                                      {\n                                                        errors\n                                                          .workExperinceInfoData[\n                                                          index\n                                                        ].linkedin_profile\n                                                      }\n                                                    </div>\n                                                  )\n                                                }\n                                                error={\n                                                  errors &&\n                                                    errors.workExperinceInfoData &&\n                                                    errors.workExperinceInfoData[\n                                                    index\n                                                    ] &&\n                                                    errors.workExperinceInfoData[\n                                                      index\n                                                    ].linkedin_profile &&\n                                                    touched &&\n                                                    touched.workExperinceInfoData &&\n                                                    touched.workExperinceInfoData[\n                                                    index\n                                                    ] &&\n                                                    touched.workExperinceInfoData[\n                                                      index\n                                                    ].linkedin_profile\n                                                    ? true\n                                                    : false\n                                                }\n                                              />\n                                            </div>\n                                          </Grid>\n                                          <Grid item lg={3} xs={12}>\n                                            <div className=\"professional-grid-item\">\n                                              <CustomTextField\n                                                fieldName={\n                                                  \"Reference Doctor's Email\"\n                                                }\n                                                color=\"#085044\"\n                                                fullWidth\n                                                variant=\"outlined\"\n                                                className={`login-text-field ${classes.uploadButton_1}`}\n                                                name={`workExperinceInfoData.${index}.reference_email`}\n                                                placeholder=\"Reference Email\"\n                                                type=\"text\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={\n                                                  item.reference_email\n                                                }\n                                                helperText={\n                                                  errors &&\n                                                  errors.workExperinceInfoData &&\n                                                  errors.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  errors.workExperinceInfoData[\n                                                    index\n                                                  ].reference_email &&\n                                                  touched &&\n                                                  touched.workExperinceInfoData &&\n                                                  touched.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  touched.workExperinceInfoData[\n                                                    index\n                                                  ].reference_email && (\n                                                    <div className=\"field-error\">\n                                                      {\n                                                        errors\n                                                          .workExperinceInfoData[\n                                                          index\n                                                        ].reference_email\n                                                      }\n                                                    </div>\n                                                  )\n                                                }\n                                                error={\n                                                  errors &&\n                                                    errors.workExperinceInfoData &&\n                                                    errors.workExperinceInfoData[\n                                                    index\n                                                    ] &&\n                                                    errors.workExperinceInfoData[\n                                                      index\n                                                    ].reference_email &&\n                                                    touched &&\n                                                    touched.workExperinceInfoData &&\n                                                    touched.workExperinceInfoData[\n                                                    index\n                                                    ] &&\n                                                    touched.workExperinceInfoData[\n                                                      index\n                                                    ].reference_email\n                                                    ? true\n                                                    : false\n                                                }\n                                              />\n                                            </div>\n                                          </Grid>\n                                          <Grid item lg={3} xs={12}>\n                                            <CustomTextField\n                                              color=\"#085044\"\n                                              fieldName=\"Reference Doctor's Phone\"\n                                              variant=\"outlined\"\n                                              fullWidth\n                                              id=\"input-with-dropdown\"\n                                              className={`login-text-field ${classes.uploadButton_1}`}\n                                              name={`workExperinceInfoData.${index}.reference_phone`}\n                                              placeholder=\"Reference Phone\"\n                                              type=\"text\"\n                                              onChange={handleChange}\n                                              onBlur={handleBlur}\n                                              value={item.reference_phone}\n                                              InputProps={{\n                                                startAdornment: (\n                                                  <InputAdornment position=\"start\">\n                                                    <FormControl\n                                                      className={\n                                                        classes.formControl\n                                                      }\n                                                    >\n                                                      <Select\n                                                        style={{ color: \"#085044\" }}\n                                                        id=\"country_code\"\n                                                        name={`workExperinceInfoData.${index}.country_code`}\n                                                        value={\n                                                          item.country_code ||\n                                                          \"+1\"\n                                                        }\n                                                        disableUnderline\n                                                        onChange={handleChange}\n                                                        error={\n                                                          errors.country_code &&\n                                                            touched.country_code\n                                                            ? true\n                                                            : false\n                                                        }\n                                                      >\n                                                        {dialCodes\n                                                          .sort(\n                                                            (a: any, b: any) => {\n                                                              return a - b;\n                                                            }\n                                                          )\n                                                          .map((item) => {\n                                                            return (\n                                                              <MenuItem\n                                                                value={`+${item}`}\n                                                              >\n                                                                {`+${item}`}\n                                                              </MenuItem>\n                                                            );\n                                                          })}\n                                                      </Select>\n                                                    </FormControl>\n                                                    <Typography>|</Typography>\n                                                  </InputAdornment>\n                                                ),\n                                              }}\n                                              helperText={\n                                                errors &&\n                                                errors.workExperinceInfoData &&\n                                                errors.workExperinceInfoData[\n                                                index\n                                                ] &&\n                                                errors.workExperinceInfoData[\n                                                  index\n                                                ].reference_phone &&\n                                                touched &&\n                                                touched.workExperinceInfoData &&\n                                                touched.workExperinceInfoData[\n                                                index\n                                                ] &&\n                                                touched.workExperinceInfoData[\n                                                  index\n                                                ].reference_phone &&\n                                                errors.workExperinceInfoData[\n                                                  index\n                                                ].reference_phone\n                                              }\n                                              error={\n                                                errors &&\n                                                  errors.workExperinceInfoData &&\n                                                  errors.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  errors.workExperinceInfoData[\n                                                    index\n                                                  ].reference_phone &&\n                                                  touched &&\n                                                  touched.workExperinceInfoData &&\n                                                  touched.workExperinceInfoData[\n                                                  index\n                                                  ] &&\n                                                  touched.workExperinceInfoData[\n                                                    index\n                                                  ].reference_phone\n                                                  ? true\n                                                  : false\n                                              }\n                                            />\n                                          </Grid>\n                                          <Grid\n                                            item\n                                            lg={12}\n                                            xs={12}\n                                            className=\"checkbox-grid-item mb-30\"\n                                          >\n                                            <Checkbox\n                                              checked={item.current_organization}\n                                              name={`workExperinceInfoData.${index}.current_organization`}\n                                              onChange={(e) => {\n                                                if (\n                                                  values.workExperinceInfoData[\n                                                    index\n                                                  ].current_organization === 1\n                                                ) {\n                                                  setFieldValue(\n                                                    `workExperinceInfoData[${index}].current_organization`,\n                                                    0\n                                                  );\n                                                } else {\n                                                  setFieldValue(\n                                                    `workExperinceInfoData[${index}].current_organization`,\n                                                    1\n                                                  );\n                                                }\n                                                values.workExperinceInfoData.map(\n                                                  (item, index_1) => {\n                                                    return (\n                                                      index_1 !== index &&\n                                                      setFieldValue(\n                                                        `workExperinceInfoData[${index_1}].current_organization`,\n                                                        0\n                                                      )\n                                                    );\n                                                  }\n                                                );\n                                              }}\n                                              inputProps={{\n                                                \"aria-label\": \"\",\n                                              }}\n                                            />\n\n                                            <Typography>\n                                              Current Organization\n                                            </Typography>\n                                          </Grid>\n                                        </Grid>\n                                      </div>\n                                    </div>\n\n                                    {/* <div className=\"plus-icon\">\n\n\n                                      <Tooltip title=\"Remove\">\n                                        <IconButton aria-label=\"remove\">\n                                          <RemoveCircleIcon\n                                            fontSize=\"large\"\n                                            className={\n                                              classes.fab + \" add-icon pointer\"\n                                            }\n                                            onClick={() => {\n                                              remove(index);\n                                              if (index == checked) {\n                                                setChecked(null);\n                                              }\n                                            }}\n                                          />\n                                        </IconButton>\n                                      </Tooltip>\n\n                                    </div> */}\n                                  </div>\n                                </div>\n\n                              )\n                            )}\n                        </div>\n                      )}\n                    />\n                    {/* </Paper> */}\n                    {/* </Grid> */}\n                  </Box>\n                </Grid>\n                <Grid style={{ overflow: 'hidden' }} item lg={12} xs={12} className=\"office-address-grid\">\n                  <Typography className=\"office-address-title\">\n                    Specialty\n                  </Typography>\n                </Grid>\n                <Grid style={{ overflow: 'hidden', paddingLeft: 0 }} item lg={12} xs={5}>\n                  <Grid item xs={5} >\n                    <FieldArray\n                      name=\"speciality\"\n                      render={({ insert, remove, push }) => (\n                        <Autocomplete\n                          id=\"speciality\"\n                          style={{ marginLeft: 0, borderRadius: '30px' }}\n                          multiple\n                          disabled={values?.speciality?.length >= 2}\n                          ChipProps={{ style: { color: '#085044', fontFamily: 'Helvetica', backgroundColor: '#ffdedd',border:\"1px solid #ddbcbc\" }, disabled: false }}\n                          // fullWidth\n                          className=\"autocomplete\"\n                          options={specialityList}\n                          getOptionLabel={(option) => option.label}\n                          value={values.speciality}\n                          onChange={(e, value) => {\n                            setFieldValue(\"speciality\", value);\n                            value.forEach((item) => {\n                              if (item.value == 7) {\n                                setFieldenable(true);\n                              }\n                            });\n                          }}\n                          renderInput={(params) => (\n                            <div\n                              style={{\n                                display: \"flex\",\n                                flexDirection: \"column-reverse\",\n                              }}\n                            >\n                              <TextField\n                                disabled\n                                className={`hidden_1 \n                               ${values.speciality.length !== 0 ? \"mb-15\" : \"\"\n                                  }`}\n                                {...params}\n                                placeholder=\"Specialty\"\n                                variant=\"outlined\"\n                                fullWidth\n                              />\n                              <TextField\n                                className={`hidden`}\n                                {...params}\n                                name=\"speciality\"\n                                placeholder=\"Speciality\"\n                                variant=\"outlined\"\n                                fullWidth\n                              />\n\n                              {values?.speciality?.length >= 2 && <p style={{ paddingLeft: 30, opacity: .5 }}>You have selected maximum number of specialties allowed.</p>}\n\n                            </div>\n                          )}\n                        />\n\n                      )}\n                    />\n\n                  </Grid>\n\n                  {errors &&\n                    errors.speciality &&\n                    touched &&\n                    touched.speciality && (\n                      <div className=\"field-error error_div\">\n                        {errors.speciality}\n                      </div>\n                    )}\n                  {/* {specialityError && (\n                    <div className=\"field-error error_div\">\n                      Please Select Your Speciality.\n                    </div>\n                  )} */}\n                </Grid>\n\n                <Grid item xs={12}>\n                  {fieldenable == true && (\n                    <>\n                      <div>\n                        <CustomTextField\n                          variant=\"outlined\"\n                          fullWidth\n                          placeholder=\"Please Enter speciality\"\n                          onChange={(e) => {\n                            setFieldGet({\n                              label: e.target.value,\n                              value: Math.floor(Math.random() * 100 + 1),\n                            });\n                          }}\n                        />\n                        <CustomButton\n                          variant=\"outlined\"\n                          onClick={() => {\n                            setFieldGet({});\n                            setFieldenable(false);\n                            if (values?.speciality?.map(v => v?.label?.toLowerCase()).reduce((p, c) => p + c, '').includes(fieldGet?.label?.toLowerCase())) {\n                              let newArr = values.speciality\n                              newArr.pop()\n                              setInitialStateValue({\n                                ...values,\n                                speciality: newArr\n                              });\n                              return\n                            }\n                            setInitialStateValue({\n                              ...values,\n                              speciality: values.speciality.map((item) => {\n                                if (item.value === 7) {\n                                  return fieldGet;\n                                } else {\n                                  return item;\n                                }\n                              }),\n                            });\n\n                          }}\n                        >\n                          Save\n                        </CustomButton>\n                      </div>\n                    </>\n                  )}\n                </Grid>\n                <hr />\n\n\n                <Grid item xs={12}>\n                  {/* BUttons Bottom */}\n                  <Box style={{ display: 'flex', alignItems: 'center', flex: 1, justifyContent: 'space-between', }} className={classes.buttonBox}>\n                    <div style={{ width: 'auto', marginLeft: 'auto', marginBottom: 0, paddingTop: 0, paddingBottom: 0 }} className={'work-inner-box'} >\n                      <p >Fields with \"<p style={{ color: 'red', display: 'inline' }} > * </p>\" are compulsory for profile verification</p>\n                    </div>\n                    <div style={{ marginLeft: 20, marginRight: -20 }}>\n                      <CustomButton\n                        onClick={() => {\n                          setTimeout(() => {\n                            if (Object.keys(errors).length > 0) setPopupProps({ message: 'There are required fields you need to fill out.', title: \"Required Fields\", hideSecondaryButton: true, primaryTest: 'Ok' })\n                          }, 500)\n                          handleSubmit()\n                        }}\n                        type=\"submit\"\n                        variant=\"contained\"\n                        className={`register-button ${classes.BottomButtons}`}\n                      >\n                        save\n                      </CustomButton>\n                    </div>\n                  </Box>\n                </Grid>\n              </Grid>\n\n            </Form>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n};\n\nexport default React.forwardRef(ProfessionalInfo);\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Typography,\n  Grid,\n  Modal,\n  Card,\n  MenuItem,\n  ListItemText,\n  Checkbox,\n} from \"@material-ui/core\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport { withRouter } from \"react-router\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { isEmpty, uniqBy, filter } from \"lodash\";\nimport \"./treatmentsInfo.scss\";\nimport CustomButton from \"../../../../reusable/customButton/customButton\";\nimport { useAppDispatch, useAppSelector } from \"../../../../../hooks/hooks\";\nimport {\n  fetchUpdateTreatmentsInfoAsync,\n  selectTreatmentsProfileUsers,\n  fetchSaveTreatmentsInfoAsync,\n  fetchSavedTreatmentsListAsync,\n} from \"./treatmentsSlice\";\nimport TreatmentsSaveInfo from \"../treatmentsSaveInfo/treatmentsSaveInfo\";\nimport Toast from \"../../../../../reducres/reducers/toast\";\nimport {\n  closeSpinner,\n  loadSpinner,\n} from \"../../../../../reducres/reducers/spinner\";\nimport CustomPopup from \"../../../../reusable/customPopup/customPopup\";\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      \"& > * \": {\n        textAlign: \"center\",\n      },\n      position: \"absolute\",\n      width: 400,\n      backgroundColor: theme.palette.background.paper,\n      border: \"2px solid #debcbd\",\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3), top: '50% !important',\n      left: '50% !important',\n      transform: 'translate(-50%, -50%)!important',\n    },\n  })\n);\n\nconst TreatmentsInfo: React.FC<any> = ({ history }) => {\n  const [modalStyle] = React.useState(getModalStyle);\n  const classes = useStyles();\n  const [save, setSave] = useState(false);\n  const dispatch = useAppDispatch();\n  const { savedTreatmentDetailsList } = useAppSelector(\n    selectTreatmentsProfileUsers\n  );\n\n  const areas = uniqBy(\n    savedTreatmentDetailsList &&\n    savedTreatmentDetailsList.data &&\n    savedTreatmentDetailsList.data.map((item) => item.area),\n    \"id\"\n  );\n  const selectedAreas = areas.map((item: any) => item.id);\n\n  const categorys = uniqBy(\n    savedTreatmentDetailsList &&\n    savedTreatmentDetailsList.data &&\n    savedTreatmentDetailsList.data.map((item) => item.category),\n    \"id\"\n  );\n  const selectCategory = categorys.map((item: any) => item.id);\n\n  const subCategorys = uniqBy(\n    savedTreatmentDetailsList &&\n    savedTreatmentDetailsList.data &&\n    savedTreatmentDetailsList.data.map((item) => item.subcategory),\n    \"id\"\n  );\n  const selectSubCategory = subCategorys.map((item: any) => item.id);\n\n  const treatments = uniqBy(\n    savedTreatmentDetailsList &&\n    savedTreatmentDetailsList.data &&\n    savedTreatmentDetailsList.data.map((item) => item.treatment),\n    \"id\"\n  );\n  const selectTreatments = treatments.map(({ id, pivot }: any) => {\n    return { id, ...pivot };\n  });\n\n  const [checked] = React.useState({ id: [...selectedAreas] });\n  const [categoryChecked, setCategoryChecked] = React.useState<any>({\n    area_id: [],\n    id: [...selectCategory],\n  });\n  const [treatmentsChecked] = React.useState([...selectTreatments]);\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handlesaveTreatments = () => {\n    dispatch(\n      fetchSaveTreatmentsInfoAsync({ treatment_id: treatmentsChecked })\n    ).then((response) => {\n      setSave(true);\n    });\n  };\n\n  let {\n    treatmentsList,\n    treatmentsProfileSubCategoryUsers,\n    treatmentsProfileCategoryUsers,\n  } = useAppSelector(selectTreatmentsProfileUsers);\n  treatmentsProfileCategoryUsers = isEmpty(treatmentsProfileCategoryUsers)\n    ? [{ category: categorys }]\n    : treatmentsProfileCategoryUsers;\n  treatmentsProfileCategoryUsers = uniqBy(treatmentsProfileCategoryUsers, \"id\");\n  treatmentsProfileSubCategoryUsers = isEmpty(treatmentsProfileSubCategoryUsers)\n    ? [{ subcategory: subCategorys }]\n    : treatmentsProfileSubCategoryUsers;\n  treatmentsList = isEmpty(treatmentsList)\n    ? [{ treatment: treatments }]\n    : treatmentsList;\n\n  useEffect(() => {\n    window.scrollTo(0, 0)\n    const filterCategoryChecked: any = filter(categoryChecked.id, (item) =>\n      treatmentsProfileCategoryUsers.some((cat) => cat.id === item)\n    );\n    if (categoryChecked.length > 0) {\n      setCategoryChecked(filterCategoryChecked);\n    }\n  }, [checked.id]);\n\n  const body = (\n    <div className={classes.paper}>\n      <Grid container>\n        <Grid item xs={12} lg={12}>\n          <CloseIcon className=\"cancel-icon\" onClick={handleClose} />\n        </Grid>\n\n        <Grid item xs={12} lg={12}>\n          <Typography className=\"modal-heading\" id=\"simple-modal-title\">\n            Are you sure you want to add these treatments?\n          </Typography>\n        </Grid>\n      </Grid>\n\n      <div className=\"modal-buttons-main\">\n        <CustomButton className=\"no-button\" onClick={handleClose}>\n          No\n        </CustomButton>\n        <CustomButton\n          className=\"yes-button\"\n          onClick={(e) => {\n            handlesaveTreatments();\n          }}\n        >\n          yes\n        </CustomButton>\n      </div>\n    </div>\n  );\n\n  const handleCheckBoxCategoryChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    item: any\n  ) => {\n    let totalCounts = toalCounts;\n\n    let data = area_id.filter((items) => {\n      if (item.area_id === items.area_id) {\n        return items;\n      }\n    });\n\n    data[0].category_id = data[0].category_id.filter((items) => {\n      if (items.id !== item.id) {\n        return items;\n      } else {\n        totalCounts.category_id--;\n      }\n    });\n\n    data[0].sub_categoryId = data[0].sub_categoryId.filter((items) => {\n      if (items.category_id !== item.id) {\n        return items;\n      } else {\n        totalCounts.sub_categoryId--;\n      }\n    });\n\n    data[0].treatement = data[0].treatement.filter((items) => {\n      if (items.category_id !== item.id) {\n        return items;\n      } else {\n        totalCounts.treatement--;\n      }\n    });\n\n    let newData = area_id.filter((items) => {\n      if (item.area_id === items.area_id) {\n        return (items = data);\n      }\n    });\n    setTotalCounts(totalCounts);\n\n    setarea_id(newData);\n\n    sendTODb(newData);\n  };\n  const handleCheckBoxTreatmentsChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    item: any,\n    index,\n    index2\n  ) => {\n    let areadata = area_id.filter((data) => {\n      if (data.area_id == item.area_id) {\n        return data;\n      }\n    });\n\n    area_id[index2].treatement.splice(index, 1);\n\n    let newData = area_id.filter((data) => {\n      if (data.area_id == item.area_id) {\n        return (data = areadata);\n      } else {\n        return data;\n      }\n    });\n\n    setarea_id(newData);\n    setTotalCounts({ ...toalCounts, treatement: toalCounts.treatement - 1 });\n\n    sendTODb(newData);\n  };\n\n  const handleCheckBoxChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    item\n  ) => {\n    let totalCounts = toalCounts;\n    let Ndata = area_id.filter((items) => {\n      if (item.area_id !== items.area_id) {\n        return items;\n      }\n    });\n\n    let data = area_id.filter((items) => {\n      if (item.area_id === items.area_id) {\n        return items;\n      }\n    });\n\n    toalCounts.treatement = totalCounts.treatement - data[0].treatement.length;\n    toalCounts.sub_categoryId =\n      totalCounts.sub_categoryId - data[0].sub_categoryId.length;\n    toalCounts.category_id =\n      totalCounts.category_id - data[0].category_id.length;\n    toalCounts.area_id = totalCounts.area_id - 1;\n\n    setarea_id(Ndata);\n\n    sendTODb(Ndata);\n\n    return;\n    dispatch(\n      fetchUpdateTreatmentsInfoAsync({\n        treatment_id: { area_id: [...checked.id] },\n        remove_all: 0,\n      })\n    );\n  };\n\n  const sendTODb = (fielddata) => {\n    let n = 0;\n    fielddata.map((data) => {\n      data.treatement.filter((items) => {\n        n = n + 1;\n        return;\n      });\n    });\n\n    if (n == 0) {\n      setDb({\n        treatment_id: [],\n        remove_all: 1,\n      });\n      dispatch(loadSpinner());\n      dispatch(\n        fetchUpdateTreatmentsInfoAsync({\n          treatment_id: [],\n          remove_all: 1,\n        })\n      )\n        .unwrap()\n        .then(async (result) => {\n          Treatementdata()\n          if (result) {\n            Toast.success(result.message);\n          }\n        })\n        .then(() => {\n          setTimeout(() => {\n            dispatch(closeSpinner());\n          }, 2000);\n        });\n    } else {\n      let treatement_id = [];\n\n      area_id.map((data) => {\n        data.treatement.map((items) => {\n          treatement_id.push({\n            area_id: items.area_id,\n            category_id: items.category_id,\n            sub_category_id: items.sub_category,\n            treatment_id: items.id,\n          });\n        });\n      });\n\n      dispatch(\n        fetchUpdateTreatmentsInfoAsync({\n          treatment_id: treatement_id,\n          remove_all: 0,\n        })\n      )\n      .unwrap()\n      .then(async (result) => {\n        Treatementdata()\n        if (result) {\n          Toast.success(result.message);\n        }\n      })\n      .then(() => {\n        setTimeout(() => {\n         \n          dispatch(closeSpinner());\n        }, 2000);\n      });\n    }\n  };\n\n  const handleCheckBoxSubCategoryChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    item,\n    index\n  ) => {\n    let data = area_id.filter((items) => {\n      if (items.area_id === item.area_id) {\n        return items;\n      }\n    });\n\n    data[0].sub_categoryId.splice(index, 1);\n\n    data[0].treatement = data[0].treatement.filter((items) => {\n      if (items.sub_category !== item.id) {\n        return items;\n      }\n    });\n\n    let Newdata = area_id.filter((items) => {\n      if (items.area_id === item.area_id) {\n        return items == data[0];\n      }\n    });\n\n    setarea_id(Newdata);\n    sendTODb(Newdata);\n    return;\n  };\n\n  const [area_id, setarea_id] = useState([]);\n  const [sendDb, setDb] = useState({});\n  const [category_id, setCategory] = useState([]);\n  const [toalCounts, setTotalCounts] = useState({\n    area_id: 0,\n    category_id: 0,\n    sub_categoryId: 0,\n    treatement: 0,\n  });\n\n  const Treatementdata = () => {\n    let newArr = [];\n    let new_category_id = [];\n    dispatch(loadSpinner());\n    dispatch(fetchSavedTreatmentsListAsync()).then(async (response) => {\n      if (response?.payload?.response?.data?.data.length == 0) {\n        dispatch(closeSpinner());\n      } else {\n        dispatch(closeSpinner());\n      }\n\n      const data = response?.payload?.data\n\n      const areas = [];\n      const categories = [];\n      const subCategories = [];\n      const treatments = [];\n      data.forEach((v) => {\n        if (!areas.includes(v.area_id)) areas.push(v.area_id)\n        if (!categories.includes(v.category_id)) categories.push(v.category_id)\n        if (!subCategories.includes(v.sub_category_id)) subCategories.push(v.sub_category_id)\n        if (!treatments.includes(v.treatment_id)) treatments.push(v.treatment_id)\n      });\n\n      setTotalCounts({\n        area_id: areas.length,\n        category_id: categories.length,\n        sub_categoryId: subCategories.length,\n        treatement: treatments.length,\n      });\n\n      data?.forEach(async (el) => {\n        if (\n          category_id.indexOf(el.area_id) == -1 &&\n          new_category_id.indexOf(el.area_id) == -1\n        ) {\n          new_category_id.push(el.area_id);\n          setCategory([...category_id, el.area_id]);\n        }\n\n\n\n        try {\n          if (true) {\n            newArr.push({\n              area_id: el.area_id,\n              category_id: [\n                {\n                  id: el.category_id,\n                  title: el.category.title,\n                  area_id: el.area_id,\n                },\n              ],\n              title: el.area.title,\n              [`sub_categoryId`]: [\n                {\n                  id: el.sub_category_id,\n                  area_id: el.area_id,\n                  title: el.subcategory.title,\n                  category_id: el.category_id,\n                  sub_category: el.sub_category_id,\n                },\n              ],\n              [`treatement`]: [\n                {\n                  id: el.treatment_id,\n                  area_id: el.area_id,\n                  title: el.treatment.title,\n                  category_id: el.category_id,\n                  sub_category: el.sub_category_id,\n                },\n              ],\n            });\n\n            newArr.map((count: any) => {\n              // return setTotalCounts({\n              //   area_id: toalCounts.area_id + 1,\n              //   category_id: toalCounts.category_id + count.category_id.length,\n              //   sub_categoryId:toalCounts.sub_categoryId + count.sub_categoryId.length,\n              //   treatement: toalCounts.treatement + count.treatement.length,\n              // });\n            });\n          } else {\n            try {\n              let prevArr = newArr;\n              let prevValue = prevArr[0];\n\n              let newPrev = prevArr.filter((fd) => {\n                if (fd.area_id === el.area_id) {\n                  return fd;\n                }\n              });\n\n              prevValue = newPrev[0];\n\n              const category_info = prevValue;\n\n              category_info.category_id.map((categoryInfo) => {\n                if (categoryInfo.id != el.category_id) {\n                  return (category_info.category_id = [\n                    { id: el.category_id, title: el.category.title },\n                    ...category_info.category_id,\n                  ]);\n                } else {\n                  return (category_info.category_id = [\n                    ...category_info.category_id,\n                  ]);\n                }\n              });\n\n              category_info.sub_categoryId.map((categoryInfo) => {\n                if (categoryInfo.id !== el.sub_category_id) {\n                  return (category_info.sub_categoryId = [\n                    {\n                      id: el.sub_category_id,\n                      area_id: el.area_id,\n                      title: el.subcategory.title,\n                      category_id: el.category_id,\n                      sub_category: el.sub_category_id,\n                    },\n                    ...category_info.sub_categoryId,\n                  ]);\n                } else {\n                  return (category_info.sub_categoryId = [\n                    ...category_info.sub_categoryId,\n                  ]);\n                }\n              });\n\n              category_info.treatement.map((treatement) => {\n                if (treatement.id !== el.treatement_id) {\n                  return (category_info.treatement = [\n                    {\n                      id: el.treatment_id,\n                      area_id: el.area_id,\n                      title: el.treatment.title,\n                      category_id: el.category_id,\n                      sub_category: el.sub_category_id,\n                    },\n                    ...category_info.treatement,\n                  ]);\n                } else {\n                  return (category_info.treatement = [\n                    ...category_info.sub_categoryId,\n                  ]);\n                }\n              });\n\n              prevValue = {\n                ...prevValue,\n                area_id: el.area_id,\n                category_id: category_info.category_id,\n                sub_categoryId: category_info.sub_categoryId,\n\n                [`treatement`]: category_info.treatement,\n              };\n\n              prevArr.map((Nd) => {\n                if (Nd.area_id === el.area_id) {\n                  return (Nd = prevValue);\n                }\n              });\n              newArr = prevArr;\n              newArr.map((count: any) => {\n                // return setTotalCounts({\n                //   area_id: toalCounts.area_id + 1,\n                //   category_id:\n                //     toalCounts.category_id + count.category_id.length,\n                //   sub_categoryId:\n                //     toalCounts.sub_categoryId + count.sub_categoryId.length,\n                //   treatement: toalCounts.treatement + count.treatement.length,\n                // });\n              });\n              setarea_id(newArr);\n            } catch (err) { }\n          }\n      \n        } catch (error) { }\n        console.log('AREA ID', newArr)\n       \n      });\n      setarea_id(newArr);\n    });\n  };\n  const handleAddTreatments = () => {\n    setSave(true);\n  };\n\n  // useEffect(() => {\n  //   Treatementdata();\n  // }, []);\n\n  useEffect(() => {\n    Treatementdata();\n  }, [save]);\n\n  const [popupProps, setPopupProps] = useState<any>()\n\n  return (\n    <>\n      {popupProps && <CustomPopup visible={popupProps ? true : false} dismiss={() => setPopupProps(null)} {...popupProps} />}\n      {save == true ? (\n        <TreatmentsSaveInfo\n          hide={() => {\n            setSave(false);\n          }}\n        />\n      ) : (\n        <div className=\"treatments-info-tab\">\n          <Grid container>\n          <Grid item lg={6} md={6} sm={12} xs={12}  className=\"office-address-grid\">\n              <Typography className=\"office-address-title\">\n                All Treatments{\" \"}\n              </Typography>\n            </Grid>\n            <Grid item lg={6} md={6} sm={12} xs={12}\n              className=\"add-remove-treatments-button\"\n            >\n              <CustomButton\n                className=\"save-changes-button px-4\"\n                onClick={handleAddTreatments}\n              >\n                Add Treatments\n              </CustomButton>\n\n              {/* <CustomButton className=\"save-changes-button\" onClick={handleOpen}>save changes</CustomButton> */}\n              <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n              >\n                {body}\n              </Modal>\n            </Grid>\n          </Grid>\n          <Grid container spacing={2}>\n            <Grid item lg={3} md={3} xs={12} sm={12}>\n              <Typography className=\"treatment-area-category\">Area</Typography>\n              <Card>\n                <Grid container className=\"treatments-sub-heading-grid\">\n                  <Grid item lg={8} md={8} xs={8} sm={8}>\n                    <Typography variant=\"h6\" className=\"treatments-heading\">\n                      Selected\n                    </Typography>\n                  </Grid>\n                  <Grid lg={4} md={4} xs={4} sm={4} className=\"\">\n                    <Typography\n                      className=\"\"\n                      style={{\n                        textAlign: \"right\",\n                        paddingLeft: \"20px\",\n                        paddingRight: \"20px\",\n                      }}\n                    >\n                      {toalCounts.area_id}\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <Grid container>\n                  <Grid item lg={12} xs={12}>\n                    {area_id.length > 0 &&\n                      area_id.filter((value, index, arr) => arr.map(e => e.area_id).indexOf(value.area_id) === index).map((item: any, index: any) => (\n                        <MenuItem key={item.area} value={item.title}>\n                          <ListItemText style={{ textTransform: 'capitalize',whiteSpace: \"break-spaces\" }} primary={item.title} />\n                          <Checkbox\n                            checked\n                            disabled\n                            name={item.title}\n                            id={item.id}\n                            onChange={(event: any) =>\n                              setPopupProps({ title: 'Caution', message: 'Are you sure you want to remove this treatment?', onYes: () => handleCheckBoxChange(event, item) })\n\n                            }\n                            inputProps={{ \"aria-label\": \"\" }}\n                          />\n                        </MenuItem>\n                      ))}\n                  </Grid>\n                </Grid>\n              </Card>\n            </Grid>\n\n\n\n\n            <Grid item lg={3} md={3} xs={12} sm={12}>\n              <Typography className=\"treatment-area-category\">\n                Category\n              </Typography>\n              <Card>\n                <Grid container className=\"treatments-sub-heading-grid\">\n                  <Grid item lg={8} xs={8}>\n                    <Typography variant=\"h6\" className=\"treatments-heading\">\n                      Selected\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4} lg={4} className=\"selected-count-grid\">\n                    <Typography className=\"treatments-sub-heading\">\n                      {toalCounts.category_id}\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <Grid container>\n                  <Grid item lg={12} xs={12}>\n                    {area_id.map(a => a.category_id[0])\n                      .filter((value, index, arr) => arr.map(e => e.id).indexOf(value.id) === index)\n                      .map((item) => {\n                        return (\n                          <MenuItem key={item.id} value={item.id}>\n                            <ListItemText primary={item.title} style={{ textTransform: 'capitalize', whiteSpace: \"break-spaces\" }} />\n                            <Checkbox\n                              checked\n                              disabled\n                              name={item.title}\n                              id={item.id}\n                              onChange={(event: any) =>\n                                setPopupProps({ title: 'Caution', message: 'Are you sure you want to remove this item?', onYes: () =>   handleCheckBoxCategoryChange(event, item) })\n                              \n                              }\n                              inputProps={{ \"aria-label\": \"\" }}\n                            />\n                          </MenuItem>\n                        );\n                      })}\n\n                  </Grid>\n                </Grid>\n              </Card>\n            </Grid>\n            <Grid item lg={3} md={3} xs={12} sm={12}>\n              <Typography className=\"treatment-area-category\">\n                Sub Category\n              </Typography>\n              <Card>\n                <Grid container className=\"treatments-sub-heading-grid\">\n                  <Grid item xs={8}>\n                    <Typography variant=\"h6\" className=\"treatments-heading\">\n                      Selected\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4} className=\"selected-count-grid\">\n                    <Typography className=\"treatments-sub-heading\">\n                      {toalCounts.sub_categoryId}\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <Grid container>\n                  <Grid item lg={12} xs={12}>\n                    {area_id.map(a => a.sub_categoryId[0])\n                      .filter((value, index, arr) => arr.map(e => e.id).indexOf(value.id) === index)\n                      .map((item, index) => (\n                        <MenuItem key={item.id} /* value={item.type} */>\n                          <ListItemText primary={item.title} style={{ textTransform: 'capitalize', whiteSpace: \"break-spaces\" }} />\n                          <Checkbox\n                            checked\n                            disabled\n                            name={item.title}\n                            id={item.id}\n                            onChange={(event: any) =>\n                              setPopupProps({ title: 'Caution', message: 'Are you sure you want to remove this item?', onYes: () =>     handleCheckBoxSubCategoryChange(\n                                event,\n                                item,\n                                index\n                              ) })                            \n                            }\n                            inputProps={{ \"aria-label\": \"\" }}\n                          />\n                        </MenuItem>\n                      ))}\n                  </Grid>\n                </Grid>\n              </Card>\n            </Grid>\n            <Grid item lg={3} md={3} xs={12} sm={12}>\n              <Typography className=\"treatment-area-category\">\n                Treatments\n              </Typography>\n              <Card>\n                <Grid container className=\"treatments-sub-heading-grid\">\n                  <Grid item xs={8}>\n                    <Typography variant=\"h6\" className=\"treatments-heading\">\n                      Selected\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4} className=\"selected-count-grid\">\n                    <Typography className=\"treatments-sub-heading\">\n                      {toalCounts.treatement}\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <Grid container>\n                  <Grid item lg={12} xs={12}>\n                    {area_id.map((items: any, index2) => {\n                      return items.treatement.map((item, index) => {\n                        return (\n                          <MenuItem key={item.type} value={item.type}>\n                            <ListItemText primary={item.title} style={{ textTransform: 'capitalize',whiteSpace: \"break-spaces\" }} />\n                            <Checkbox\n                              checked\n                              name={item.title}\n                              id={item.id}\n                              onChange={(event: any) =>{\n                                setPopupProps({ title: 'Caution', message: 'Are you sure you want to remove this item?', onYes: () => handleCheckBoxTreatmentsChange(\n                                  event,\n                                  item,\n                                  index,\n                                  index2\n                                ) })\n                                console.log(item, index, index2)\n                              }\n                              \n  \n                             \n                              }\n                              inputProps={{ \"aria-label\": \"\" }}\n                            />\n                          </MenuItem>\n                        );\n                      });\n                    })}\n                  </Grid>\n                </Grid>\n              </Card>\n            </Grid>\n          </Grid>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default withRouter(TreatmentsInfo);\n","import React, { ForwardRefRenderFunction, useImperativeHandle } from \"react\";\nimport {\n  Grid,\n  MenuItem,\n  FormControl,\n  Select,\n  Input,\n  Typography,\n  FormHelperText,\n  ListItemText,\n  Checkbox,\n  InputAdornment,\n  Box\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Modal from \"../../../../../components/modal/modal\";\nimport { map, filter, head, get, isEmpty } from \"lodash\";\n\nimport { Formik, Form, FormikProps, Field, FormikConfig } from \"formik\";\nimport * as Yup from \"yup\";\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { useAppDispatch } from \"../../../../../hooks/hooks\";\nimport CustomButton from \"../../../../reusable/customButton/customButton\";\nimport CustomTextField from \"../../../../reusable/customTextField/customTextField\";\nimport { fetchDoctorBusinessInfoAsync } from \"./businessInfoSlice\";\nimport { useState } from \"react\";\nimport \"./businessInfo.scss\";\nimport { useEffect } from \"react\";\nimport { closeSpinner, loadSpinner } from \"../../../../../reducres/reducers/spinner\";\nimport { Regex } from \"../../../../../utils/validations\";\nimport Toast from \"../../../../../reducres/reducers/toast\";\nimport { fetchProfileAsync } from \"../../../../profile/profileSlice\";\nimport { objectToFormData } from \"../../../../../utils/apiHelpers\";\nimport { dialCodes } from \"../../../../../utils/dialCodes/dialCodes\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport { City, Country, State } from \"country-state-city\";\nimport CustomPopup from \"../../../../reusable/customPopup/customPopup\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root1: {\n    display: \"block\",\n    margin: \"0 auto\",\n  },\n  title: {\n    padding: theme.spacing(2),\n    paddingTop: \"1px\",\n    color: \"#446354\",\n  },\n  title1: {\n    padding: theme.spacing(2),\n    color: \"#446354\",\n    fontSize: \"16px\",\n  },\n  title2: {\n    color: \"#A2D3F7\",\n    fontSize: \"15px\",\n    textDecoration: \"underline\",\n  },\n  textField: {\n    marginBottom: theme.spacing(2),\n  },\n  buttonBox: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    flexWrap: \"nowrap\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\",\n      flexWrap: \"wrap\",\n      \"& > div\": {\n        width: \"100%\",\n      },\n      \"& >div> button\": {\n        width: \"100%\",\n      },\n    },\n  },\n  linkCheckbox: {\n    alignItems: \"center\",\n  },\n  input: {\n    display: \"none\",\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n  typogarphy: {\n    textAlign: \"right\",\n  },\n  submitButton: {\n    marginTop: \"20px\",\n  },\n  selectEmpty: {\n    \"& > div > div > span\": {\n      // overflowX: \"scroll\",\n    },\n  },\n  border_fix: {\n    \"& > *\": {\n      borderColor: \"red !important\",\n    },\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    width: \"65px\",\n    minWidth: \"fit-content\",\n    \"& > *\": {\n      fontWeight: 700,\n      color: \"#085044\",\n    },\n  },\n  formControlSelect: {\n    margin: theme.spacing(1),\n    minWidth: 200,\n  },\n\n  uploadButton: {\n    \"& > div\": {\n      padding: \"5px !important\",\n    },\n  },\n}));\n\nexport interface IDoctorProfilebusinessInfo {\n  country_code: string;\n  card_no: any;\n  card_holder_name: any;\n  clinic_name: string;\n  clinic_email: string;\n  clinic_phone_number: string;\n  website_address: string;\n  tax_number: string;\n  registration_number: string;\n  registration_authority: string;\n  year: string;\n  bank_name: string;\n  sort_code: string;\n  swift_code: string;\n  fileUpload: any;\n  address_line: string;\n  address_line_1: string;\n  city: string;\n  state: string;\n  country: string;\n  postcode: string;\n  is_primary_acc: number;\n}\n\nconst BusinessInfo: ForwardRefRenderFunction<FormikConfig<any>, any> = ({\n  user_business_info,\n  user_payment_information,\n  country_code,\n}, ref: any) => {\n  let businessInfo: {\n    clinic_name: string;\n    clinic_email: string;\n    clinic_phone_number: string;\n    website_address: string;\n    tax_number: string;\n    registration_number: string;\n    registration_authority: string;\n  }[] = [\n      {\n        clinic_name: \"\",\n        clinic_email: \"\",\n        clinic_phone_number: \"\",\n        website_address: \"\",\n        tax_number: \"\",\n        registration_number: \"\",\n        registration_authority: \"\",\n      },\n    ];\n  let paymentsInfo: {\n    card_no: string;\n    card_holder_name: string;\n    bank_name: string;\n    sort_code: string;\n    swift_code: string;\n  }[] = [\n      {\n        card_no: \"\",\n        card_holder_name: \"\",\n        bank_name: \"\",\n        sort_code: \"\",\n        swift_code: \"\",\n      },\n    ];\n  let clinicInfo: {\n    address_line: string;\n    address_line_1: string;\n    city: string;\n    state: string;\n    country: string;\n    postcode: string;\n  }[] = [\n      {\n        address_line: \"\",\n        address_line_1: \"\",\n        city: \"\",\n        state: \"\",\n        country: \"\",\n        postcode: \"\",\n      },\n    ];\n\n  const classes = useStyles();\n  const dispatch = useAppDispatch();\n  const [age, setAge] = React.useState(\"\");\n  const [files, setFiles] = useState<any>(\"\");\n  const [checked, setChecked] = React.useState(true);\n  const [states, setState] = React.useState({\n    checkedA: true,\n    checkedB: true,\n  });\n\n  const [modalContent, setModalContent] = useState<any>({});\n  const [open, setOpen] = useState(false);\n  const handleModalClose = () => {\n    setOpen(!open);\n  };\n\n  const [type, setType] = useState(\"\");\n\n  const {\n    clinic_name = \"\",\n    clinic_email = \"\",\n    clinic_phone_number = \"\",\n    website_address = \"\",\n    tax_number = \"\",\n    registration_number = \"\",\n    registration_authority = \"\",\n    year = \"\",\n    fileUpload = \"\",\n  } = user_business_info || {};\n\n  const {\n    card_no = \"\",\n    card_holder_name = \"\",\n    bank_name = \"\",\n    sort_code = \"\",\n    swift_code = \"\",\n    is_primary_acc = 0,\n  } = user_payment_information || {};\n\n  const {\n    address_line = \"\",\n    address_line_1 = \"\",\n    city = \"\",\n    state = \"\",\n    country = \"\",\n\n    postcode = \"\",\n  } = user_business_info || {};\n\n  const [initialValues, setIntialState] = useState({\n    clinic_name,\n    country_code: user_business_info?.country_code,\n    clinic_email,\n    clinic_phone_number,\n    website_address,\n    tax_number,\n    fileUpload,\n    registration_number,\n    registration_authority,\n    year,\n    card_no,\n    card_holder_name,\n    bank_name,\n    sort_code,\n    swift_code,\n    address_line,\n    address_line_1,\n    city,\n    state,\n    country,\n    postcode,\n    is_primary_acc,\n  });\n\n  useEffect(() => {\n    setIntialState({\n      clinic_name,\n      clinic_email,\n      clinic_phone_number,\n      website_address,\n      country_code: user_business_info?.country_code,\n      tax_number,\n      fileUpload: user_business_info && user_business_info?.file_url,\n      registration_number,\n      registration_authority,\n      year,\n      card_no,\n      card_holder_name,\n      bank_name,\n      sort_code,\n      swift_code,\n      address_line,\n      address_line_1,\n      city,\n      state,\n      country,\n      postcode,\n      is_primary_acc,\n    });\n  }, []);\n\n  const saveDoctorbusinessProfileInfo = async (\n    data: IDoctorProfilebusinessInfo\n  ) => {\n    dispatch(loadSpinner());\n\n    let formData = new FormData();\n\n    let ob1 = {\n      clinic_name: data.clinic_name,\n      clinic_email: data.clinic_email,\n      clinic_phone_number: data.clinic_phone_number,\n      tax_number: data.tax_number,\n      registration_authority: data.registration_authority,\n      website_address: data.website_address,\n      registration_number: data.registration_number,\n      address_line: data.address_line,\n      address_line_1: data.address_line_1,\n      city: data.city,\n      country_code: data.country_code,\n      state: data.state,\n      country: data.country,\n      postcode: data.postcode,\n      file: data.fileUpload,\n    };\n\n    let payment = {\n      card_no: data.card_no,\n      account_no: data.card_no,\n      card_holder_name: data.card_holder_name,\n      bank_name: data.bank_name,\n      sort_code: parseInt(data.sort_code),\n      swift_code: data.swift_code,\n      is_primary_acc: data?.is_primary_acc,\n    };\n\n    for (let keys in ob1) {\n      if (typeof data[keys] !== \"object\") {\n        formData.append(keys, data[keys]);\n      }\n    }\n\n    formData = objectToFormData(payment, \"payment\", formData);\n\n    if (typeof data.fileUpload == \"object\") {\n      formData = objectToFormData(data.fileUpload, \"file\", formData);\n    } else {\n      formData = objectToFormData([], \"file\", formData);\n    }\n\n    dispatch(fetchDoctorBusinessInfoAsync(formData))\n      .then((result) => {\n        dispatch(fetchProfileAsync());\n        if (result.payload.length == 0) {\n          window.scrollTo(0, 0)\n          Toast.success(\"Details Saved Successfully\");\n        } else {\n          \n          setPopupProps({ title: 'Error', message: result?.payload?.response?.data?.message, primaryText: 'Ok', hideSecondaryButton: true })\n          // Toast.error(result?.payload?.response?.data?.message);\n        }\n\n        dispatch(closeSpinner());\n      })\n      .catch((err) => {\n        dispatch(closeSpinner());\n      });\n  };\n\n  useImperativeHandle(ref, () => ({\n    onTabChange: (change: () => void) => !dirty ? change() : setPopupProps({ title: 'Caution', message: 'You have unsaved changes. Are you sure you want to change the tab?', onYes: change })\n  }))\n\n  const [dirty, setDirty] = useState(false)\n\n  const [popupProps, setPopupProps] = useState<any>()\n\n  return (\n    <div ref={ref} className={`${classes.root1} doctor-profile-business-info-tab `}>\n      {popupProps && <CustomPopup visible={popupProps ? true : false} dismiss={() => setPopupProps(null)} {...popupProps} />}\n      {/* <AutoErrorMessage /> */}\n      <Formik\n        enableReinitialize\n        initialValues={initialValues}\n        onSubmit={(values: IDoctorProfilebusinessInfo, actions) => {\n          saveDoctorbusinessProfileInfo(values);\n        }}\n        validationSchema={Yup.object().shape({\n          clinic_name: Yup.string()\n            .required(\"Please enter clinic name\")\n            .nullable(),\n          clinic_email: Yup.string()\n            .required(\"Please enter clinic email\")\n            .email(\"Please enter a valid email\"),\n          clinic_phone_number: Yup.string()\n            .matches(Regex.Number, \"Please enter a valid Phone Number\")\n            .required(\"Please enter clinic phone number\")\n            .min(7, \"Clinic phone number must be atleast 7 digits.\")\n            .max(12),\n          website_address: Yup.string()\n            .matches(/[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/, 'Please insert a valid webstie address.')\n            .required(\"Please enter website Address\"),\n          registration_authority: Yup.string().required(\n            \"Please Add Registration Authority\"\n          ),\n          registration_number: Yup.string()\n            .matches(\n              Regex.RegNumber,\n              \"Please enter a valid registration Number\"\n            )\n            .required(\"Please enter Registration Number\"),\n\n          address_line: Yup.string().required(\"Please enter address Line 1\"),\n          city: Yup.string().required(\"Please enter city\"),\n          state: Yup.string().required(\"Please select state\"),\n          country: Yup.string().required(\"Please select country\"),\n          postcode: Yup.string()\n            .min(4, \"Post Code must be of atleast 4 numbers\")\n            .matches(Regex.post, \"Please enter a valid post code.\")\n            .required(\"Please enter post code\"),\n          tax_number: Yup.string().required(\"Please enter Tax Number\"),\n          bank_name: Yup.string().required(\"Please enter bank name\"),\n          card_no: Yup.string()\n            .matches(Regex.account_number, \"Please enter a valid account number\")\n            .required(\"Please Enter Account Number\"),\n          sort_code: Yup.string()\n            .matches(Regex.Number, \"Please enter a valid sort code\")\n            .required(\"Please enter sort code\"),\n          swift_code: Yup.string()\n            .matches(Regex.swiftcode, \"Please enter a valid swift code\")\n            .required(\"Please enter swift code\"),\n          card_holder_name: Yup.string().required(\n            \"Please Enter Account Holder Name\"\n          ),\n        })}\n      >\n        {(props: FormikProps<IDoctorProfilebusinessInfo>) => {\n          const {\n            values,\n            touched,\n            errors,\n            handleBlur,\n            handleChange,\n            handleSubmit,\n            setFieldValue,\n            isSubmitting,\n            dirty\n          } = props;\n          setDirty(dirty)\n          return (\n            <Form autoComplete=\"off\">\n              <Modal\n                open={open}\n                close={handleModalClose}\n                content={modalContent}\n                type={type}\n              />\n              <Grid container>\n                <Grid style={{ marginTop: -25 }} item lg={6} xs={6} className=\"office-address-grid\">\n                  <Typography className=\"office-address-title\">\n                    Business Information\n                  </Typography>\n                </Grid>\n                <Grid style={{ marginTop: -15 }} item lg={6} xs={6} className=\"footer-buttons\">\n                  <CustomButton\n                    onClick={() => {\n                      setTimeout(() => {\n                        if (Object.keys(errors).length > 0) setPopupProps({title: \"Required Fields\", message: 'There are required fields you need to fill out.',  primaryText: 'Ok', hideSecondaryButton: true  })\n                      }, 500)\n                      handleSubmit()\n                    }}\n                    variant=\"contained\"\n                    className=\"register-button\"\n                  >\n                    Save\n                  </CustomButton>\n                </Grid>\n              </Grid>\n              <Grid\n                container\n                direction=\"row\"\n                className=\"business-info-container\"\n              >\n                {businessInfo.map((item) => {\n                  return (\n                    <>\n                      <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                          <CustomTextField\n                            fullWidth\n                            className=\"login-text-field\"\n                            variant=\"outlined\"\n                            fieldName=\"Clinic Name\"\n                            name=\"clinic_name\"\n                            required\n                            id=\"clinic_name\"\n                            placeholder=\"Clinic Name\"\n                            value={values?.clinic_name}\n                            type=\"text\"\n                            helperText={\n                              errors.clinic_name && touched.clinic_name\n                                ? errors.clinic_name\n                                : \"\"\n                            }\n                            error={\n                              errors.clinic_name && touched.clinic_name\n                                ? true\n                                : false\n                            }\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                          />\n                        </Grid>\n                        <Grid item lg={3} xs={12}>\n                          <CustomTextField\n                            fullWidth\n                            className=\"login-text-field\"\n                            variant=\"outlined\"\n                            fieldName=\"Website Address\"\n                            required\n                            name=\"website_address\"\n                            id=\"website_address\"\n                            placeholder=\"Website Address\"\n                            value={values.website_address}\n                            type=\"text\"\n                            helperText={\n                              errors.website_address && touched.website_address\n                                ? errors.website_address\n                                : \"\"\n                            }\n                            error={\n                              errors.website_address && touched.website_address\n                                ? true\n                                : false\n                            }\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                          />\n                        </Grid>\n                        <Grid item lg={3} xs={12}>\n                          <CustomTextField\n                            fullWidth\n                            className=\"login-text-field\"\n                            variant=\"outlined\"\n                            fieldName=\"Clinic Email\"\n                            required\n                            name=\"clinic_email\"\n                            id=\"clinic_email\"\n                            placeholder=\"Clinic Email  \"\n                            value={values.clinic_email}\n                            type=\"text\"\n                            helperText={\n                              errors.clinic_email && touched.clinic_email\n                                ? errors.clinic_email\n                                : \"\"\n                            }\n                            error={\n                              errors.clinic_email && touched.clinic_email\n                                ? true\n                                : false\n                            }\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                          />\n                        </Grid>\n                        <Grid item lg={3} xs={12}>\n                          <CustomTextField\n                            fullWidth\n                            className=\"login-text-field\"\n                            variant=\"outlined\"\n                            fieldName=\"Clinic Phone Number\"\n\n                            name=\"clinic_phone_number\"\n                            id=\"input-with-dropdown\"\n                            // id={values.clinic_phone_number}\n                            placeholder=\"Clinic Phone number\"\n                            value={values.clinic_phone_number}\n                            required\n                            type=\"text\"\n                            helperText={\n                              errors.clinic_phone_number &&\n                                touched.clinic_phone_number\n                                ? errors.clinic_phone_number\n                                : \"\"\n                            }\n                            error={\n                              errors.clinic_phone_number &&\n                                touched.clinic_phone_number\n                                ? true\n                                : false\n                            }\n                            InputProps={{\n                              startAdornment: (\n                                <InputAdornment position=\"start\">\n                                  <FormControl className={classes.formControl}>\n                                    <Select\n                                      id=\"country_code\"\n                                      name=\"country_code\"\n                                      value={values.country_code || \"+1\"}\n                                      disableUnderline\n                                      onChange={handleChange}\n                                      error={\n                                        errors.country_code &&\n                                          touched.country_code\n                                          ? true\n                                          : false\n                                      }\n                                    >\n                                      {dialCodes.sort((a: any, b: any) => {\n                                        return a - b;\n                                      }).map((item) => {\n                                        return (\n                                          <MenuItem value={`+${item}`}>\n                                            {`+${item}`}\n                                          </MenuItem>\n                                        );\n                                      })}\n                                    </Select>\n                                  </FormControl>\n                                  <Typography>|</Typography>\n                                </InputAdornment>\n                              ),\n                            }}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                          />\n                        </Grid>\n                        <Grid item lg={3} />\n                        <Grid item lg={3} xs={12}>\n                          <CustomTextField\n                            fullWidth\n                            className=\"login-text-field\"\n                            variant=\"outlined\"\n                            fieldName=\"Registration Authority\"\n                            required\n                            name=\"registration_authority\"\n                            id=\"registration_authority\"\n                            placeholder=\"Registration Authority\"\n                            defaultValue={values.registration_authority}\n                            type=\"text\"\n                            helperText={\n                              errors.registration_authority &&\n                                touched.registration_authority\n                                ? errors.registration_authority\n                                : \"\"\n                            }\n                            error={\n                              errors.registration_authority &&\n                                touched.registration_authority\n                                ? true\n                                : false\n                            }\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                          />\n                        </Grid>\n                        <Grid item lg={5} xs={12}>\n                          <CustomTextField\n                            fullWidth\n                            className=\"login-text-field\"\n                            variant=\"outlined\"\n                            required\n                            name=\"registration_number\"\n                            id=\"registration_number\"\n                            placeholder=\"Registration Number\"\n                            value={values.registration_number}\n                            type=\"text\"\n                            fieldName=\"Registration Number\"\n                            helperText={\n                              errors.registration_number &&\n                                touched.registration_number\n                                ? errors.registration_number\n                                : \"\"\n                            }\n                            error={\n                              errors.registration_number &&\n                                touched.registration_number\n                                ? true\n                                : false\n                            }\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                          />\n                        </Grid>\n\n                        <Grid item lg={4} xs={12}>\n                          <CustomTextField\n                            fullWidth\n                            className={classes.uploadButton}\n                            id=\"file\"\n                            variant=\"outlined\"\n                            fieldName=\"File Upload\"\n                            name=\"fileUpload\"\n                            placeholder=\"Upload File\"\n                            value={\n                              values?.fileUpload?.name || values.fileUpload\n                            }\n                            InputProps={{\n                              endAdornment: (\n                                <>\n                                  <label htmlFor=\"filesss\">\n                                    <CustomButton\n                                      component=\"span\"\n                                      className=\"upload-button\"\n                                    >\n                                      upload\n                                      <input\n                                        id=\"filesss\"\n                                        type=\"file\"\n                                        hidden\n                                        name=\"fileUpload\"\n                                        accept=\"image/*,.pdf\"\n                                        className={classes.input}\n                                        multiple\n                                        onChange={async (event) => {\n                                          if (\n                                            event.target.files &&\n                                            event.target.files[0] &&\n                                            (event.target.files[0]?.type.split(\n                                              \"/\"\n                                            )[0] == \"image\" ||\n                                              event.target.files[0]?.type ==\n                                              \"application/pdf\")\n                                          ) {\n                                            setFieldValue(\n                                              \"fileUpload\" /* [\n                                              ...values.fileUpload, */,\n                                              event.target.files[0]\n                                            );\n                                          } else {\n                                            setPopupProps({ title: 'Error', message: \"Please upload a valid  file/image\", primaryText: 'Ok', hideSecondaryButton: true })\n                                            // Toast.error(\n                                            //   \"Please upload a valid  file/image\"\n                                            // );\n                                          }\n                                        }}\n                                      />\n                                    </CustomButton>\n                                  </label>\n                                </>\n                              ),\n                            }}\n                          />\n                        </Grid>\n                        <Grid\n                          item\n                          xs={12}\n                          className=\"no_progress_bar\"\n                          style={{\n                            // overflowX: \"scroll\",\n                            overflowY: \"hidden\",\n                            width: \"100%\",\n                            display: \"felx\",\n                          }}\n                        >\n                          {values.fileUpload !== null &&\n                            values.fileUpload !== \"\" && (\n                              <span\n                                style={{\n                                  position: \"relative\",\n                                  display: \"inline-block\",\n                                }}\n                              >\n                                {values?.fileUpload[\"type\"] !==\n                                  \"application/pdf\" ||\n                                  values?.fileUpload[\"type\"] == undefined ? (\n                                  <>\n                                    {values?.fileUpload.slice(-3) !== \"pdf\" ? (\n                                      <a\n                                        target=\"_blank\"\n                                        href={\n                                          typeof values?.fileUpload == \"string\"\n                                            ? values?.fileUpload\n                                            : values?.fileUpload !== null\n                                              ? URL.createObjectURL(\n                                                values?.fileUpload\n                                              )\n                                              : \"\"\n                                        }\n                                      >\n                                        <img\n                                          style={{\n                                            wordBreak: \"break-all\",\n                                            padding: \"10px\",\n                                            maxWidth: \"270px\",\n                                            width: \"270px\",\n                                            height: \"170px\",\n                                            borderRadius : 5,\n                                            border : '1px solid rgb(221, 221, 221)',\n                                            objectFit : 'cover'\n                                          }}\n                                          src={\n                                            typeof values?.fileUpload ==\n                                              \"string\"\n                                              ? values?.fileUpload\n                                              : values?.fileUpload !== null\n                                                ? URL.createObjectURL(\n                                                  values.fileUpload\n                                                )\n                                                : \"\"\n                                          }\n                                          height=\"150px\"\n                                          alt={\n                                            typeof values?.fileUpload ==\n                                              \"string\"\n                                              ? values?.fileUpload\n                                              : values?.fileUpload !== null\n                                                ? URL.createObjectURL(\n                                                  values.fileUpload\n                                                )\n                                                : \"\"\n                                          }\n                                        />\n                                      </a>\n                                    ) : (\n                                      <a\n                                        target=\"_blank\"\n                                        href={values?.fileUpload}\n                                      >\n                                        <img\n                                          style={{\n                                            wordBreak: \"break-all\",\n                                            padding: \"10px\",\n                                            maxWidth: \"270px\",\n                                            width: \"270px\",\n                                            height: \"170px\",\n                                            borderRadius : 5,\n                                            border : '1px solid rgb(221, 221, 221)',\n                                            objectFit : 'cover'\n                                          }}\n                                          src={\n                                            require(\"../../../../../utils/images/logoPDF.png\")\n                                              .default\n                                          }\n                                          height=\"150px\"\n                                          alt={values?.fileUpload}\n                                        />\n                                      </a>\n                                    )}\n                                  </>\n                                ) : (\n                                  <a\n                                    target=\"_blank\"\n                                    href={URL.createObjectURL(\n                                      values?.fileUpload\n                                    )}\n                                  >\n                                    <img\n                                      style={{\n                                        wordBreak: \"break-all\",\n                                        padding: \"10px\",\n                                        maxWidth: \"270px\",\n                                        width: \"270px\",\n                                        height: \"170px\",\n                                        borderRadius : 5,\n                                        border : '1px solid rgb(221, 221, 221)',\n                                        objectFit : 'cover'\n                                      }}\n                                      src={\n                                        require(\"../../../../../utils/images/logoPDF.png\")\n                                          .default\n                                      }\n                                      height=\"150px\"\n                                      alt={URL.createObjectURL(\n                                        values?.fileUpload\n                                      )}\n                                    />\n                                  </a>\n                                )}\n                                <Tooltip\n                                  title=\"Remove Image\"\n                                  className=\"remove_icon pointer\"\n                                >\n                                  <RemoveCircleIcon\n                                    onClick={() => {\n                                      handleModalClose();\n                                      setType(\"business document\");\n                                      setModalContent({\n                                        ...item,\n                                        setField: () =>\n                                          setFieldValue(`fileUpload`, \"\"),\n                                      });\n                                    }}\n                                  />\n                                </Tooltip>\n                              </span>\n                            )}\n                          {/* );\n                            })} */}\n                          {/* ) : (\n                                      <img src={item.document} alt=\"\" />\n                                    )} */}\n                        </Grid>\n                      </Grid>\n                    </>\n                  );\n                })}\n\n                <span\n                  style={{\n                    marginTop: \"30px\",\n                    marginBottom: \"30px\",\n                    width: \"100%\",\n                  }}\n                >\n                  <Grid item lg={12} xs={12} className=\"office-address-grid\">\n                    <Typography className=\"office-address-title\">\n                      Clinic Address\n                    </Typography>\n                  </Grid>\n                  {clinicInfo.map((item) => {\n                    return (\n                      <>\n                        <Grid\n                          container\n                          direction=\"row\"\n                          className=\"business-info-container\"\n                          spacing={2}\n                        >\n                          <Grid\n                            item\n                            lg={6}\n                            xs={12}\n                            className={classes.textField}\n                          >\n                            <CustomTextField\n                              fullWidth\n                              className=\"login-text-field\"\n                              variant=\"outlined\"\n                              name=\"address_line\"\n                              required\n                              id=\"address_line\"\n                              placeholder=\"Address Line 1\"\n                              fieldName=\"Address Line 1\"\n                              value={values.address_line}\n                              type=\"text\"\n                              helperText={\n                                errors.address_line && touched.address_line\n                                  ? errors.address_line\n                                  : \"\"\n                              }\n                              error={\n                                errors.address_line && touched.address_line\n                                  ? true\n                                  : false\n                              }\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                            />\n                          </Grid>\n                          <Grid\n                            item\n                            lg={6}\n                            xs={12}\n                            className={classes.textField}\n                          >\n                            <CustomTextField\n                              fullWidth\n                              className=\"login-text-field\"\n                              variant=\"outlined\"\n                              name=\"address_line_1\"\n                              id=\"address_line_1\"\n                              fieldName=\"Address Line 2\"\n                              placeholder=\"Address Line 2\"\n                              value={\n                                values.address_line_1 === \"null\"\n                                  ? \"\"\n                                  : values.address_line_1\n                              }\n                              type=\"text\"\n                              helperText={\n                                errors.address_line_1 && touched.address_line_1\n                                  ? errors.address_line_1\n                                  : \"\"\n                              }\n                              error={\n                                errors.address_line_1 && touched.address_line_1\n                                  ? true\n                                  : false\n                              }\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                            />\n                          </Grid>\n                          <Grid\n                            item\n                            lg={3}\n                            xs={12}\n                            className={classes.textField}\n                          >\n                            <FormControl fullWidth variant=\"outlined\">\n                              <label htmlFor={`country`}>\n                                Country <span style={{ color: \"red\" }}>*</span>\n                              </label>\n                              <Select\n                                labelId=\"demo-mutiple-checkbox-label\"\n                                id=\"country\"\n                                name=\"country\"\n                                className={` ${classes.selectEmpty} ${errors.country && classes.border_fix\n                                  } no-scrooll input-label no-scrooll`}\n                                onChange={async (e: any) => {\n                                  return (\n                                    handleChange(e),\n                                    setFieldValue(\"state\", \"\"),\n                                    setFieldValue(\"city\", \"\")\n                                  );\n                                }}\n                                error={\n                                  errors.country && touched.country\n                                    ? true\n                                    : false\n                                }\n                                value={values.country}\n                              >\n                                {Country.getAllCountries().map((item) => (\n                                  <MenuItem\n                                    key={item[\"countryCode\"]}\n                                    value={item.name}\n                                  >\n                                    <ListItemText primary={item.name} />\n                                  </MenuItem>\n                                ))}\n                              </Select>\n                              <FormHelperText>\n                                <span style={{ color: \"red\" }}>\n                                  {errors.country && touched.country\n                                    ? errors.country\n                                    : \"\"}\n                                </span>\n                              </FormHelperText>\n                            </FormControl>\n                          </Grid>\n                          <Grid\n                            item\n                            lg={3}\n                            xs={12}\n                            className={classes.textField}\n                          >\n                            <FormControl fullWidth variant=\"outlined\">\n                              <label htmlFor={`state`}>\n                                State <span style={{ color: \"red\" }}>*</span>\n                              </label>\n                              <Select\n                                labelId=\"demo-mutiple-checkbox-label\"\n                                name=\"state\"\n                                id=\"state\"\n                                className={` ${classes.selectEmpty} ${errors.state && classes.border_fix\n                                  } no-scrooll input-label `}\n                                onChange={(e) => handleChange(e)}\n                                value={values.state}\n                                error={\n                                  errors.state && touched.state ? true : false\n                                }\n                              >\n                                {State.getStatesOfCountry(\n                                  Country.getAllCountries().filter((items) => {\n                                    return items.name == values?.country;\n                                  })[0]?.isoCode\n                                )?.map((item) => {\n                                  return (\n                                    <MenuItem key={item.name} value={item.name}>\n                                      <ListItemText primary={item.name} />\n                                    </MenuItem>\n                                  );\n                                })}\n                              </Select>\n                              <FormHelperText>\n                                <span style={{ color: \"red\" }}>\n                                  {\" \"}\n                                  {errors.state && touched.state\n                                    ? errors.state\n                                    : \"\"}\n                                </span>\n                              </FormHelperText>\n                            </FormControl>\n                          </Grid>\n                          <Grid\n                            item\n                            lg={3}\n                            xs={12}\n                            className={classes.textField}\n                          >\n                            <label htmlFor={\"city\"}>\n                              City\n                              <span style={{ color: \"red\" }}>*</span>\n                            </label>\n\n                            <Select\n                              labelId=\"demo-mutiple-checkbox-label\"\n                              id=\"city\"\n                              name=\"city\"\n                              variant=\"outlined\"\n                              className={` ${classes.selectEmpty} ${errors.city && classes.border_fix\n                                } no-scrooll input-label `}\n                              onChange={(e) => {\n                                handleChange(e);\n                              }}\n                              value={values.city}\n                            >\n                              {City.getCitiesOfState(\n                                Country.getAllCountries().filter((item_1) => {\n                                  return item_1.name === values.country;\n                                })[0]?.isoCode,\n                                State.getAllStates().filter((items) => {\n                                  return items.name == values.state;\n                                })[0]?.isoCode\n                              ).map((item) => {\n                                return (\n                                  <MenuItem key={item.name} value={item.name}>\n                                    <ListItemText primary={item.name} />\n                                  </MenuItem>\n                                );\n                              })}\n                            </Select>\n                            {errors && errors.city && touched && touched.city && (\n                              <span style={{ color: \"red\" }}>\n                                <div className=\"field-error\">{errors.city}</div>\n                              </span>\n                            )}\n                          </Grid>\n\n                          <Grid\n                            item\n                            lg={3}\n                            xs={12}\n                            className={classes.textField}\n                          >\n                            <CustomTextField\n                              fullWidth\n                              className=\"login-text-field\"\n                              variant=\"outlined\"\n                              name=\"postcode\"\n                              id=\"postcode\"\n                              required\n                              fieldName=\"Zip code /Post code\"\n                              placeholder=\"Zip code /Post code\"\n                              value={values.postcode}\n                              type=\"text\"\n                              helperText={\n                                errors.postcode && touched.postcode\n                                  ? errors.postcode\n                                  : \"\"\n                              }\n                              error={\n                                errors.postcode && touched.postcode\n                                  ? true\n                                  : false\n                              }\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                            />\n                          </Grid>\n                        </Grid>\n                      </>\n                    );\n                  })}\n                </span>\n\n                <span\n                  style={{ border: \"1px solid #ddbcbc\", paddingLeft: \"20px\" }}\n                >\n                  <Grid item xs={12}>\n                    <Typography className=\"office-address-title\">\n                      Payment Information\n                    </Typography>\n                  </Grid>\n                  {/* <Paper className=\"work-experince-paper\"> */}\n                  {paymentsInfo.map((item) => {\n                    return (\n                      <>\n                        <Grid\n                          container\n                          direction=\"row\"\n                          className=\"business-info-container\"\n                          spacing={2}\n                        >\n                          <Grid\n                            item\n                            lg={3}\n                            xs={12}\n                            className={classes.textField}\n                          >\n                            <CustomTextField\n                              fullWidth\n                              required\n                              className=\"login-text-field\"\n                              variant=\"outlined\"\n                              name=\"tax_number\"\n                              id=\"tax_number\"\n                              placeholder=\"TAX Number\"\n                              fieldName=\"Tax Number\"\n                              value={values.tax_number}\n                              type=\"text\"\n                              helperText={\n                                errors.tax_number && touched.tax_number\n                                  ? errors.tax_number\n                                  : \"\"\n                              }\n                              error={\n                                errors.tax_number && touched.tax_number\n                                  ? true\n                                  : false\n                              }\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                            />\n                          </Grid>\n                          <Grid xs={6}></Grid>\n                          <Grid\n                            item\n                            lg={6}\n                            xs={12}\n                            className={classes.textField}\n                          >\n                            <CustomTextField\n                              fullWidth\n                              className=\"login-text-field\"\n                              variant=\"outlined\"\n                              name=\"card_no\"\n                              id=\"Bank_Account_Number\"\n                              placeholder=\"Bank Account Number or IBAN\"\n                              fieldName=\"Bank Account Number\"\n                              required\n                              value={values.card_no}\n                              type=\"text\"\n                              helperText={\n                                errors.card_no && touched.card_no\n                                  ? errors.card_no\n                                  : \"\"\n                              }\n                              error={\n                                errors.card_no && touched.card_no ? true : false\n                              }\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                            />\n                          </Grid>\n                          <Grid\n                            item\n                            lg={3}\n                            xs={12}\n                            className={classes.textField}\n                          >\n                            <CustomTextField\n                              fullWidth\n                              className=\"login-text-field\"\n                              variant=\"outlined\"\n                              name=\"card_holder_name\"\n                              id=\"Account Holder Name\"\n                              placeholder=\"Account Holder Name\"\n                              fieldName=\"Account Holder Name\"\n                              required\n                              value={values.card_holder_name}\n                              type=\"text\"\n                              helperText={\n                                errors.card_holder_name &&\n                                  touched.card_holder_name\n                                  ? errors.card_holder_name\n                                  : \"\"\n                              }\n                              error={\n                                errors.card_holder_name &&\n                                  touched.card_holder_name\n                                  ? true\n                                  : false\n                              }\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                            />\n                          </Grid>\n                          <Grid\n                            item\n                            lg={3}\n                            xs={12}\n                            className={classes.textField}\n                          >\n                            <CustomTextField\n                              fullWidth\n                              className=\"login-text-field\"\n                              variant=\"outlined\"\n                              name=\"bank_name\"\n                              id=\"bank_name\"\n                              placeholder=\"Bank Name\"\n                              fieldName=\"Bank Name\"\n                              required\n                              value={values.bank_name}\n                              type=\"text\"\n                              helperText={\n                                errors.bank_name && touched.bank_name\n                                  ? errors.bank_name\n                                  : \"\"\n                              }\n                              error={\n                                errors.bank_name && touched.bank_name\n                                  ? true\n                                  : false\n                              }\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                            />\n                          </Grid>\n                          <Grid\n                            item\n                            lg={3}\n                            xs={12}\n                            className={classes.textField}\n                          >\n                            <CustomTextField\n                              fullWidth\n                              className=\"login-text-field\"\n                              variant=\"outlined\"\n                              name=\"sort_code\"\n                              id=\"sort_code\"\n                              fieldName=\"Sort Code or Routing Number\"\n                              placeholder=\"Sort Code or Routing Number\"\n                              value={values.sort_code}\n                              type=\"number\"\n                              helperText={\n                                errors.sort_code && touched.sort_code\n                                  ? errors.sort_code\n                                  : \"\"\n                              }\n                              error={\n                                errors.sort_code && touched.sort_code\n                                  ? true\n                                  : false\n                              }\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                            />\n                          </Grid>\n                          <Grid\n                            item\n                            lg={3}\n                            xs={12}\n                            className={classes.textField}\n                          >\n                            <CustomTextField\n                              fullWidth\n                              className=\"login-text-field\"\n                              variant=\"outlined\"\n                              name=\"swift_code\"\n                              id=\"swift_code\"\n                              fieldName=\"Swift Code\"\n\n                              placeholder=\"swift Code\"\n                              value={values.swift_code}\n                              type=\"text\"\n                              helperText={\n                                errors.swift_code && touched.swift_code\n                                  ? errors.swift_code\n                                  : \"\"\n                              }\n                              error={\n                                errors.swift_code && touched.swift_code\n                                  ? true\n                                  : false\n                              }\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                            />\n                          </Grid>\n                          <Grid item xs={12} className=\"checkbox-grid-item\">\n                            <Checkbox\n                              checked={\n                                values.is_primary_acc == 0 ? false : true\n                              }\n                              name=\"is_primary_acc\"\n                              onChange={(e) => {\n                                setFieldValue(\n                                  e.target.name,\n                                  e.target.checked == true ? 1 : 0\n                                );\n                              }}\n                              inputProps={{ \"aria-label\": \"\" }}\n                            />\n                            <Typography>\n                              check if this your primary account\n                            </Typography>\n                          </Grid>\n                          {/* <Grid item xs={12} className=\"checkbox-grid-item \">\n                            <div\n                              style={{ marginRight: \"0\", marginLeft: \"auto\" }}\n                            >\n                              <CustomButton className=\"save-account-details-button px-4\">\n                                save account details\n                              </CustomButton>\n                            </div>\n                          </Grid> */}\n                        </Grid>\n                      </>\n                    );\n                  })}\n                </span>\n\n                {/* </Paper> */}\n                {/* <Grid container> */}\n                <Grid item xs={12}>\n                  <Box style={{ display: 'flex', alignItems: 'center', }} className={classes.buttonBox}>\n                    <div style={{ width: 'auto', marginLeft: 'auto', marginRight: 30, paddingTop: 0, paddingBottom: 0, marginBottom: 0 }} className={'work-inner-box'} >\n                      <p >Fields with \"<p style={{ color: 'red', display: 'inline' }} > * </p>\" are compulsory for profile verification</p>\n                    </div>\n                    <CustomButton\n                      onClick={() => {\n                        setTimeout(() => {\n                          if (Object.keys(errors).length > 0) setPopupProps({ message: 'There are required fields you need to fill out.', title: \"Required Fields\", hideSecondaryButton: true, primaryTest: 'Ok' })\n                        }, 500)\n                        handleSubmit()\n                      }}\n                      variant=\"contained\"\n                      className=\"register-button\"\n                    >\n                      Save\n                    </CustomButton>\n                    {/* <CustomButton\n                    variant=\"contained\"\n                    className=\"register-button\"\n                  >\n                    Get Verified\n                  </CustomButton> */}\n                  </Box>\n                </Grid>\n              </Grid>\n            </Form>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n};\n\nexport default React.forwardRef(BusinessInfo);\n","import { postNormalized } from \"../../../../../utils/apiHelpers\";\n\nexport const fetchDoctorVisibleInfo = (payload:any) => postNormalized(\"save-visible-profile\", payload)\n.then(response => response.data)\n.catch(error => error);","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../../../../store\";\nimport { fetchDoctorVisibleInfo } from \"./visibleProfileAPI\";\n\ninterface IVisibleState {\n  loading: boolean;\n  visibleInfoUser: any;\n}\n\nexport const initialState = {\n  loading: true,\n  visibleInfoUser: [],\n};\nexport const fetchDoctorVisibleInfoAsync = createAsyncThunk(\n  \"DoctorVisibleInfo/fetchDoctorVisibleInfo\",\n  async (payload: any, { rejectWithValue }) => {\n    try {\n      const response = await fetchDoctorVisibleInfo(payload);\n      if (response.statusCode !== 200) {\n        return rejectWithValue(response);\n      }\n\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const doctorProfessionalInfoSlice = createSlice({\n  name: \"DoctorProfessionalInfo\",\n  initialState,\n  reducers: {\n    clearStoreData: (state) => {\n      state = initialState;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchDoctorVisibleInfoAsync.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(fetchDoctorVisibleInfoAsync.rejected, (state) => {\n        state.loading = false;\n      })\n      .addCase(fetchDoctorVisibleInfoAsync.fulfilled, (state, action) => {\n        state.loading = false;\n\n        state.visibleInfoUser = action.payload;\n      });\n  },\n});\n\nexport const { clearStoreData } = doctorProfessionalInfoSlice.actions;\n\nexport const selectDoctorProfessionalInfo = (state: RootState) =>\n  state.doctorProfessionalInfo;\n\nexport default doctorProfessionalInfoSlice.reducer;\n","import React, { useState, useEffect } from \"react\";\nimport { Grid, Typography, TextareaAutosize, Box } from \"@material-ui/core\";\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { withRouter } from \"react-router-dom\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\n\nimport Rating from \"@material-ui/lab/Rating\";\nimport Modal from \"../../../../../components/modal/modal\";\n\nimport { Formik, Form, FormikProps, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport { map, get } from \"lodash\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport CustomButton from \"../../../../reusable/customButton/customButton\";\nimport \"./visibleProfileInfo.scss\";\nimport CustomTextField from \"../../../../reusable/customTextField/customTextField\";\nimport { useAppDispatch } from \"../../../../../hooks/hooks\";\nimport { fetchChangeProfilePictureAsync } from \"../personalTab/personalInfoSlice\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport { fetchDoctorVisibleInfoAsync } from \"./visibleProfileSlice\";\nimport { BaseUrl, objectToFormData } from \"../../../../../utils/apiHelpers\";\nimport Toast from \"../../../../../reducres/reducers/toast\";\nimport { Regex } from \"../../../../../utils/validations\";\nimport {\n  closeSpinner,\n  loadSpinner,\n} from \"../../../../../reducres/reducers/spinner\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport { fetchProfileAsync } from \"../../../../profile/profileSlice\";\nimport CustomPopup from \"../../../../reusable/customPopup/customPopup\";\nimport Auth from \"../../../../../protectedRoutes/Auth\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root1: {\n    display: \"block\",\n    margin: \"0 auto\",\n  },\n  title: {\n    padding: theme.spacing(2),\n    paddingTop: \"1px\",\n    color: \"#085044\",\n  },\n  title1: {\n    padding: theme.spacing(2),\n    color: \"#085044\",\n    fontSize: \"16px\",\n  },\n  title2: {\n    color: \"#A2D3F7\",\n    fontSize: \"15px\",\n    textDecoration: \"underline\",\n  },\n  textField: {\n    marginBottom: theme.spacing(2),\n  },\n  linkCheckbox: {\n    alignItems: \"center\",\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n  typogarphy: {\n    textAlign: \"right\",\n  },\n  submitButton: {\n    marginTop: \"20px\",\n  },\n  input: {\n    display: \"none\",\n  },\n  selectEmpty: {},\n  formControl: {\n    margin: theme.spacing(1),\n    width: \"50px\",\n  },\n  formControlSelect: {\n    margin: theme.spacing(1),\n    minWidth: 200,\n  },\n  fixWrap: {\n    flexWrap: \"nowrap\",\n    [theme.breakpoints.down(\"xs\")]: {\n      flexWrap: \"wrap-reverse\",\n    },\n  },\n  fix_pad: {\n    \"& > span\": {\n      paddingTop: \"0px\",\n      paddingLeft: \"30px\",\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      textAling: \"unset !important\",\n      \"& > span\": {\n        paddingTop: \"20px\",\n        paddingLeft: \"0px\",\n      },\n    },\n  },\n  fix_margin: {\n    [theme.breakpoints.up(\"md\")]: {\n      marginRight: \"10px !important\",\n    },\n  },\n}));\n\nexport interface portfolio {\n  title: any;\n  document: any;\n}\n\nlet portfolio_interface: {\n  job_title: any;\n\n  file: any;\n}[] = [\n    {\n      job_title: \"\",\n\n      file: [{ file: \"\", description: \"\" }],\n    },\n  ];\n\nlet clinic_interface: [\n  {\n    id : any\n    file: any;\n    description: any;\n  }\n][] = [[{ file: \"\", description: \"\" , id:111111111}]];\n\nconst VisibleProfileInfo: React.FC<any> = ({\n  user_details,\n  history,\n  file_url,\n  doctor_portfolio,\n  doctorHospitalClinic,\n  doctor_hospital_clinic,\n  name,\n}) => {\n  const [initialValuesInit, setInitialValues] = useState({\n    file_url: file_url,\n    name: name || \"\",\n    introduction_title: user_details?.introduction_title || \"\",\n    professional_career_desc: user_details?.professional_career_desc || \"\",\n    portfolio: [].length > 0 ? [] : portfolio_interface,\n    clinic: [].length > 0 ? [] : clinic_interface,\n    feedbacks: [].length > 0 ? [] : [],\n    speciality:\n      user_details?.speciality && JSON.parse(user_details?.speciality),\n  });\n\n  const [windowWIdth, setWindowWidt] = useState(0);\n\n  useEffect(() => {\n    window.scrollTo(0, 0)\n    window.addEventListener(\"resize\", () => {\n      if (window.innerWidth <= 400) {\n        setWindowWidt(window.innerWidth);\n      }\n      if (window.innerWidth >= 400) {\n        if (windowWIdth < 400) {\n          setWindowWidt(99999);\n          return;\n        }\n      }\n    });\n    setWindowWidt(window.innerWidth);\n  }, [window.innerWidth]);\n\n  const classes = useStyles();\n  const defPortfolioFiles = map(doctor_portfolio, (item) => {\n    return { url: item.file_url, description: item.description };\n  });\n  const defhospitalFiles = map(doctor_hospital_clinic, (item) => {\n    return { url: item.file_url, description: item.description };\n  });\n  const dispatch = useAppDispatch();\n  const [selectedFile, setSelectedFile] = useState<any>(\"\");\n  const [preview, setPreview] = useState<any>(\"\");\n  const [introductionTitle, setIntroductionTitle] = useState(\n    get(user_details, \"introduction_title\", \"\")\n  );\n\n  const [port_value, setPortvalue] = useState([\"\"]);\n  const [port_file, setPortfile] = useState<any>([\"\"]);\n\n  useEffect(() => { }, [port_value, port_file]);\n  const [Clinic_value, setClinicvalue] = useState([\"\"]);\n  const [Clinic_File, setClinicFile] = useState<any>([\"\"]);\n\n  useEffect(() => {\n    let portfolio = doctor_portfolio?.map((item, index) => {\n      return {\n        id: item.id,\n        user_id: item.user_id,\n        job_title: item.job_title,\n        file: item.doctor_portfolio_images.map((item_item) => {\n          return { ...item_item, file: item_item.file_url };\n        }),\n      };\n    });\n\n    let newfolio = portfolio;\n\n    newfolio?.map((item, index) => {\n      return {\n        ...item,\n        file: item.file.push({ file: \"\", description: \"\" }),\n      };\n    });\n\n    let clinic = doctorHospitalClinic?.map((item, index) => {\n      if(item.hospital_clinic_images.length > 0){\n        return item.hospital_clinic_images.map((item_item) => {\n          return { ...item_item, mainID : item.id, file: item_item.file_url };\n        });\n      } else return [{...item,mainID :item.id, file : item.file || \"\"}]\n    \n    });\n\n    console.log ('-------------------', clinic)\n\n    if (newfolio.length > 0) {\n      setPortvalue(\n        newfolio.map((item) => {\n          return \"\";\n        })\n      );\n      setPortfile(\n        newfolio.map((item) => {\n          return \"\";\n        })\n      );\n    }\n\n    let clinicForm: any = [];\n    clinic &&\n      clinic?.map(async (item, index) => {\n        if (clinic.length > clinicForm.lenght) {\n          clinicForm.push(...clinicForm, \"\");\n        }\n        // return item.push({ file: \"\", description: \"\" });\n      });\n\n    if (clinic.length > 0) {\n      setClinicvalue(\n        clinic.map((item) => {\n          return \"\";\n        })\n      );\n      setClinicFile(\n        clinic.map((item) => {\n          return \"\";\n        })\n      );\n    }\n\n    setInitialValues({\n      file_url: file_url,\n      name: name || \"\",\n\n      introduction_title: user_details?.introduction_title || \"\",\n      professional_career_desc: user_details?.professional_career_desc || \"\",\n      portfolio:\n        newfolio && newfolio?.length > 0 ? newfolio : portfolio_interface,\n      clinic: clinic && clinic?.length > 0 ? clinic : clinic_interface,\n      feedbacks: [].length > 0 ? [] : [],\n      speciality:\n        user_details?.speciality && JSON.parse(user_details?.speciality),\n    });\n  }, [\n    user_details,\n    history,\n    file_url,\n    doctor_portfolio,\n    doctor_hospital_clinic,\n  ]);\n\n  const [value, setValue] = React.useState<number | null>(2);\n\n  const onSelectFile = (e) => {\n    if (e.target.files[0].type.split(\"/\")[0] === \"image\") {\n      if (!e.target.files || e.target.files.length === 0) {\n        setSelectedFile(undefined);\n        return;\n      }\n      setSelectedFile(e.target.files[0]);\n      const formData = new FormData();\n      formData.append(\"image\", e.target.files[0]);\n      dispatch(fetchChangeProfilePictureAsync(formData));\n    } else {\n      setPopupProps({ title: 'Error', message: \"File must be an image\", primaryText: 'Ok', hideSecondaryButton: true })\n      // Toast.error(\"File must be an Image.\");\n    }\n  };\n\n  const handleSaveClick = (values) => {\n    try {\n      let formData = new FormData();\n\n      formData.append(\"introduction_title\", values?.introduction_title);\n\n      formData.append(\n        \"professional_career_desc\",\n        values?.professional_career_desc\n      );\n\n      formData = objectToFormData(\n        values?.portfolio.map((item) => {\n          return {\n            job_title: item.job_title == null ? \"\" : item.job_title,\n            id: item.id,\n          };\n        }),\n        \"portfolio\",\n        formData\n      );\n\n      let port = values?.portfolio.map((item) => {\n        return [...item.file];\n      });\n      let new_port: any = [];\n\n      port.filter((item, index) => {\n        return item.filter((item_item, index_index) => {\n          if (/* typeof item_item.file !== \"string\" && */ item_item !== \"\") {\n            if (new_port[index] == undefined) {\n              if (item_item.file !== \"\") {\n                new_port.push([item_item]);\n              }\n            } else {\n              if (item_item.file !== \"\") {\n                new_port[index].push(item_item);\n              }\n            }\n            return item;\n          }\n        });\n      });\n      if (new_port.length > 0) {\n        formData = objectToFormData(new_port, \"portfolio\", formData);\n      }\n\n      let clinic = [];\n\n      values.clinic.filter(async (item, index) => {\n        await item.filter((item_item) => {\n          if (\n            item_item.file !== \"\" /* && typeof item_item.file !== \"string\" */\n          ) {\n            if (clinic[index] == undefined) {\n              if (item_item.file !== \"\") {\n                clinic.push([item_item]);\n              }\n            } else {\n              if (item_item.file !== \"\") {\n                clinic[index].push(item_item);\n              }\n            }\n          }\n          return item_item;\n        });\n      });\n\n      dispatch(loadSpinner());\n      if (clinic.length > 0) {\n        formData = objectToFormData(clinic, \"hospitals\", formData);\n      }\n      dispatch(fetchDoctorVisibleInfoAsync(formData)).then(async (result) => {\n        if (result?.payload.length == 0) {\n          Toast.success(\"Visible profile info saved successfully\");\n          await dispatch(fetchProfileAsync());\n          dispatch(closeSpinner());\n        }\n        if (result?.payload?.response?.data?.statusCode == 400) {\n          setPopupProps({ title: 'Error', message: result?.payload?.response?.data?.message, primaryText: 'Ok', hideSecondaryButton: true })\n          // Toast.error(result?.payload?.response?.data?.message);\n          dispatch(closeSpinner());\n        }\n      });\n    } catch (error) { }\n  };\n\n  const [modalContent, setModalContent] = useState<any>({});\n  const [open, setOpen] = useState(false);\n  const handleModalClose = () => {\n    setOpen(!open);\n  };\n\n  const [popupProps, setPopupProps] = useState<any>()\n  const [type, setType] = useState(\"\");\n\n  return (\n    <div className=\"profile-visible-tab\">\n      {popupProps && <CustomPopup visible={popupProps ? true : false} dismiss={() => setPopupProps(null)} {...popupProps} />}\n      <Formik\n        enableReinitialize={true}\n        initialValues={initialValuesInit}\n        onSubmit={(values: any, actions) => {\n          window.scrollTo(0, 0)\n          console.log(values)\n          handleSaveClick(values);\n        }}\n        validationSchema={Yup.object().shape({\n          introduction_title: Yup.string()\n            .matches(Regex.Intro, \"Please enter a valid title\")\n            .required(\"Please enter title\"),\n          professional_career_desc: Yup.string().required(\n            \"Please enter Introduction/Description\"\n          ),\n        })}\n      >\n        {(props: FormikProps<any>) => {\n          const {\n            values,\n            touched,\n            errors,\n            handleBlur,\n            handleChange,\n            handleSubmit,\n            isSubmitting,\n            setFieldValue,\n          } = props;\n          return (\n            <Form autoComplete=\"off\" className=\"profile-visible-tab\">\n              <Modal\n                open={open}\n                type={type}\n                close={handleModalClose}\n                content={modalContent}\n              />\n              <Grid container className=\"visible-grid-container\" spacing={4}>\n                <Grid className=\"text-contenting\" xs={12} item style={{paddingBottom:\"0px\", marginTop : -15, marginRight : -15}}> \n                  <span className=\"visible-title\">Public Profile</span>\n\n                  <CustomButton\n                  style={{marginRight:0}}\n                    type=\"submit\"\n                    className=\"doctor-profile-change-button\"\n                  >\n                    save\n                  </CustomButton>\n\n                </Grid>\n                <Grid item xs={12} style={{paddingTop:\"0px\"}}>\n                  <Box\n                    display=\"flex\"\n                    flexWrap=\"wrap\"\n                    justifyContent=\"space-between\"\n                  >\n                    <span\n                      style={{\n                        display: \"flex\",\n                        flexWrap: \"wrap\",\n                        justifyContent: \"space-between\",\n                        alignItems: \"flex-start\",\n                        width: \"100%\",\n                      }}\n                    >\n                      <span\n                        className={`max-content ${classes.fix_pad}`}\n                        style={{\n                          display: \"flex\",\n                          width: \"100%\",\n                          flexWrap: \"wrap\",\n                        }}\n                      >\n                        {selectedFile ? (\n                          <img style={{objectFit : 'contain', borderWidth : 1, borderColor : '#ddd', borderStyle : 'solid', borderRadius : 5}}\n                            src={\n                              selectedFile && URL.createObjectURL(selectedFile)\n                            }\n                            className=\"visible-image\"\n                            height=\"187px\"\n                            width=\"200px\"\n                          />\n                        ) : (\n                          <>\n                            <img style={{objectFit : 'contain', borderWidth : 1, borderColor : '#ddd', borderStyle : 'solid', borderRadius : 5}}\n                                //  style={{ objectFit: 'cover' }}\n                              src={values.file_url}\n                              className=\"visible-image\"\n                              height=\"187px\"\n                              width=\"200px\"\n                            />\n                          </>\n                        )}\n                        <span className={`pl-5   title_info_box`}>\n                          <Typography\n                            className=\"heading pb-x\"\n\n                          >\n                            {values.name.charAt(0).toUpperCase() + values.name.slice(1) }\n                          </Typography>\n                          <Box\n                            display=\"flex\"\n                            alignItems=\"baseline\"\n                            style={{ marginBottom: \"3px\", alignItems: \"center\" }}\n                          >\n                            <Typography\n                              variant=\"h6\"\n                              className=\"typo-1\"\n                            >\n                              Response Rate:\n                            </Typography>\n                            <Typography>2 Days</Typography>\n                          </Box>\n                          {/* </Typography> */}\n                          <Typography variant=\"h5\">\n                            <Box display=\"flex\" flexWrap=\"wrap\">\n                              <Typography\n                                variant=\"h6\"\n                                className=\"typo-1\"\n                              >\n                                FeedBacks:\n                              </Typography>\n                              <Typography>4.8</Typography>\n\n                              <span className=\"feedback_arrange\">\n                                <Typography className=\"pl-2\">\n                                  {\" \"}\n                                  {/* {[...Array(5)].map((star, i) => {\n                                    return (\n                                      <span\n                                        style={{ paddingRight: \"3px\" }}\n                                        className={\n                                          i < 4 - 1\n                                            ? \"star fs-25 golden\"\n                                            : \"star fs-25\"\n                                        }\n                                      >\n                                        &#9733;\n                                      </span>\n                                    );\n                                  })} */}\n                                  <Rating\n                                    name=\"simple-controlled\"\n                                    value={value}\n                                    disabled\n                                    className=\"rating\"\n                                    onChange={(event, newValue) => {\n                                      setValue(newValue);\n                                    }}\n                                  />\n                                </Typography>\n                                <Typography style={{ paddingLeft: \"5px\" }}>\n                                  (205)\n                                </Typography>\n                              </span>\n                            </Box>\n                          </Typography>\n                          <Typography\n                            variant=\"h6\"\n                            className=\"speciality\"\n                            style={{\n                              maxWidth: \"600px\",\n                              wordBreak: \"break-word\",\n                            }}\n                          >\n                            {/* {Cardiology and Hearth Specialist} */}\n                            {values?.speciality?.map((item, index) => {\n                              return (\n                                <span>\n                                  {index == values.speciality.length - 1 &&\n                                    \"and\"}{\" \"}\n                                  {item.label}{\" \"}\n                                </span>\n                              );\n                            })}\n                          </Typography>\n\n                          <Typography style={{ float: \"left\" }}>\n\n                            <label htmlFor=\"contained-button-file\">\n                              <CustomButton component=\"span\"\n                                className=\"doctor-profile-change-button\"\n                              >\n                                Upload Picture\n                                <input\n                                  hidden\n                                  id=\"contained-button-file\"\n                                  type=\"file\"\n                                  accept=\"image/*\"\n                                  onChange={onSelectFile}\n                                />\n                              </CustomButton>\n                            </label>\n                          </Typography>\n\n\n\n                          {/* </Grid> */}\n                        </span>\n                      </span>\n                      {/* <label htmlFor=\"contained-button-file\">\n                        <CustomButton\n                          component=\"span\"\n                          className=\"doctor-profile-change-button\"\n                        >\n                          Upload Picture\n                          <input\n                            hidden\n                            id=\"contained-button-file\"\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={onSelectFile}\n                          />\n                        </CustomButton>\n                      </label> */}\n                    </span>\n                  </Box>\n                </Grid>\n                <Grid item lg={12} xs={12}>\n                  <span className=\"title_introduction\">Introduction Title</span>\n                  <CustomTextField   \n                    style={{width:\"50%\"}}     \n                           \n                    className=\"login-text-field my-cls\"\n                    variant=\"outlined\"\n                    name=\"introduction_title\"\n                    placeholder=\"Introduction Title\"\n                    value={values?.introduction_title}\n                    onChange={\n                      /* (e) => setIntroductionTitle(e.target.value) */ handleChange\n                    }\n                    helperText={\n                      errors &&\n                        errors.introduction_title &&\n                        touched &&\n                        touched.introduction_title\n                        ? errors.introduction_title\n                        : \"\"\n                    }\n                    error={\n                      errors?.introduction_title && touched?.introduction_title\n                        ? true\n                        : false\n                    }\n                  />\n                </Grid>\n                <Grid item lg={12} xs={12}>\n                  <span className=\"title_introduction\">Introduction</span>\n                  <TextareaAutosize\n                    style={{\n                      fontSize: \"16px\",\n                      fontWeight: 600,\n                      color: \"#085044\",\n                      marginBottom: \"10px\",\n                      marginTop: \"0px\"\n                    }}\n                    className={`text-area-field ${errors &&\n                      errors.professional_career_desc &&\n                      touched &&\n                      touched.professional_career_desc &&\n                      \"error_div\"\n                      }`}\n                    aria-label=\"minimum height\"\n                    rowsMin={4}\n                    name=\"professional_career_desc\"\n                    value={values?.professional_career_desc}\n                    onChange={handleChange}\n                  />\n                  {errors &&\n                    errors &&\n                    errors.professional_career_desc &&\n                    touched &&\n                    touched.professional_career_desc && (\n                      <div\n                        className=\"field-error\"\n                        style={{ lineHeight: \"0.1\", color: \"#f44336\" }}\n                      >\n                        {errors.professional_career_desc}\n                      </div>\n                    )}\n                  {/* <CustomButton\n                    component=\"span\"\n                    fullWidth\n                    className=\"upload-button\"\n                  >\n                    Save Image\n                  </CustomButton> */}\n                </Grid>\n                <Grid item lg={12} xs={12} style={{marginRight:25}} className=\"custom-save-button\">\n                  <CustomButton\n   \n                    type=\"submit\"\n                    fullWidth\n                    className=\"doctor-profile-change-button\"\n                  >\n                    save Introduction\n                  </CustomButton>\n                </Grid>\n                <hr style={{ width: \"98%\" }} />\n\n                <FieldArray\n                  name=\"portfolio\"\n                  render={({ insert, remove, push }) => (\n                    <>\n                      <Grid item xs={12} className=\"office-address-grid\">\n                        <Box\n                          display=\"flex\"\n                          alignItems=\"center\"\n                          justifyContent=\"space-between\"\n                          flexWrap=\"wrap\"\n                          flexShrink=\"\"\n                        >\n                          <Typography className=\"visible-title\">\n                            Portfolio\n                          </Typography>\n                          {/* </Grid> */}\n                          {/* <Grid item lg={6} xs={12} className=\"custom-save-button\"> */}\n\n\n                          {windowWIdth > 460 ? (\n                            <CustomButton\n                              style={{\n                                padding: \"16px 32px 15px 33px\",\n                                borderRadius: \"21px\",\n                                backgroundColor: \"#085044\",marginRight:25\n                              }}\n                              onClick={() => {\n                                insert(0,{\n                                  job_title: \"\",\n                                  file: [{ file: \"\", description: \"\" }],\n                                });\n                                const newPort = port_value;\n                                const newFile = port_file;\n                                setPortvalue([...newPort, \"\"]);\n                                setPortfile([...newFile, \"\"]);\n                              }}\n                            >\n                              Add new Job\n                            </CustomButton>\n                          ) : (\n                            <AddCircleIcon\n                              style={{ fontSize: \"30px\" }}\n                              onClick={() => {\n                                push({\n                                  job_title: \"\",\n                                  file: [{ file: \"\", description: \"\" }],\n                                });\n                                const newPort = port_value;\n                                const newFile = port_file;\n                                setPortvalue([...newPort, \"\"]);\n                                setPortfile([...newFile, \"\"]);\n                              }}\n                            />\n                          )}\n\n                        </Box>\n                      </Grid>\n                      {values?.portfolio.map((item, index) => {\n                        const portCheck = item.file.length;\n                        return (\n                          <div style={{ width: 'calc(100% - 20px)', marginTop: 15, marginLeft: '10px' }} className=\"work-inner-box\">\n                            {/* {index > 0 && (\n                              <Grid item xs={12} style={{ textAlign: \"right\" }}>\n                                {windowWIdth > 460 ? (\n                                  <>\n                                    <CustomButton\n                                      style={{\n                                        padding: \"16px 32px 15px 33px\",\n                                        borderRadius: \"21px\",\n                                        backgroundColor: \"#085044\",\n                                      }}\n                                      onClick={() => {\n                                        handleModalClose();\n                                        setType(`Job ${index}.`);\n                                        setModalContent({\n                                          setField: () => {\n                                            remove(index);\n                                          },\n                                        });\n                                      }}\n                                    >\n                                      Remove Job\n                                    </CustomButton>\n                                  </>\n                                ) : (\n                                  <Tooltip\n                                    title=\"Remove Image\"\n                                    className=\"pointer\"\n                                  >\n                                    <RemoveCircleIcon\n                                      style={{ fontSize: \"30px\" }}\n                                      onClick={() => {\n                                        handleModalClose();\n                                        setType(`Job ${index}.`);\n                                        setModalContent({\n                                          setField: () => {\n                                            remove(index);\n                                          },\n                                        });\n                                      }}\n                                    />\n                                  </Tooltip>\n                                )}\n                              </Grid>\n                            )} */}\n                            <Grid item xs={12}>\n                              <div style={{ display: 'flex',flex:1,  justifyContent: 'space-between', marginBottom: 25,width:'92%' ,}}  >\n                                <div style={{ width:'83.5%',}}>\n                                <Grid item xs={12}>\n                                  <CustomTextField\n                                    placeholder=\"Title of Job\"\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    className=\"login-text-field\"\n                                    name={`portfolio[${index}].job_title`}\n                                    onChange={handleChange}\n                                    value={item?.job_title}\n                                  />\n                                  </Grid>\n                                </div>\n                                \n                                {index == 0 && (\n                                  (windowWIdth > 530) ? (\n                                    <>\n                                     <Grid item xs={1}>\n                                     \n                                     \n                                      </Grid>\n                                    </>\n                                  ) : (\n                                    <Tooltip\n                                      title=\"Remove Image\"\n                                      className=\"pointer\"\n\n                                    \n                                    >\n                                      <RemoveCircleIcon\n                                        style={{ fontSize: \"30px\" ,}}\n                                        onClick={() => {\n                                          handleModalClose();\n                                          setType(`portfolio`);\n                                          setModalContent({\n                                            setField: () => {\n                                              remove(index);\n                                            },\n                                          });\n                                        }}\n                                      />\n                                    </Tooltip>\n                                  )\n                                )}\n                                {(\n                                  (windowWIdth > 530) ? (\n                                    <>\n                                     <Grid item xs={1} style={{textAlign: \"right\",}} >\n                                    {/* <div style={{justifyContent:'flex-end',backgroundColor:'red',flex:1,textAlign:'right'}}> */}\n                                      <CustomButton\n                                        style={{marginTop:\"-1px\",\n                                          // padding: \"16px 32px 15px 33px\",\n                                          borderRadius: \"21px\",\n                                          backgroundColor: \"#085044\",\n                                          marginLeft:\"15px\"\n                                        }}\n                                        onClick={() => {\n                                          handleModalClose();\n                                          setType(`portfolio`);\n                                          setModalContent({\n                                            ...item,\n                                            message: \"Are you sure you want to delete this portfolio section?\",\n                                            setField: () => {\n                                              remove(index);\n                                            },\n                                          });\n                                        }}\n                                      >\n                                        Delete\n                                      </CustomButton>\n                                      {/* </div> */}\n                                      </Grid>\n                                    </>\n                                  ) : (\n                                    <Tooltip\n                                      title=\"Remove Image\"\n                                      className=\"pointer\"\n\n                                    \n                                    >\n                                      <RemoveCircleIcon\n                                        style={{ fontSize: \"30px\" ,}}\n                                        onClick={() => {\n                                          handleModalClose();\n                                          setType(`Job ${index}.`);\n                                          setModalContent({\n                                            ...item,\n                                            message: \"Are you sure you want to delete this portfolio section?\",\n                                            setField: () => {\n                                              remove(index);\n                                            },\n                                          });\n                                        }}\n                                      />\n                                    </Tooltip>\n                                  )\n                                )}\n                              </div>\n\n\n                            </Grid>\n\n                            <Grid item xs={12}>\n                              <div>\n                                <FieldArray\n                                  name={`portfolio[${index}].file`}\n                                  render={({ insert, remove, push }) => (\n                                    <Grid\n                                      container\n                                      spacing={3}\n                                      className={classes.fixWrap}\n                                    >\n                                      {portCheck > 0 &&\n                                        item?.file[0].file !== \"\" && (\n                                          <Grid\n                                            item\n                                            style={{\n                                              display: \"flex\",\n                                              overflowX: \"scroll\",\n                                              overflowY: \"hidden\",\n                                              height: \"280px\",\n                                              padding: \"10px 15px\",\n                                            }}\n                                            xs={12}\n                                            sm={8}\n                                            md={12}\n                                            className=\"no_progress_bar \"\n                                            id={`image_port_container_${index}`}\n                                          >\n                                            {item?.file.length >= 1 &&\n                                              item?.file[0].file !== \"\" &&\n                                              item?.file.map(\n                                                (item_item, index_1) => {\n                                                  return (\n                                                    item_item.file !== \"\" && (\n                                                      <Grid\n                                                        item\n                                                        xs={12}\n                                                        sm={12}\n                                                        md={4}\n                                                        lg={3}\n                                                        className={\n                                                          classes.fix_margin\n                                                        }\n                                                        style={{\n                                                          minWidth: \"288px\",\n                                                          display: \"flex\",\n                                                          flexDirection:\n                                                            \"column\",\n                                                          marginRight: \"45px\",\n                                                        }}\n                                                      >\n                                                        <span\n                                                          style={{\n                                                            position:\n                                                              \"relative\",\n                                                          }}\n                                                        >\n                                                          <div\n                                                            style={{\n                                                              display: \"flex\",\n                                                              alignItems:\n                                                                \"center\",\n                                                              justifyContent:\n                                                                \"center\",\n                                                              margin:\n                                                                \"0px 26px 10px 0\",\n                                                              maxWidth: \"277px\",\n                                                              minWidth: \"277px\",\n                                                              width: \"100%\",\n                                                              height: \"170px\",\n                                                            }}\n                                                          >\n                                                            <img\n                                                              id={\n                                                                \"hosimage_\" +\n                                                                index_1\n                                                              }\n                                                              style={{\n                                                                width: \"100%\",\n                                                                height: \"100%\",\n                                                                objectFit:\n                                                                  \"contain\",\n                                                                border: '1px solid #ccc',\n                                                                borderRadius: 5\n                                                              }}\n                                                              className=\"port_image\"\n                                                              src={\n                                                                typeof item_item.file ==\n                                                                  \"object\"\n                                                                  ? item_item.file ==\n                                                                    null\n                                                                    ? \"\"\n                                                                    : URL.createObjectURL(\n                                                                      item_item.file\n                                                                    )\n                                                                  : typeof item_item.file ==\n                                                                    \"string\"\n                                                                    ? item_item.file\n                                                                    : \"\"\n                                                              }\n                                                              alt={\n                                                                typeof item_item.file ==\n                                                                  \"object\"\n                                                                  ? item_item.file ==\n                                                                    null\n                                                                    ? \"\"\n                                                                    : URL.createObjectURL(\n                                                                      item_item.file\n                                                                    )\n                                                                  : typeof item_item.file ==\n                                                                    \"string\"\n                                                                    ? item_item.file\n                                                                    : \"\"\n                                                              }\n                                                            />\n                                                          </div>\n                                                          <div\n                                                            style={{\n                                                              width: \"277px\",\n                                                              height: \"79px\",\n                                                              overflow: \"Auto\",\n                                                            }}\n                                                          >\n                                                            <Typography\n                                                              style={{\n                                                                wordBreak:\n                                                                  \"break-all\",\n                                                                textAlign:\n                                                                  \"left\",\n                                                                fontSize:\n                                                                  \"13px\",\n                                                              }}\n                                                              className=\"articles-content\"\n                                                            >\n                                                              {\n                                                                item_item.description\n                                                              }\n                                                            </Typography>\n                                                          </div>\n                                                          <Tooltip\n                                                            title=\"Remove Image\"\n                                                            className=\"remove_icon_visible_profile pointer\"\n                                                          >\n                                                            <RemoveCircleIcon\n                                                              onClick={() => {\n                                                                handleModalClose();\n                                                                setType(\n                                                                  `Job ${index} image.`\n                                                                );\n\n                                                                setModalContent(\n                                                                  {\n                                                                    setField:\n                                                                      () =>\n                                                                        setFieldValue(\n                                                                          `portfolio[${index}].file`,\n                                                                          item?.file?.filter(\n                                                                            (\n                                                                              item,\n                                                                              index_2\n                                                                            ) => {\n                                                                              return (\n                                                                                index_1 !==\n                                                                                index_2\n                                                                              );\n                                                                            }\n                                                                          )\n                                                                        ),\n                                                                  }\n                                                                );\n                                                              }}\n                                                            />\n                                                          </Tooltip>\n                                                        </span>\n                                                      </Grid>\n                                                    )\n                                                  );\n                                                }\n                                              )}\n                                          </Grid>\n                                        )}\n\n                                      <Grid\n                                        item\n                                        xs={12}\n                                        md={3}\n                                        sm={6}\n                                        style={{ marginLeft: 'auto' }}\n                                        className={\n                                          port_file[index] !== \"\" &&\n                                          \"add_image_class\"\n                                        }\n                                      >\n                                        {port_file[index] == \"\" ? (\n                                          <label\n                                            htmlFor={`contained-button-files[${index}]`}\n                                          >\n                                            <CustomButton\n                                              fullWidth\n                                              component=\"span\"\n                                              className=\"doctor-profile-plus-button\"\n                                              style={{\n                                                marginTop: \"0\",\n                                              }}\n                                            >\n                                              <div className=\"plus-icon-text\">\n                                                <>\n                                                  <AddIcon\n                                                    fontSize=\"large\"\n                                                    className=\"plus add_Icon\"\n                                                  />\n                                                  <Typography>\n                                                    Add Image\n                                                  </Typography>\n                                                </>\n                                              </div>\n\n\n                                              <input\n                                                hidden\n                                                id={`contained-button-files[${index}]`}\n                                                type=\"file\"\n                                                name={`clinic[${index}][${item.length - 1\n                                                  }].file`}\n                                                onChange={async (e) => {\n                                                  if (\n                                                    e.target.files[0].type.split(\n                                                      \"/\"\n                                                    )[0] === \"image\"\n                                                  ) {\n                                                    let port_due = port_file;\n                                                    port_due[index] =\n                                                      e.target.files[0];\n                                                    setPortfile(\n                                                      port_file?.map(\n                                                        (item, index_index) => {\n                                                          return index ==\n                                                            index_index\n                                                            ? e.target.files[0]\n                                                            : item;\n                                                        }\n                                                      )\n                                                    );\n                                                  } else {\n                                                    setPopupProps({ title: 'Error', message: \"File must be an image\", primaryText: 'Ok', hideSecondaryButton: true })\n                                                    // Toast.error(\n                                                    //   \"File must be an image\"\n                                                    // );\n                                                  }\n                                                }}\n                                                accept=\"image/*\"\n                                              />\n                                            </CustomButton>\n                                            <p style={{\n                                              marginTop: \"0px\",\n                                            }}>Ideal photo size: 1024px*1024px</p>\n                                          </label>\n                                        ) : (\n                                          port_file[index] &&\n                                          port_file[index] !== \"\" && (\n                                            <img\n                                              width=\"100%\"\n                                              height=\"169px\"\n                                              style={{\n                                                objectFit: \"cover\",\n                                                margin: \"0 0 14px 0px\",\n                                              }}\n                                              src={URL.createObjectURL(\n                                                port_file[index]\n                                              )}\n                                            />\n                                          )\n                                        )}\n\n\n\n                                        <TextareaAutosize\n                                          className=\"text-area-field_addbutton\"\n                                          aria-label=\"minimum height\"\n                                          rowsMin={5}\n                                          placeholder=\"Description\"\n                                          value={port_value[index]}\n                                          onChange={async (e) => {\n                                            if (\n                                              port_value[index].length < 100\n                                            ) {\n                                              await setPortvalue(\n                                                port_value?.map(\n                                                  (item, index_index) => {\n                                                    return index_index === index\n                                                      ? e.target.value\n                                                      : item;\n                                                  }\n                                                )\n                                              );\n                                            } else {\n                                              return;\n                                            }\n                                          }}\n                                        />\n                                        {port_file[index] &&\n                                          port_file[index] !== \"\" && (\n                                            <CustomButton\n                                              component=\"span\"\n                                              fullWidth\n                                              className=\"upload-button\"\n                                              onClick={() => {\n                                                setFieldValue(\n                                                  `portfolio[${index}].file[${item?.file.length - 1\n                                                  }].description`,\n                                                  port_value[index]\n                                                );\n                                                setFieldValue(\n                                                  `portfolio[${index}].file[${item?.file.length - 1\n                                                  }].file`,\n                                                  port_file[index]\n                                                );\n                                                push({\n                                                  file: \"\",\n                                                  description: \"\",\n                                                });\n                                                setPortfile(\n                                                  port_file.map(\n                                                    (item, index_1) => {\n                                                      return index_1 == index\n                                                        ? \"\"\n                                                        : item;\n                                                    }\n                                                  )\n                                                );\n                                                setPortvalue(\n                                                  port_value.map(\n                                                    (item, index_1) => {\n                                                      return index_1 == index\n                                                        ? \"\"\n                                                        : item;\n                                                    }\n                                                  )\n                                                );\n                                              }}\n                                            >\n                                              Add Image\n                                            </CustomButton>\n                                          )}\n                                      </Grid>\n\n                                      {/* </div> */}\n                                    </Grid>\n                                  )}\n                                />\n                              </div>\n                            </Grid>\n                          </div>\n                        );\n                      })}\n                    </>\n                  )}\n                />\n\n                <FieldArray\n                  name={`clinic`}\n                  render={({ insert, remove, push }) => (\n                    <>\n                      <Grid item xs={12} className=\"office-address-grid\">\n                        <Box\n                          display=\"flex\"\n                          alignItems=\"center\"\n                          justifyContent=\"space-between\"\n                          flexWrap=\"wrap\"\n                          flexShrink=\"\"\n                        >\n                          <Typography className=\"visible-title\">\n                            Hospital/Clinic\n                          </Typography>\n                          {/* </Grid> */}\n                          {/* <Grid item lg={6} xs={12} className=\"custom-save-button\"> */}\n                          {windowWIdth > 460 ? (\n                            <CustomButton\n                              style={{\n                                padding: \"16px 32px 15px 33px\",\n                                borderRadius: \"21px\",\n                                backgroundColor: \"#085044\",marginRight:30\n                              }}\n                              onClick={() => {\n                                push([\n                                  {\n                                    file: \"\",\n                                    description: \"\",\n                                  },\n                                ]);\n                                let newCLinic = Clinic_value;\n                                let newCLinicFile = Clinic_File;\n                                setClinicvalue([...newCLinic, \"\"]);\n                                setClinicFile([...newCLinicFile, \"\"]);\n                              }}\n                            >\n                              Add new Clinic\n                            </CustomButton>\n                          ) : (\n                            <AddCircleIcon\n                              style={{ fontSize: \"30px\" }}\n                              onClick={() => {\n                                push([{ file: \"\", description: \"\" }]);\n\n                                let newCLinic = Clinic_value;\n                                let newCLinicFile = Clinic_File;\n                                setClinicvalue([...newCLinic, \"\"]);\n                                setClinicFile([...newCLinicFile, \"\"]);\n                              }}\n                            />\n                          )}\n                        </Box>\n                      </Grid>\n                      {values?.clinic?.map((item, index) => {\n                        return (\n                          <>\n                            {(\n                              <Grid item xs={12} style={{ textAlign: \"right\" }}>\n                                {windowWIdth > 460 ? (\n                                  <CustomButton\n                                    style={{\n                                      padding: \"16px 32px 15px 33px\",\n                                      borderRadius: \"21px\",\n                                      backgroundColor: \"#085044\",marginRight:33\n                                    }}\n                                    onClick={() => {\n                                      console.log(values)\n                                      const token = Auth.getToken().token;\n                                      setPopupProps({ title: 'Delete', message: \"Are you sure you want to delete this hospital/clinic section?\", onYes : ()=>{\n                                        values?.clinic.length == 1 ? setFieldValue('clinic', clinic_interface) : remove(index)\n                                        fetch(BaseUrl()+'remove-addr-rgst-edu-work/'+item[0].mainID+'/doctor_hospital_clinic', {method : 'GET', headers : {Authorization: `Bearer ${token}`}})\n                                      }})\n                                      // handleModalClose();\n                                      // setType(`doctor_hospital_clinic`);\n\n                                      // setModalContent({\n                                      //   ...item,\n                                      //   message: \"Are you sure you want to delete this hospital/clinic section?\",\n                                      //   setField: () => values?.clinic.length == 1 ? setFieldValue('clinic', clinic_interface) : remove(index)\n                                      // });\n                                    }}\n                                    // onClick={() => {\n                                    //   handleModalClose();\n                                    //   setType(`hospital/clinic`);\n                                    //   setModalContent({\n                                    //     ...item,\n                                    //     message: \"Are you sure you want to delete this hospital/clinic section?\",\n                                    //     setField: () => values?.clinic.length == 1 ? setFieldValue('clinic', clinic_interface) : remove(index)\n                                    //   });\n                                    // }}\n                                  >\n                                    Delete\n                                  </CustomButton>\n                                ) : (\n                                  <RemoveCircleIcon\n                                    style={{ fontSize: \"30px\" }}\n                                    onClick={() => {\n                                      console.log(values)\n                                      const token = Auth.getToken().token;\n                                      setPopupProps({ title: 'Delete', message: \"Are you sure you want to delete this hospital/clinic section?\", onYes : ()=>{\n                                        values?.clinic.length == 1 ? setFieldValue('clinic', clinic_interface) : remove(index)\n                                        fetch(BaseUrl()+'remove-addr-rgst-edu-work/'+item[0].mainID+'/doctor_hospital_clinic', {method : 'GET', headers : {Authorization: `Bearer ${token}`}})\n                                      }})\n                                    }}\n                                  />\n                                )}\n                              </Grid>\n                            )}\n                            <Grid item xs={12}>\n                              <div>\n                                <FieldArray\n                                  name={`clinic[${index}]`}\n                                  render={({ insert, remove, push }) => {\n                                    return (\n                                      <>\n                                        <Grid\n                                          container\n                                          style={{ width: 'calc(100% + 10px)', marginTop: 15, marginLeft: -5 }}\n                                          spacing={3}\n                                          className={classes.fixWrap + ' work-inner-box'}\n                                        >\n                                          {item.length > 0 &&\n                                            item[0]?.file !== \"\" ? (\n                                            <Grid\n                                              item\n                                              xs={12}\n                                              md={12}\n                                              sm={8}\n                                              style={{\n                                                display: \"flex\",\n                                                overflowX: \"scroll\",\n                                                height: \"280px\",\n                                                padding: \"10px 15px\",\n                                              }}\n                                              className=\"no_progress_bar\"\n                                              id={`clinc_image_port_container_${index}`}\n                                            >\n                                              {item.length > 0 &&\n                                                item[0].file !== \"\" &&\n                                                item.map(\n                                                  (item_item, index_1) => {\n                                                    return (\n                                                      item_item.file !== \"\" && (\n                                                        <Grid\n                                                          item\n                                                          className={\n                                                            classes.fix_margin\n                                                          }\n                                                          style={{\n                                                            display: \"flex\",\n                                                            flexDirection:\n                                                              \"column\",\n                                                            marginRight: \"45px\",\n                                                          }}\n                                                        >\n                                                          <div\n                                                            style={{\n                                                              display: \"flex\",\n                                                              alignItems:\n                                                                \"center\",\n                                                              justifyContent:\n                                                                \"center\",\n                                                              margin:\n                                                                \"0px 26px 10px 0\",\n                                                              maxWidth: \"277px\",\n                                                              width: \"100%\",\n                                                              height: \"170px\",\n                                                              position:\n                                                                \"relative\",\n                                                            }}\n                                                          >\n                                                            {item_item.file !==\n                                                              \"\" && (\n                                                                <img\n                                                                  id={\n                                                                    \"hosimage_\" +\n                                                                    index_1\n                                                                  }\n                                                                  style={{\n                                                                    width: \"100%\",\n                                                                    height:\n                                                                      \"100%\",\n                                                                    objectFit:\n                                                                      \"cover\",\n                                                                  }}\n                                                                  className=\"port_image\"\n                                                                  src={\n                                                                    typeof item_item.file ==\n                                                                      \"object\"\n                                                                      ? item_item.file ==\n                                                                        null\n                                                                        ? \"\"\n                                                                        : URL.createObjectURL(\n                                                                          item_item.file\n                                                                        )\n                                                                      : typeof item_item.file ==\n                                                                        \"string\"\n                                                                        ? item_item.file\n                                                                        : \"\"\n                                                                  }\n                                                                  alt={\n                                                                    typeof item_item.file ==\n                                                                      \"object\"\n                                                                      ? item_item.file ==\n                                                                        null\n                                                                        ? \"\"\n                                                                        : URL.createObjectURL(\n                                                                          item_item.file\n                                                                        )\n                                                                      : typeof item_item.file ==\n                                                                        \"string\"\n                                                                        ? item_item.file\n                                                                        : \"\"\n                                                                  }\n                                                                />\n                                                              )}\n                                                            {item.file !==\n                                                              \"\" && (\n                                                                <Tooltip\n                                                                  title=\"Remove Image\"\n                                                                  className=\"remove_icon_visible pointer\"\n                                                                >\n                                                                  <RemoveCircleIcon\n                                                                    onClick={() => {\n                                                                      handleModalClose();\n                                                                      setType(\n                                                                        `Clinic ${index} image.`\n                                                                      );\n                                                                      setModalContent(\n                                                                        {\n                                                                          setField:\n                                                                            () =>\n                                                                              setFieldValue(\n                                                                                `clinic[${index}]`,\n                                                                                item.filter(\n                                                                                  (\n                                                                                    item,\n                                                                                    index_2\n                                                                                  ) => {\n                                                                                    return (\n                                                                                      index_1 !==\n                                                                                      index_2\n                                                                                    );\n                                                                                  }\n                                                                                )\n                                                                              ),\n                                                                        }\n                                                                      );\n                                                                    }}\n                                                                  />\n                                                                </Tooltip>\n                                                              )}\n                                                          </div>\n                                                          <div\n                                                            style={{\n                                                              width: \"277px\",\n                                                              height: \"79px\",\n                                                              overflow: \"Auto\",\n                                                            }}\n                                                          >\n                                                            <Typography\n                                                              style={{\n                                                                wordBreak:\n                                                                  \"break-all\",\n                                                                textAlign:\n                                                                  \"left\",\n                                                                fontSize:\n                                                                  \"13px\",\n                                                              }}\n                                                              className=\"articles-content\"\n                                                            >\n                                                              {\n                                                                item_item.description\n                                                              }\n                                                            </Typography>\n                                                          </div>\n                                                        </Grid>\n                                                      )\n                                                    );\n                                                  }\n                                                )}\n                                            </Grid>\n                                          ) : (\n                                            <></>\n                                          )}\n\n                                          <Grid\n                                            item\n                                            xs={12}\n                                            md={3}\n                                            sm={6}\n                                            style={{ marginLeft: 'auto' }}\n                                            className={\n                                              Clinic_File[index] !== \"\" &&\n                                              \"add_image_class\"\n                                            }\n                                          >\n                                            {Clinic_File[index] == \"\" ? (\n                                              <label\n                                                htmlFor={`clinic_contained-button-files[${index}]`}\n                                              >\n                                                <CustomButton\n                                                  fullWidth\n                                                  component=\"span\"\n                                                  className=\"doctor-profile-plus-button\"\n                                                  style={{\n                                                    marginTop: \"0\",\n                                                  }}\n                                                >\n                                                  <div className=\"plus-icon-text\">\n                                                    <>\n                                                      <AddIcon\n                                                        fontSize=\"large\"\n                                                        className=\"plus add_Icon\"\n                                                      />\n                                                      <Typography>\n                                                        Add Image\n                                                      </Typography>\n                                                    </>\n                                                  </div>\n\n                                                  <input\n                                                    hidden\n                                                    id={`clinic_contained-button-files[${index}]`}\n                                                    type=\"file\"\n                                                    name={`clinic[${index}][${item.length - 1\n                                                      }].file`}\n                                                    onChange={async (e) => {\n                                                      if (\n                                                        e.target.files[0].type.split(\n                                                          \"/\"\n                                                        )[0] === \"image\"\n                                                      ) {\n                                                        let Clinic_due =\n                                                          Clinic_File;\n                                                        Clinic_due[index] =\n                                                          e.target.files[0];\n                                                        setClinicFile(\n                                                          Clinic_due?.map(\n                                                            (\n                                                              item,\n                                                              index_index\n                                                            ) => {\n                                                              return index ==\n                                                                index_index\n                                                                ? e.target\n                                                                  .files[0]\n                                                                : item;\n                                                            }\n                                                          )\n                                                        );\n                                                      } else {\n                                                        setPopupProps({ title: 'Error', message: \"File must be an image\", primaryText: 'Ok', hideSecondaryButton: true })\n                                                        // Toast.error(\n                                                        //   \"File must be an image\"\n                                                        // );\n                                                      }\n                                                    }}\n                                                    accept=\"image/*\"\n                                                  />\n                                                </CustomButton>\n                                              </label>\n                                            ) : (\n                                              Clinic_File[index] &&\n                                              Clinic_File[index] !== \"\" && (\n                                                <img\n                                                  width=\"100%\"\n                                                  height=\"169px\"\n                                                  style={{\n                                                    objectFit: \"cover\",\n                                                    margin: \"0 0 14px 0px\",\n                                                  }}\n                                                  src={URL.createObjectURL(\n                                                    Clinic_File[index]\n                                                  )}\n                                                />\n                                              )\n                                            )}\n\n                                            <TextareaAutosize\n                                              className=\"text-area-field_addbutton\"\n                                              aria-label=\"minimum height\"\n                                              rowsMin={5}\n                                              name={`clinic[${index}][${item.length - 1\n                                                }].description`}\n                                              placeholder=\"Description\"\n                                              value={Clinic_value[index]}\n                                              onChange={async (e) => {\n                                                if (\n                                                  Clinic_value[index].length <\n                                                  100\n                                                ) {\n                                                  await setClinicvalue(\n                                                    Clinic_value.map(\n                                                      (item, index_index) => {\n                                                        return index_index ===\n                                                          index\n                                                          ? e.target.value\n                                                          : item;\n                                                      }\n                                                    )\n                                                  );\n                                                } else {\n                                                  return;\n                                                }\n                                              }}\n                                            />\n                                            {Clinic_File[index] !== \"\" && (\n                                              <CustomButton\n                                                component=\"span\"\n                                                fullWidth\n                                                className=\"upload-button\"\n                                                onClick={async () => {\n                                                  await setFieldValue(\n                                                    `clinic[${index}][${item.length - 1\n                                                    }].description`,\n                                                    Clinic_value[index]\n                                                  );\n                                                  await setFieldValue(\n                                                    `clinic[${index}][${item.length - 1\n                                                    }].file`,\n                                                    Clinic_File[index]\n                                                  );\n                                                  push({\n                                                    file: \"\",\n                                                    description: \"\",\n                                                  });\n                                                  setClinicFile(\n                                                    Clinic_File.map(\n                                                      (item, index_1) => {\n                                                        return index_1 == index\n                                                          ? \"\"\n                                                          : item;\n                                                      }\n                                                    )\n                                                  );\n                                                  setClinicvalue(\n                                                    Clinic_value.map(\n                                                      (item, index_1) => {\n                                                        return index_1 == index\n                                                          ? \"\"\n                                                          : item;\n                                                      }\n                                                    )\n                                                  );\n                                                }}\n                                              >\n                                                Add Image\n                                              </CustomButton>\n                                            )}\n                                          </Grid>\n                                        </Grid>\n                                      </>\n                                    );\n                                  }}\n                                />\n                              </div>\n                            </Grid>\n                          </>\n                        );\n                      })}\n                    </>\n                  )}\n                />\n                {/* </Grid> */}\n                {/* <Grid container className=\"visible-portfolio-grid-container\"> */}\n                <Grid item lg={12} xs={12} className=\"office-address-grid\">\n                  <Typography className=\"visible-title\">Feedbacks</Typography>\n                </Grid>\n                {[...Array(5)].map((item) => {\n                  return (\n                    <>\n                      <Grid item xs={12} className=\"office-address-grid\">\n                        <Box display=\"flex\" justifyContent=\"space-between\">\n                          <span>\n                            <Typography className=\"visible-title_1\">\n                              Irretable bowel syndrome\n                            </Typography>\n                            <Typography className=\"visible-title_2\">\n                              John sui | 23Aug,2021\n                            </Typography>\n                            <Rating\n                              name=\"simple-controlled\"\n                              value={value}\n                              className=\"rating\"\n                              onChange={(event, newValue) => {\n                                setValue(newValue);\n                              }}\n                            />\n                          </span>\n                          <span>\n                            {/* </Grid>\n                    <Grid item lg={6} xs={12}> */}\n                            <Typography className=\"final_price\">\n                              Final Price\n                            </Typography>\n                            <Typography className=\"final_price_price\">\n                              $740\n                            </Typography>\n                          </span>\n                        </Box>\n                      </Grid>\n\n                      <Grid item xs={12} className=\"feedBack_content\">\n                        Lorem Ipsum is simply dummy text of the printing and\n                        typesetting industry. Lorem Ipsum has been the\n                        industry's standard dummy text ever since the 1500s, whe\n                        an unknown printer took a galley of type and scrambled\n                        it to make a type specimen book.\n                      </Grid>\n                      <hr style={{ width: \"98%\" }} />\n                    </>\n                  );\n                })}\n                <Grid xs={12} style={{ textAlign: \"center\" }}>\n                  <CustomButton\n                    style={{\n                      background: \"none\",\n                      border: \"1px solid #085044\",\n                      color: \"#085044\",\n                    }}\n                  >\n                    Load More\n                  </CustomButton>\n                </Grid>\n\n                <Grid item xs={12} style={{ textAlign: \"right\" }}>\n                  <CustomButton\n                  style={{marginRight:15}}\n                    type=\"submit\"\n                    variant=\"contained\"\n                    onClick={handleSubmit}\n                  >\n                    save\n                  </CustomButton>\n                </Grid>\n              </Grid>\n            </Form>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n};\n\nexport default withRouter(VisibleProfileInfo);\n","import React, { useRef, useState } from \"react\";\n\nimport { Grid, Paper, Button } from \"@material-ui/core\";\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport { get } from \"lodash\";\n\nimport \"./myProfile.scss\";\nimport PersonalInfo from \"../personalTab/personalInfo\";\nimport ProfessionalInfo from \"../professionalInfo/professionalInfo\";\nimport TreatmentsInfo from \"../treatmentsInfo/treatmentsInfo\";\nimport BusinessInfo from \"../businessInfo/businessInfo\";\nimport VisibleProfileInfo from \"../visibleProfileInfo/visibleProfileInfo\";\nimport NotificationHeader from \"../../../../header/notificationHeader\";\nimport { useEffect } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../../../../hooks/hooks\";\nimport {\n  fetchProfileAsync,\n  selectProfileUsers,\n} from \"../../../../profile/profileSlice\";\nimport { useSelector } from \"react-redux\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Toast from \"../../../../../reducres/reducers/toast\";\nimport {\n  closeSpinner,\n  loadSpinner,\n} from \"../../../../../reducres/reducers/spinner\";\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n  root1: {\n    display: \"block\",\n    margin: \"0 auto\",\n    padding: theme.spacing(4),\n  },\n  title: {\n    padding: theme.spacing(2),\n  },\n  textField: {\n    marginBottom: theme.spacing(2),\n  },\n  linkCheckbox: {\n    alignItems: \"center\",\n  },\n  typogarphy: {\n    textAlign: \"right\",\n  },\n  submitButton: {\n    marginTop: \"20px\",\n    marginBottom: \"30px\",\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  paper: {\n    position: \"absolute\",\n    width: 500,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #fff\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  changeColor: {\n    \"& > div > span\": {\n      background: \"#b784a7\",\n    },\n  },\n}));\n\nconst MyProfile: React.FC<any> = () => {\n  const classes = useStyles();\n  const dispatch = useAppDispatch();\n  const [value, setValue] = React.useState(0);\n\n  const [modalStyle] = React.useState(getModalStyle);\n  const [open, setOpen] = React.useState(false);\n\n  const { profileUsers } = useAppSelector(selectProfileUsers);\n\n  const PersonalInfoRef = useRef<any>(null)\n  const ProfessionalInfoRef = useRef<any>(null)\n  const BusinessInfoRef = useRef<any>(null)\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    dispatch(loadSpinner());\n    dispatch(fetchProfileAsync()).then((result) => {\n      if (result?.payload?.phone !== undefined) {\n        dispatch(closeSpinner());\n      }\n      if (result?.payload?.response?.data?.statusCode == 400) {\n        Toast.error(result?.payload?.response?.data?.message);\n        dispatch(closeSpinner());\n      }\n    });\n  }, []);\n  const body = (\n    <div className=\"treatment-popup\">\n      <div style={modalStyle} className={classes.paper}>\n        {/* <h2 id=\"simple-modal-title\">Text in a modal</h2> */}\n        <Typography variant=\"h5\" id=\"simple-modal-description\">\n          Please Get Verified First.\n        </Typography>\n        <Box display=\"flex\" justifyContent=\"space-evenly\" alignItems=\"center\">\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleClose}>Ok</Button>\n        </Box>\n      </div>\n    </div>\n  );\n\n  const state = useSelector((state) => state[\"profile\"]);\n\n  const handleTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n\n    const change = () => {\n      dispatch(loadSpinner());\n      if (newValue == 2) {\n        if (state?.profileUsers?.is_active == 1) {\n          setValue(newValue);\n          setTimeout(() => {\n            dispatch(closeSpinner());\n          }, 2000);\n        } else {\n          setValue(newValue);\n          setTimeout(() => {\n            dispatch(closeSpinner());\n          }, 2000);\n        }\n      } else {\n        setValue(newValue);\n        setTimeout(() => {\n          dispatch(closeSpinner());\n        }, 2000);\n      }\n    }\n\n    if(value==0)return PersonalInfoRef.current?.onTabChange(change)\n    if(value==1)return ProfessionalInfoRef.current?.onTabChange(change)\n    if(value==3)return BusinessInfoRef.current?.onTabChange(change)\n    change()\n  };\n\n\n\n  return (\n    <div className=\"profile-tab-main\">\n      {/* <NotificationHeader />           */}\n      <div>\n        <Modal\n          open={open}\n          onClose={handleClose}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          {body}\n        </Modal>\n      </div>\n      <Grid container >\n        <Grid item xs={12}>\n          <Paper className={classes.root}>\n            <Tabs\n              value={value}\n              onChange={handleTabChange}\n              indicatorColor=\"primary\"\n              textColor=\"primary\"\n              centered\n\n              className={`outer-tabs ${classes.changeColor}`}\n            >\n              <Tab\n                label=\"Personal Info\"\n                {...a11yProps(0)}\n                className=\"profile-tabs\"\n              />\n              <Tab\n                label=\"Professional Info\"\n                {...a11yProps(1)}\n                className=\"profile-tabs\"\n              />\n              <Tab\n                label=\"Treatments\"\n                {...a11yProps(2)}\n                className=\"profile-tabs\"\n              />\n              <Tab\n                label=\"Business Info\"\n                {...a11yProps(3)}\n                className=\"profile-tabs\"\n              />\n              <Tab\n                label=\"Public Profile\"\n                {...a11yProps(4)}\n                className=\"profile-tabs\"\n              />\n            </Tabs>\n          </Paper>\n          <Paper className=\"profile-tab-paper\">\n            <TabPanel value={value} index={0}>\n              <PersonalInfo ref={PersonalInfoRef} {...profileUsers} />\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n              <ProfessionalInfo\n                ref={ProfessionalInfoRef}\n                speciality_info={get(profileUsers, \"user_details\")}\n                is_active={get(profileUsers, \"is_active\")}\n                user_details={get(profileUsers, \"user_details\")}\n                user_registration={get(profileUsers, \"user_registration\")}\n                user_education={get(profileUsers, \"user_education\")}\n                user_work_experience={get(profileUsers, \"user_work_experience\")}\n              />\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n              <TreatmentsInfo />\n            </TabPanel>\n            <TabPanel value={value} index={3}>\n              <BusinessInfo\n              ref={BusinessInfoRef}\n                user_payment_information={get(\n                  profileUsers,\n                  \"user_payment_information\"\n                )}\n                user_business_info={get(profileUsers, \"user_business_info\")}\n              />\n            </TabPanel>\n            <TabPanel value={value} index={4}>\n              <VisibleProfileInfo\n                {...profileUsers}\n                user_details={get(profileUsers, \"user_details\")}\n                doctor_portfolio={get(profileUsers, \"doctor_portfolio\")}\n                doctor_hospital_clinic={get(\n                  profileUsers,\n                  \"doctor_hospital_clinic\"\n                )}\n              />\n            </TabPanel>\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default MyProfile;\n"],"sourceRoot":""}