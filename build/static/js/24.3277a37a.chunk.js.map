{"version":3,"sources":["features/formValidation/signUpSlice.ts","features/formValidation/signUpYup.tsx"],"names":["fetchRegisterAsync","createAsyncThunk","payload","a","fetchRegister","response","registerSlice","createSlice","name","initialState","userType","email","password","confirmPassword","loading","register","reducers","updateUserType","state","action","updateEmail","updateName","updatePassword","updateConfirmPassword","extraReducers","builder","addCase","pending","fulfilled","actions","useStyles","makeStyles","theme","createStyles","root","maxWidth","display","margin","textField","width","formControl","spacing","minWidth","submitButton","marginTop","title","textAlign","countries","SignUp","classes","dispatch","useAppDispatch","history","useHistory","useEffect","user","store","getState","login","roles","push","createNewUser","data","resetForm","fullName","className","initialValues","zipcode","country","onSubmit","values","validationSchema","Yup","shape","required","matches","test","value","this","parent","min","max","props","touched","errors","handleBlur","handleChange","isSubmitting","Grid","container","justify","direction","item","lg","md","sm","xs","TextField","fullWidth","id","label","type","helperText","error","onChange","onBlur","FormControl","InputLabel","Select","labelId","multiple","input","Input","renderValue","selected","join","map","MenuItem","Checkbox","checked","indexOf","ListItemText","primary","FormHelperText","Button","variant","color"],"mappings":"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","file":"static/js/24.3277a37a.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store\";\nimport { fetchRegister } from \"../register/signUpApi\";\n\nexport interface IRegisterState {\n  userType: string;\n  email: string;\n  name: string;\n  password: string;\n  confirmPassword: string;\n  loading: boolean;\n  register: any;\n}\n\nconst initialState: IRegisterState = {\n  userType: \"\",\n  email: \"\",\n  name: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n  loading: false,\n  register: [],\n};\n\nexport const fetchRegisterAsync = createAsyncThunk(\n  \"register/fetchRegister\",\n  async (payload: any) => {\n    const response = await fetchRegister(payload);\n    return response;\n  }\n);\n\nexport const registerSlice = createSlice({\n  name: \"register\",\n  initialState,\n  reducers: {\n    updateUserType: (state, action) => {\n      state.userType = action.payload;\n    },\n    updateEmail: (state, action) => {\n      state.email = action.payload;\n    },\n    updateName: (state, action) => {\n      state.name = action.payload;\n    },\n    updatePassword: (state, action) => {\n      state.password = action.payload;\n    },\n    updateConfirmPassword: (state, action) => {\n      state.confirmPassword = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchRegisterAsync.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(fetchRegisterAsync.fulfilled, (state, action) => {\n        state.loading = false;\n        state.register = action.payload;\n      });\n  },\n});\n\nexport const {\n  updateUserType,\n  updateEmail,\n  updateName,\n  updatePassword,\n  updateConfirmPassword,\n} = registerSlice.actions;\n\nexport const selectRegister = (state: RootState) => state.login;\n\nexport default registerSlice.reducer;\n","import React, { useEffect } from \"react\";\nimport {\n  Grid,\n  TextField,\n  Button,\n  makeStyles,\n  createStyles,\n  Theme,\n  Input,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  ListItemText,\n  Select,\n  Checkbox,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport { Formik, Form, FormikProps } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport {  useAppDispatch } from \"../../hooks/hooks\";\nimport { fetchRegisterAsync } from \"../formValidation/signUpSlice\";\nimport { store } from \"../../store\";\nimport { useHistory } from \"react-router\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      maxWidth: \"450px\",\n      display: \"block\",\n      margin: \"0 auto\",\n    },\n    textField: {\n      width: \"100%\",\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n      maxWidth: 300,\n    },\n    submitButton: {\n      marginTop: \"24px\",\n    },\n    title: {\n      textAlign: \"center\",\n    },\n  })\n);\n\ninterface ISignUpForm {\n  userType: string;\n  fullName: string;\n  password: string;\n  confirmPassword: string;\n  email: string;\n  zipcode: string;\n  country: Array<string>;\n}\n\nconst countries = [\n  \"India\",\n  \"Sri Lanka\",\n  \"USA\",\n  \"Germany\",\n  \"South Africa\",\n  \"England\",\n  \"Sweden\",\n  \"Austrilia\",\n];\n\nconst SignUp: React.FunctionComponent = () => {\n  const classes = useStyles();\n  const dispatch = useAppDispatch();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    let user = store.getState();\n    if (\n      user.login.user &&\n      user.login.user.roles &&\n      user.login.user.roles[0] &&\n      user.login.user.roles[0].name\n    ) {\n      history.push(\"/dashboard\");\n    }\n  }, []);\n\n  const createNewUser = async (data: ISignUpForm, resetForm: Function) => {\n    dispatch(\n      fetchRegisterAsync({\n        userType: data.userType,\n        name: data.fullName,\n        email: data.email,\n        password: data.password,\n        confirmPassword: data.confirmPassword,\n      })\n    );\n  };\n\n  return (\n    <div className={classes.root}>\n      <Formik\n        initialValues={{\n          userType: \"\",\n          fullName: \"\",\n          password: \"\",\n          confirmPassword: \"\",\n          email: \"\",\n          zipcode: \"\",\n          country: [],\n        }}\n        onSubmit={(values: ISignUpForm, actions) => {\n          createNewUser(values, actions.resetForm);\n        }}\n        validationSchema={Yup.object().shape({\n          email: Yup.string().email().required(\"Enter valid email-id\"),\n          fullName: Yup.string().required(\"Please enter full name\"),\n          state: Yup.string().required(\"please select atleast 3\"),\n          password: Yup.string()\n            .matches(\n              /^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()]).{8,20}\\S$/\n            )\n            .required(\n              \"Please valid password. One uppercase, one lowercase, one special character and no spaces\"\n            ),\n          confirmPassword: Yup.string()\n            .required(\"Required\")\n            .test(\"password-match\", \"Password musth match\", function (value) {\n              return this.parent.password === value;\n            }),\n          zipcode: Yup.string()\n            .required()\n            .matches(/^[0-9]+$/, \"Must be only digits\")\n            .min(6, \"Must be exactly 6 digits\")\n            .max(6, \"Must be exactly 6 digits\"),\n\n          country: Yup.array()\n            .required(\"Must have Select\")\n            .min(2, \" select minimun 2 countries\"),\n        })}\n      >\n        {(props: FormikProps<ISignUpForm>) => {\n          const {\n            values,\n            touched,\n            errors,\n            handleBlur,\n            handleChange,\n            isSubmitting,\n          } = props;\n          return (\n            <Form>\n              <h1 className={classes.title}>Sign up</h1>\n              <Grid container justify=\"space-around\" direction=\"row\">\n                <Grid\n                  item\n                  lg={10}\n                  md={10}\n                  sm={10}\n                  xs={10}\n                  className={classes.textField}\n                >\n                  <TextField\n                    fullWidth\n                    name=\"fullName\"\n                    id=\"fullName\"\n                    label=\"Full Name\"\n                    value={values.fullName}\n                    type=\"text\"\n                    helperText={\n                      errors.fullName && touched.fullName\n                        ? errors.fullName\n                        : \"Enter your full name.\"\n                    }\n                    error={errors.fullName && touched.fullName ? true : false}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                  />\n                </Grid>\n                <Grid\n                  item\n                  lg={10}\n                  md={10}\n                  sm={10}\n                  xs={10}\n                  className={classes.textField}\n                >\n                  <TextField\n                    fullWidth\n                    name=\"password\"\n                    id=\"password\"\n                    label=\"Password\"\n                    value={values.password}\n                    type=\"password\"\n                    helperText={\n                      errors.password && touched.password\n                        ? \"Please enter valid password should be at least 8 digits including at least one uppercase, one lowercase, one special character  and no spaces\"\n                        : \"Please enter valid password should be at least 8 digits including at least one uppercase, one lowercase, one special character  and no spaces\"\n                    }\n                    error={errors.password && touched.password ? true : false}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                  />\n                </Grid>\n                <Grid\n                  item\n                  lg={10}\n                  md={10}\n                  sm={10}\n                  xs={10}\n                  className={classes.textField}\n                >\n                  <TextField\n                    fullWidth\n                    name=\"confirmPassword\"\n                    id=\"confirmPassword\"\n                    label=\"Confirm password\"\n                    value={values.confirmPassword}\n                    type=\"password\"\n                    helperText={\n                      errors.confirmPassword && touched.confirmPassword\n                        ? errors.confirmPassword\n                        : \"Re-enter password to confirm\"\n                    }\n                    error={\n                      errors.confirmPassword && touched.confirmPassword\n                        ? true\n                        : false\n                    }\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                  />\n                </Grid>\n                <Grid\n                  item\n                  lg={10}\n                  md={10}\n                  sm={10}\n                  xs={10}\n                  className={classes.textField}\n                >\n                  <TextField\n                    fullWidth\n                    name=\"email\"\n                    id=\"email\"\n                    label=\"Email-id\"\n                    value={values.email}\n                    type=\"email\"\n                    helperText={\n                      errors.email && touched.email\n                        ? errors.email\n                        : \"Enter email-id\"\n                    }\n                    error={errors.email && touched.email ? true : false}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                  />\n                </Grid>\n                <Grid\n                  item\n                  lg={10}\n                  md={10}\n                  sm={10}\n                  xs={10}\n                  className={classes.textField}\n                >\n                  <TextField\n                    fullWidth\n                    name=\"zipcode\"\n                    id=\"zipcode\"\n                    label=\"ZipCode\"\n                    value={values.zipcode}\n                    type=\"text\"\n                    helperText={\n                      errors.zipcode && touched.zipcode\n                        ? errors.zipcode\n                        : \"Enter your zipcode.\"\n                    }\n                    error={errors.zipcode && touched.zipcode ? true : false}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                  />\n                </Grid>\n                <Grid\n                  item\n                  lg={10}\n                  md={10}\n                  sm={10}\n                  xs={10}\n                  className={classes.textField}\n                >\n                  <FormControl\n                    fullWidth\n                    error={errors.country && touched.country ? true : false}\n                  >\n                    <InputLabel id=\"demo-mutiple-checkbox-label\">\n                      Country\n                    </InputLabel>\n                    <Select\n                      labelId=\"demo-mutiple-checkbox-label\"\n                      id=\"country\"\n                      name=\"country\"\n                      multiple\n                      input={<Input />}\n                      value={values.country}\n                      onChange={handleChange}\n                      renderValue={(selected) =>\n                        (selected as string[]).join(\", \")\n                      }\n                    >\n                      {countries.map((name) => (\n                        <MenuItem key={name} value={name}>\n                          <Checkbox\n                            checked={values.country.indexOf(name) > -1}\n                          />\n                          <ListItemText primary={name} />\n                        </MenuItem>\n                      ))}\n                    </Select>\n                    <FormHelperText>\n                      {errors.country && touched.country ? errors.country : \"\"}\n                    </FormHelperText>\n                  </FormControl>\n                </Grid>\n                <Grid\n                  item\n                  lg={10}\n                  md={10}\n                  sm={10}\n                  xs={10}\n                  className={classes.submitButton}\n                >\n                  <Button type=\"submit\" variant=\"contained\" color=\"secondary\">\n                    Submit\n                  </Button>\n                </Grid>\n              </Grid>\n            </Form>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n};\n\nexport default SignUp;\n"],"sourceRoot":""}